///////////////////////////////1. Ders//////////////////////

int main(void)
{
int a[100];
char s[200];
double dar[500];

printf("sizeof(a) = %zu\n", sizeof(a)); //400
printf("sizeof(a) = %zu\n", sizeof(s)); //200
printf("sizeof(a) = %zu\n", sizeof(dar)); //4000
printf("sizeof(a) = %zu\n", sizeof(a) /sizeof(a[0])); //100

}

int main(void)
{
int a[] = {1, 3,,4,5,6,,7,7,8,8}
for (int i = 0; i < sizeof(x) / sizeof(x[0])
printf("%d", x[i]);
}

!! sizeof operatörünün operandı için işlem kodu üretilmez

=======================================================

                            ALGORİTMA SORULARI
//bu algoritmaları el alışkanlığı olması için 5-10 yaz el otomatik olarak yazsın artık

1) a dizisinin elemanlarının toplamını yazan program

int main(void)
{
int sum = 0 //değer vermessek çöp değer ile hayata başlar

for(int i = 0; i < SIZE; ++i){
sum += a[i];
}
printf("ival = &d\", ival);
}
----------------------------

2) a dizisinin aritmetik ortalamasını (mean) hesaplayın

int main(void)
{
int sum = 0 

for(int i = 0; i < SIZE; ++i){
sum += a[i];
}
printf("ival = &d\", (double)sum / SIZE);
}

------------------------

3) a dizisinin edğeri tek(odd) olan aritmetik ortalamasını hesaplayın 

int main(void)
{
int sum_odd = 0;
int sum_cnt = 0;

for(int i = 0; i < SIZE; ++i){
if (a[i] % 2 != 0){
sum_odd += a[i];
++sum_cnt;
}
}
if(sum_cnt)
printf("mean of odd values is %f\n", (double)sum_odd / sum_cnt);
else
printf("dzde hiç tek sayı yok");
}

----------------------

4) dizideki en büyük tam sayıyı bulan algoritma

int main(void)
{
int max = a[0];
int max_idx = 0;

for (int i = i; i < SIZE; ++i){
if (a[i] > max)
max = a[i];
max_idx = i;
}
printf("max = %d dizinin %d indisli elemanı\n", max, max_idx);
}

----------------------------

5)dizinin en büyük ve ne küçük elemanının bulan algoritma

int main(void)
{
int max = a[0];
int min = a[0];

for (int i = i; i < SIZE; ++i){
if (a[i] > max)
max = a[i];
}
else if (a[i] < min)
min = a[i]
printf("max = %d dizinin min =  %d \n", max, min);
}

------------------------

6) dizinin runner-up (2. değeri) değerinin hesaplanması

int main(void)
{
int max = a[0];
int runner_up = a[1  ];

if (runner_up > max){
max = a[1];
runner_up = a[0];
}

for (int i = 2; i < SIZE; ++i){
if(a[i] > max){
runner_up = max;
max = a[i];
}
else if (a[i] > runner_up){
runner_up = a[i];
}
}
printf("runner up = %d", runner_up);
}

--------------------------------

7) reverse algoritması
//2 8 1 9 4 3 ==> 3 4 9 1 8 2

int main(void)
{
for (int i = 0; i < SIZE / 2; ++i){
int temp = a[i]
a[i] = a[SIZE - 1 - i];
a[SIZE - 1 - i] = temp;
}
print_array(a, SIZE);
}

--------------------------------

8) linear search (doğrusal arama)

int main(void)
{
int key;

printf("aranan degeri girin: ");
void(scanf("%d", &key);

int flag = 0;

for(int i = 0; i < SIZE; ++i){
if (a[i] == key)
flag = 1; //tam doğru sonuç için flag kullan
break;
}
}

if (flag)
printf("evet dizide var\n");
else 
printf("hayir dizidee yok \");

---------------------------

9) 
boyutu N olan bir dizi var
her karşılaştırma 1 işlem, arttırma 1 işlem
eğer arama işleminde aranan değer dizide yok ise kaç işlem yapılır
bir anahtarın bu dizide olup olmadığını sogulmamız gerekiyor

------------------------
 
10) dizinin elemanlarından unique olanları ekrana yazdır indis numarası ile beraber

int main(void)
{
int a[SIZE];

randomize();
for (int i = 0; i < SIZE; ++i){

a[i] = rand() % 20;
printf("%d" , a[i]
}
print_array(a, SIZE);
for (int i = 0; i < SIZE; ++i){
int is_unique = 1;
for(int k = 0; k < SIZE; ++k){
if (i != k && a[i] == a[k])){
is_unique = 0;
break;
}
}
if (is_unique)
printf("%3d", a[i]);
}

-------------------------

10.5)

int main(void){
int counts[20] = {0}

for (int i = 0; i < SIZE; ++i){
++counts[a[i]]
}
for (int i = 0; i < 20; ++i){
if(counts[i] == 1){
printf("%3d ", i);
}
}
}

-----------------------------

11) binary search (sıralı dizi) 

int main(void)
{
printf("aranan degeri giriniz: ");
scanf("%d", &key);

int idx_first = 0;
int idx_last = SIZE - 1;
int idx_mid;

while (idx_first <= idx_last){
idx_mid = (idx_first + idx_last) / 2;
if (a[idx_mid] == key)
break;

if (a[idx_mid] > key){
idx_last = idx_mid -1;
}
else{
idx_first = idx_mid + 1;
}
}

if (idx_first <= idx_last){
printf("bulundu",idx_mid);
}
else{
printf("bulunamadı");
}

-----------------------------

12) ÖDEV : maximum sub_sequence 
// diznin max sub_sequence toplamını bul

-----------------------------

13) dizinin indis değerlerinin '*' ile alt alta yazılması // 2; **

for (int i = 0; i < SIZE; ++i){
for (int k = 0; k < a[i]; ++k){
putchar('*');
}
}

--------------------------------

14) ÖDEV 13. sorunun cevabının 90 derece ters çevrilmiş halini yazdır

-------------------------------

15) ÖDEV  triangular number hesapla //1, 3, 6, 10, 15, 21

------------------------------

16) ÖDEV 1000'den fazla böeni olan en küçük triangular number nedir

-------------------------------
  
!! sıralama algortiması ile sıralama kriterleri farklı şeylerdir aynı sıralama algoritması ile farklı işlemler yapılabilir.

sıralama algoritmaları:

-bubble sort
-quick sort
-merge sort
-heap sort
-bucket sort
-tim sort
-inserttion sort
-selection sort
-radix sort
-shell sort
-bogo sort
-partial sort( kismi sıralama)
-nth element 


worst-case scenario : en kötü durumda karmaşıklık ne olabilir
best-case scenario :  en iyi durumda karmaşıklık ne olabilir

partition : sırlamada bir koşulu sağlayan ve sağlamayan olarak ikiye ayrılmasına denir

stable : sıralama algoritmasının kararlı olup olmadığını söyler

!!!! en çok kullanılan algoritmaları ezberle, 10-15 kere yaz

bubble sort: 

38 673 711 922 370 540 546 588 // yana yana kontrol edilir yanlış yerde ise yer değiştirir

//////////////////////////////////////////////////////2. DERS///////////////////////////////////////

bubble sort:

int main(void)
{
for (int i = 0; i < SIZE - 1; ++i){
for (int k = 0; k < SIZE - 1 - i; ++k){
if (a[k] > a[k + 1]){ //büyükten küçüğe sıralamak istesek burayı değiştiririz
int temp = a[k];
a[k] = a[k + 1];
a[k + 1] = temp;
}
}
}
print_array(a, SIZE);
}

--------------------------

int main(void)
{
for (int i = 0; i < SIZE - 1; ++i){
for (int k = 0; k < SIZE - 1 - i; ++k)  {
if (a[k] % 2 == 0 && a[k + 1] % 2 != 0 || a[k] % 2 == a[k + 1] % 2 && a[k] > a[k + 1])){ //tekler kendi içinde sıralı çiftler kendi arasında sıralı
int temp = a[k];
a[k] = a[k + 1];
a[k + 1] = temp;
}
}
}
print_array(a, SIZE);
}

====================================

C dilinde yazı işlemleri :

C dilinde (tipik olarak) bir yazı elemanlarının türü 'char' olan bir dizide tutulur

int main(void)
{
char str[40] //yazı bilgisi tutma amacıyla bulunur
}

!! Null turmanated bite stream : bir yazıyı tutmak için yazının karakterlerinin kodları tutulur yazı son karekterinden sonra '\0' kullanılır, '\0' = 0
!! yazının uzunluğu dizideki null karekterşn bulunması ile bulunur
!! null karakter ('\0') böylede yazılabilir '0'

printf("%d %d n", '0', '\n');

int main(void)
{
char str[100]
//BABA
//0100 0010
//0100 0001
//0100 0010
//0100 0001
//0000 0000
}

-----

int main(void)
{
for (int i = 0; i < str[i] != '\0'; ++i){
printf("%c", str[i]);
}
}

!! static ile hayata başlayanalar 0 değeri ile hayata başlar

----

int main(void)
{
char str[100] = {'b', 'u', 'g', 'r', 'a'}; //burada tanımsız davranış yok çünkü diğer 34 eleman 0 değeri ile hayata başlar
for (int i = 0; i < str[i] != '\0'; ++i){
printf("%c", str[i]);
}
}

----

int main(void)
{
char str[5] = {'b', 'u', 'g', 'r', 'a'}; //burada tanımsız davranış var 
for (int i = 0; i < str[i] != '\0'; ++i){
printf("%c", str[i]);
}
}

----

int main(void)
{
char str[40] = "muharrem; //tanımısz davranış yok
for (int i = 0; i < str[i] != '\0'; ++i){
printf("%c", str[i]);
}
}

-----

int main(void)
{
char str[40] = "muharrem; //tanımısz davranış yok
for (int i = 0; i < str[i] != '\0'; ++i){
printf("%c", str[i]);
}
}

-----

int main(void)
{
char str[5] = "bugra; //tanımısz davranış var
for (int i = 0; i < str[i] != '\0'; ++i){
printf("%c", str[i]);
}
}

-----

int main(void)
{
char str[SIZE] = "bugrahan serttas";
int ival = 38745;
puts(str); //bu fonksiyon bugrahan serttas yazısını ekrana yazdırır
puts(&str[0]); //0. elemanını verir 
printf("%d", ival);

------

int main(void)
{
char s1[SIZE] = "bugra; 
char s2[SIZE] = "serttas;
printf("%s  %s\n",s1, s2);
}
}

------

int main(void)
{
char s1[SIZE]; 
printf("isminizi girin: ");
scanf("%s", str);

printf("demek isminiz %s, hos geldiniz %s\n, str, str);
}
}

-----

int main(void)
{
char name[SIZE];
char surname[SIZE];
int age;

printf("isim soy isim ve yas lutfen: ");
scanf("%s%s%d", name, surname, &age);
}

-----------------

-scanf("%s",str) : boşlıklar ile yazılmış yazıyı boşuğu skip ederek almasını istiyorsam
-scanf("%[^\n]s",str) : newline görene kadar boşluklar ile almak istiyorsam

==============================

                              yazı tipi örnekler 

int main(void)
{
char str[SIZE];
printf("bir isim girin: ");
scanf("%s",str);

int len = 0;
for (int i = 0; str[i] != '\n'; ++i) // bu şekilde yazılabilir, while (str[len] != '\0')
++len;
printf("uzunluk:",len);
}

----------

int main(void)
{
char str[SIZE];
int ch;

printf("bir yazi girin: ");
sgets(str);
printf("sayilacak karekter

}





