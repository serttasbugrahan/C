garbage value (çöp değer) : 

!!eğer otomatik ömürlü bir değişkene ilk değer vermez isek (onu initialize etmezsek) o değişken çöp değişkne ile başlar
!!bir değişjkeni çöp değeri ile kullnamak tanımsız davranıştır


------------------------------------------


!! bir blok içinde bildirilen isimlerin scope'u bildirildiği noktadan ilgili bloğun kapanan küme parantezine kadar olan kod alanıdır

int main(){
if(1){
int x = 10;
}
x = 20; // burada hata olur parantez dışında kullanılmıştır.

------------------------------------------

fonskiyonlar (functions):

a) fonksiyonu tanımlamak (to define a function) (function defibition)
b) fonksiyonu çağırmak (to call a function) (function call)
c) fonksiyonu bildirmek (to declare a function) (function declaration)

--------------------------------------------

while(expr){
; // hiçbir şey yapılmaması istendiği zaman  ';' koyulur
}

---------------------------------------

return;
sadece void function'da kullanılır
kodun belli bölümleri kullanılmak istendiği zaman kullanılmalı

void func(int x){
//statemnet
//statemnet
if ( x > 10){  //x >10 doluğu zaman diğer statement çalışmasın fonksiyonu sonlandır
return;
}
//statement;
}

-----------------------------------------

!! fonskiyon 0 dışında hangi değeri döndürürse döndürsün true değerini döndürür

3. başarı bilgisi

standart c kütüphanesi 0 = başarılı diğer değerler başarısız olarak döndürür



--------------------------------------------

while (expr) : expr true olduğu sürece devam eder

-while parantezi içinde void tür olamaz 
-parantex içi boş olamaz
-parantex içinde statement olamaz


--------------------------------------------

!!işaretli türlerde taşma tanımısz davranıştır

-------------------------------------------

while (expr){
while( (expr2){
if (c_exp)
goto out
}
}
out:

//bütün döngülerden çıkılmak istenirse goto statemnet kullan

-------------------------------------------

continue; 
-sadece döngülerde kullanılır
-döngüden çıkarmaz
-kendinden sonrakileri yapma

while (exp)
{
statement
statement
statement
continue; //continue altında kalan statement'lar kullanılmaz döngünğn başına döner
statement
statement
}

----------------------------------------

long double --> double --> float //bu kısım var ise burası ile yapılır

long long --> long --> int

short --> char --> _Bool


!! integral promotion : int türünden düşük operandları (short, char, _Boll) int türüne yükseltmeye denir

- eğer rank'ler farklı ise fakat büyük olan rank işaretsiz ama küçük olan işaretli ise rank'i büyük unsigned ile yapılır

- eğer rank'ler aynı ise işaretler farklı ise rank'i küçük olan unsigned yapılır

dikkat edilmesi gerekenler :
- işaretli ile işaretsizi işleme sokma
- int altı türlerin int türüne yükseltileceğini unutma
- rankler aynı ise tür dönüşümü olmaz

!! işaretsiz türlerde taşma diye bir şey yoktur

!! c dilinde lojik ifade beklenen yerlerde void kullanılamaz
 
--------------------------------------


(void)isprime(x) //bir fonksiyonun geri dönüş değerini kullanmak istemediğimiz zaman bunu yaparız

---------------------------------------

int main(void)
{
for (int i = 0; i < 100; i++){
printf("%d ", rand()); //2. çalıştırlmasında aynı tohum değerinde dolayı aynı sayılar rastgele üretilir
}
}

-----

#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#define randomize() (srand((unsigned)time(0))) 

int main(void)
{
randomize();

for (int i = 0; i < 10; i++)
{
	printf("%d\n",rand()); //her çalıştığında farklı sayı üretir
}

}


--------------------------------------

big O notation : algoritmanın karmaşıklığını anlatmak için söylenir
Big O(1) : constant(sabit) time
Big O(n) : linear complexity
Big O(n log n) : linearitmic 
Big O(n2) : quadretic complexity
Big O(n3) : cubic complexity


-----------------------------------------

int main(void)
{
int a[10];
int b[10];
a = b; //böyle yazılamaz, array decay kuralı ile igilidir
}

array decay : bir dizinin ismin bir ifade (expression) içinde kullandığızda derleyici
dizi ismini dizinn ilk elemanının adresine dönüştürme işlemine denir

------------------------------------------

!! fonksiyonların parametre değişkenleri dizi türlerinden olamaz
void func (int a[10])

!! fonksiyonların geri dönüş değeri türü dizi türü olamaz

!! arraylerde eğer ilk değer verilmez ise static ömürlü ise zero ile hayata başlar

--------------------------------------------

int main(void)
{
int a[10] = {2, 5, 7, 23, 90, 6, 4, 13, 22, 80}; //ilk değer verme
int a[10] = {2, 5, 7}; //geri kalan değerler 0 ile hayata başlar
int a[10] = {0}; //0 değerleri hepsine atanır
int a[] = {0,1,2,3,4}; //dizinin boyutunu ilk değer verince kendisi anlar
}


------------------------------------------

global tanımlı değişkenler 0 değeri ile başlar (int a;)

otomatik tanımlı değişkenler ub olur

-----------------------------------------

C dilinde (tipik olarak) bir yazı elemanlarının türü 'char' olan bir dizide tutulur

!! yazının uzunluğu dizideki null karekterinin bulunması ile bulunur
 

char str[5] = {'b', 'u', 'g', 'r', 'a'}; //burada tanımsız davranış var
char str[5] = "bugra; //tanımısz davranış var, sonunda '\0' vardır yani 6 karakterleri

------------

int main(void)
{
char str[40] = "muharrem; //tanımısz davranış yok
for (int i = 0; i < str[i] != '\0'; ++i){
printf("%c", str[i]);
}
}

------------

puts(str); //bu fonksiyon bugrahan serttas yazısını ekrana yazdırır
gets(str); //bu fonksiyonu ekrandan yazıyı alır

int ch;
ch = getchar(); // char karakteri alır

-----------

!! adres operatörünün operandı L value expression olmak zorunda

----------

int main(void)
{
int a[5] = {1,2,3,4,5};
int b[20] = {0};

int * p = &a[0];
int* p = a; //aynı anlama gelir(array decay)
p = a;
}

!! asla pointer değişkene adres olmayan atama yapma

--------------


int main(void)
{
int x = 346;
double * p;
p = &x;
!! asla bu şekildede kod yazma, tür dönüştürme kullan
}

---------------

int * ptr = &x;

ptr //ptr'nin değeri hangi adres
&ptr //ptr bellekte nerede

--------------

int main(void)
{
int x = 4547;
*&x = 987; //x = 987 aynı anlamda
}

int main(void)
{
int a[4] = {20 ,56 , 90 ,12};
*a = 777; //dizinin ilk elemanının değeri 777 olur

}

int main(void)
{
int x = 5;
int y = 10;
int z = 40;
int* ptr = &x; 
    *ptr = 65; // x = 65
ptr = &y;
    *ptr = 90; // y = 90;
ptr = &z;
    *ptr = 777; //z = 777;
}


--------------------

!! c dilinde diziler bir fonksiyondan bir fonksiyona sadece call by referance olarak gönderilebilinir, call by value çalışmaz

------------------


const int x = 10;

int const x = 10 

//ikisi arasında fark yoktur

--------------------

!! &a[i] = a // aynı anlama gelir
 
!! &a[i] = a + i //aynı anlama gelir -

!! a[i] = *(a + i) //aynı anlama gelir 

!! *p = p[0]; //aynı anlama gelir

!! int p[] = int *ptr

--------------------

- L value olduğunu tespit etmek için başına '&' koyulduğu zaman hata vermiyor ise L value'dur

l value ifadeler :

a
(expr)
*ptr
a[b]
ptr->x
x.y

!! geri kalanlar r value

------------------------------------------


!! adres döndüren bir fonksiyon otomatik ömürlü bir yerel değişkenin adresini döndürmemeli.

int * get_value(void)
{
int x; //static olmalıydı burası, char'da olsa olmaz
printf("bir tam sayi girin: ");
scanf("%d", &x);

return &x; //otomaitk ömürlü değişken geri dönüş değeri olarak kullanılamaz, DANGLİNG POİNTER
}


----------

// 3 pointerda 90 değerini gösterir çünkü x değeri tekrar hayat gelmez

int* get_value(void)
{
static int x;
printf("bir tam sayi girin: ");
scanf("%d", &x);

return &x;
}

int main()
{
int* p1 = get_value();
int* p2 = get_value();
int* p3 = get_value();

printf("%d\n", *p1);
printf("%d\n", *p2);
printf("%d\n", *p3);

}

----------

int * foo(int * p)
{
++* p;
return p;
}
//main içinde tanımalndığı için, x1tanımsız davranış yoktur
int main(void)
{
int x = 99;
int * ptr = foo(&x);
printf("*ptr = %d\n", *ptr); //cevap = 100
}

-----------

int* foo(void)
{
int x = 10;
int* p = &x;

return p; //hatalı x'in adresini döndürür ancak x otomatik ömürlü
}

-----------

int* foo(int *ptr)
{
int* p = ptr;

return p; //bu şekilde hata olmaz, ptr döndürür çünkü
}

------------

adres döndüren bir fonksiyon :

a) statik bir ömürlü nesnenin adresini döndürebilir
  -global bir değişkenin adresi
  -static yerel bir değişkenin adresi
  -string literalleri

b) dinamik ömürlü bir nesne adresi 

c) fonksiyon çağıran koddan aldığı adresi çağıran koda geri döndürebilir

-------------

!! const nesne  adresi türünden örneğin T bir tür olmak üzere
const T * türünden const olmayan nesne türüne yani örneğin T* türüne 

a) c++ dilinde örtülü dönüşüm yoktur
b) c dilinde böyle bir dönüşüm örtülü olarak yapılır ancak bir önlem alınmaz ise kodun okuyucusu bu dönüşüm yanlışıkla yapıldığını dönüşür
C derleyicilerinde böyle bir örtülü dönüşüm yapılması durumunu şüpheyle karşılayarak uyarı mesajı verirler

C dilinde böyle dönüşümleri bilerek istiyerek yapıyor isek mutlaka ve mutlaka tür dönüştürme operatörünü (type - cast) kullanmalıyız

---------------

int main()
{
char str[] = "bilgin";

str[0] = 'y';  // burada ub yok burası çok önemli
}


int main(void)
{
const char* p = "murat";

*p = 'S'; //c'de sentax hatası değil ancak ub olur o yüzden const kullan, C++ 'da hata olur

}


-----------------

int main(void)
{
char * p = "murat";
printf("[1] %zu\n", sizeof(p)); //4 cevabı çıkar, derleyiceye bağlı
printf("[2] %zu\n", sizeof(*p)); //1
printf("[3] %zu\n", sizeof("murat")); //6 (murat\0)
printf("[3] %zu\n", sizeof(p++)); //4, sizeof işlem üretmez
printf("[3] %zu\n", strlen(p)); //5 
}

------------------

char str[100] = "seyfullah";
printf("%zu %zu\n", sizeof(str), strlen(str)); //100 9
printf("%zu %zu\n", sizeof str, strlen(str)); //100 9(aynı anlama gelir)
printf("%zu %zu\n", sizeof "mert", strlen("mert")); //5(dizinin boyutu) 4(yazının uzunluğu)

------------------

int main(void)
{
char str[100] = "murat";
str = '\0'; //boş yazı yapar
str[0] = '\0'; //boş yazı yapar
}

---------------

- *p[1] pointer dizisinin 1 indisli elemanının gösterdiği nesne
- p[1][2] pointer dizisinin 1 indisli elemanının gösterdiği dizinin 2 indisli elemanı

-------------

pointer söz konusu olmadığı sürece const önce veya sonra gelmesi arasında fark yoktur

int main()
{
const int a[5] = {12, 54,23,254,76};
int const a[5] = {12, 54,23,254,76};
}


-----------

int a = 1, b = 2, c = 4;

int main(void)
{
int * const p[3] = {&a, &b, &c}; //bu şekilde olunca dizinin elemanlarının değiştimek hata
p[2] = &ival; //syntax hatası
*p[2] = 456; //adrese atamama yapmak hata değil
}

-----------

int a = 1, b = 2, c = 4;

int main(void)
{
const int * const p[3] = {&a, &b, &c}; 
p[2] = &ival; //değer değiştirmek hata
*p[2] = 333; //adrese atamama yapmak hata}



--------------

!! const char * p[] = {} //look up table için bolca kulllanıcağız, dizinin elemanlaı değişebilir

!! const char * const p[] = {} //p'nin elemanlarına bir atama yapılamaz, p'nin gösterdiği nesneyi değiştiremeyiz

!! char * const p[] = {} //p'nin gösterdiği nesneyi değiştiremeyiz

---------------

// aşağıdaki şekilde implemente etmek gerekir

eğer statik yapmaz isek dizi tekrar oluştuğundan tekrar tekrar oluşturulacak o yüzden static yapmak gerekir

void func(void)
{
  static const char * const pdays[] = {
  "", //indeks ile sayma sayısının aynı olması için yapılır
  "pt",
  "sali",
  "carsamva", 
  "persembe",
  "cuma",
  "cumartesi",
  "pazar",
};
}

--------------------------------

pointer to pointer
------------------

int main(void)
{
int x = 10;
int * ptr = &x;
int ** p = &ptr; 
//*p  = ptr'ye erişilir, **p = *(*p) = x
//**p p'nin gösterdiği nesnenin gösterdiği nesnedir
}

----------------

int main(void)
{
int a[] = {10, 20, 30, 40, 50};
int * p = a;
int** ptr = &p;

++*p; //a dizisinin ilk elemanı 10, 1 artar
++* ptr; // ++p //dizinin 2. elemanın adresini gösterir

}

----------------

int main(void)
{
int x = 10;
int y = 45;
int * p1 = &x;
int * p2 = &y;

printf("%d %d\n", *p1, *p2); //10 45 çıkar

pswap(&p1, &p2);

printf("%d %d\n", *p1, *p2);
}

void pswap(int ** ptr1, int ** ptr2)
{
int *ptemp = *p1;
*ptr1 = *ptr2;
*ptr1 = ptemp;
}















