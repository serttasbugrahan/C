/////////////////////////////////////////////////////////////////////////1. Ders//////////////////////////////////////////////////////////////////

game.h
------
#include "card.h"

animation.h
-----------
#include "card.h"

bugra.c
-------
#include "game.h"  //card.h 2 kez include edilir
#include "animation.h"

#ifndef CARD_H
#define CARD_H
#endif  //bu yapı kullanılır

#pragma once //bunu da kullanabilirsin ama yukarıdakini tercih et

--------

#define kullanımları :

#define  SIZE  100

#define  SQUARE(a)  ((a) * (a))

#define  POKER

#define  public

==============================================

#undef //tanımını kaldırmaya yarar

#undef MAX
#define MAX 100 //senden önce başka tanımlamalar var ise bunları kaldırmaya yarar

================================================

#line 
//herhangi bir başlık dosyası include edilmediği zaman kullanılır
//hangi satırda kullanıldıysa o satırın kaynak numarası ile yer değiştirir


standart macrolar :
-null
-bool
-true
-RAND_MAX

predefined macro :
 __LINE__
 __DATE__
 __TIME__
 __FILE__
 __STDC__
__func__ //fonksiyonun ismini yazdırırır

x =  __LINE__;  //x = 60

int main(void)
{
printf("%s dosyasının %d. satiri\n", __FILE__ ,  __TIME__)
printf("compilation date %s\n", __DATE__)
printf("compilation time %s\n", __TIME__)
}

=============================================

#error //programı bitirir

#ifndef _cplusplus
#error THIS FİLE SHOULD BE ...
#ENDİF


============================================

başlık dosyaları :
nutility.h

#ifndef _NUTILITY_H
#define _NUTILITY_H

int isprime(int x); //fonksiyonlar bu aralığa eklenir ve nutility.c dosyasında kodu yazılır
int sumdigit(int x)

#endif

====================================================

switch statement :
------------------

!! switch kullanılan her yerde if deyimi kullanılabilinir 
!! swicth deyimi bazı durumlarda daha iyi optimizasyon sağlayabilir
!! daha iyi okunabilir hale getirmek için kullanılır

switch //kullanımı mecburi olan tek anahtar sözcük switch diğerleri zorunlu değil
 case
 default
 break

if (int_expr == 1){
}
else if (int_expr == 2){
}
else if (int_expr == 3){
}
else

-----

switch (x){ //switch parantezi içine sadece tam sayı türlerinden değerler yazılabilir
case 10:
case 2:
case x:
  statement;
case 3:
case 18:

}

---------

int main(void)
{
int weekday;

printf("haftanin kacıncı gunu: ");
scanf("%d", &weekday); //4

switch (weekday){
case 1: printf("pazaresi\n"); 
case 2: printf("sali\n");
case 3: printf("carsamba\n");
case 4: printf("persembe\n");
case 5: printf("cuma\n");
case 6: printf("cumartesi\n");
case 7: printf("pazar\n");
}
}
çıktı sonucu : persembe, cuma, cumartesi, pazar
 
---------------

int main(void)
{
int weekday;

printf("haftanin kacıncı gunu: ");
scanf("%d", &weekday); //4

switch (weekday){
case 1: printf("pazaresi\n"); break;
case 2: printf("sali\n"); break;
case 3: printf("carsamba\n"); break;
case 4: printf("persembe\n"); break;
case 5: printf("cuma\n"); break;
case 6: printf("cumartesi\n"); break;
case 7: printf("pazar\n"); break;
}
}
çıktı sonucu : persembe

---------------------
#define ADD_RECORD 11
int main(void)
{
int weekday;

printf("haftanin kacıncı gunu: ");
scanf("%d", &weekday); //3

switch (weekday){
case 3: 
case ADD_RECORD:
case 29: printf("3 11 ya da 29\n"); break;
case 1 + 4: 
case 7: 
case 16: printf("5 7 ya da 16\n"); break;
case 39: printf("39\n"); break;
}
}
çıktı sonucu : 3 11 ya da 29

!! her labeldan sonra statement olmalı

---------------

default : else if merdivenindeki

int main(void)
{
int weekday;

printf("haftanin kacıncı gunu: ");
scanf("%d", &weekday); //4

switch (weekday){
case 1: printf("pazaresi\n"); break;
case 2: printf("sali\n"); break;
case 3: printf("carsamba\n"); break;
case 4: printf("persembe\n"); break;
case 5: printf("cuma\n"); break;
case 6: printf("cumartesi\n"); break;
case 7: printf("pazar\n"); break;
default: printf("gecersiz gun");break;
}
}

//////////////////////////////////////////2.Ders///////////////////////////////////////////////////////

!! Uzun fonksiyonlardan kaçın ve bir fonksiyona birden fazla görev yüklemeyin.
!! gereksiz printf kullanma

!! karşılaştırma operatörünün ürettiği değer 1 veya 0 

örnek iyi bir kod 
-----------------

int is_perfect(int x)
{
int divsum = 0;

for (int i = 1; i <= x / 2; ++i){
if (x % i == 0)
divsum += i;
}
return divsum == x;
}

====================================================

switch (x){

case 1: dothis(); //fallthrouh (bunu böyle switchlerde alışkanlık hale getir)
case 2: dothat(); break;
}


==================================================

goto : bir nooktadan başka bir noktaya yönlendiren statment

jump statement

long jump // bunu yapmamız için standart kütüphane çağırmamız gerekir (setjmp(), longjmp())

f1 => f2 => f3 => f4

void f4()
{
if (?????)
}

near jump / local jump //c de aynı fonskiyonda goto kullanılır

rigidity flexibility
rigit code

!! clean code için 'SOLID' kavramına bak

label : 

int main()
{
out:
}

goto out;
//code
//code
//code

out:
 
=============================================================================0

type conversions :

implicit type conversitons : talimat vermeden kendisi otomatik dönüşüm yapar
 aritmatik dönüşümler
 atama/kopyalama dönüşümleri

explicit type conversion : böyle bir dönüşüm yap diye biz talimat veriririz
 type-cast (tür dönüştürme operatörü)

!! en büyük kod hataları tür dönüşümlerinden gerçekleşir
!! derleyici assembly kodunda yeni bir nesne oluşturarak tür dönüşümü işlemini yapar. değişkenin türü değişmez kendi oluşturğu nesneyi yerine koyar
!! tür dönüşümleri kalıcı değildir

----------------------------

!! hangi türe dönüşüm yapılacağı rank değerine göre belirlenir, her türün rank'i vardır buna göre belirlenir

long double --> double --> float

long long --> long --> int

short --> char --> _Bool

int main(void)
{
float f = 3.4;
int ival = 5;

auto x = f + ival; //işlem float türünde yapılır
}













