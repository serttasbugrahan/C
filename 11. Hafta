///////////////////////////////////////////////////////////////1. Ders///////////////////////////////////////////////
typecast : tür dönüştürme operandı

(int) //operand olan türü int'e dönüştürür

(int)x //x inte dönüşür

(int)(x + y) //x + y inte dönüşür

!! değişkenin türü void olamaz //void x
!! void türden bir ifade olabilir

int main(void)
{
int x = 19;
(void)(x + 5)

}

!! c dilinde lojik ifade beklenen yerlerde void kullanılamaz

void foo(int);
int main(void)
{
int x = 19;
if (foo(x)) //hata verir
}

int main(void)
{
(void)isprime(x) //bir fonksiyonun geri dönüş değerini kullanmak istemediğimiz zaman bunu yaparız
(void)scanf("%d", &x);
(void)getchar(); //bu ifadeyi kullanmıycağımız anlamına gelir
}

==============================================================

srand
rand

random number generation (rastgele sayı üretimi) : 

-test kodlarında
-oyun programlarında
-genetik algorith
-yapay zeka 
-olasılık hesaplamada 
... kullanılır

true(ly) random number generation : doğadan kaynaklı rastgele üretim
pseudo (sözde) random number generation : algoritmik bir şekilde üretilir

mersenne-twister algoritması : en popular rastgele sayı üretme algoritması

trival : sıradan işlemlere denir

<stdlib.h>

exit
atexit
abort

atoi

rand
srand

malloc
calloc
realoc
free


int rand(void) //default tohum değeri üretilicek ise
void srand(unsigned int); //belirli bir tohum değeri kullanarak üretilir

int main(void)
{
for (int i = 0; i < 100; i++){
printf("%d ", rand()); //2. çalıştırlmasında aynı tohum değerinde dolayı aynı sayılar rastgele üretilir
}
}

!! program her çalıştırıldığı zaman farklı bir sayı dizisi oluşturmanın 2 yolu var

-srand'e farklı bir tohum değeri verirsek

-srand'e program her çalıştığındaki zamanı verebiliriz

#deifne randomize() (srand((unsigned)time(0)))

int main(void)
{
randomize();
}

----
 
void put_randım_letter(void) //rastgele harf üretir
{
putchar('a' + rand() % 26);
}
int main(void)
{
for (int i = 0; i < 1000; ++i){
put_random_letter();
}
}

-----

#define  N  100000
#define  HEADS  1


int main(void) //yazı tura olasılığı
{
int heads_count = 0 ;
for (int i = 0; i< N; ++i){
if (rand() % 2 == HEADS)
++heads_count;
}
printf("olasilik = %f\n", (double)heads_count / N);
}
-------

!! üretimde en çok kullanılan rastgele sayı üretme algoritması mercenne twister

///////////////////////////////2. DERS///////////////////////////////////Ü

arrays (diziler) : 
-------------------

data structure (veri yapısı) : veriler bellekte nasıl bir düzende tutulduğunu gösteririr

!! veriler bellekte aralarında boşluk olmadan art arda tutulur (complexity of algorithm)

(computationa) complexity of algorithm

================================

benchmarking : birden fazla algoritmanın karşılaştırılması ve en hızlının seçilmesine denir
bencmarker : bu işleme yapana denir

veri yapısındaki öğe sayısı ile yapılcak işlemlerin artış ilişkisi :

constant time algorithm : öğe sayısı arttıkça işlem sayısı artmaz
linear complexity : veri sayısı arttıkça işlemde artıcaktır

big O notation : algoritmanın karmaşıklığını anlatmak için söylenir
Big O(1) : constant(sabit) time
Big O(n) : linear complexity
Big O(n log n) : linearitmic 
Big O(n2) : quadretic complexity
Big O(n3) : cubic complexity

örnek : liste içinde aradığımızın bulunması : Big O(n) algoritması
örnek : binary search : Big O(n log n)

!! karmaşıklığı en büyük olan stepin karmaşıklığı ne ise algortimanın karmaşıklığı 

!! int, double vs. = data type
!! link list, dynamic array vs. = data structure

===========================================

Dinamik dizi veri yapısında 
 indeks ile erişim O(1)
 sondan ekleme
 sondan silme

 değerle erişim O(n)
 sondan olmayan ekleme ve silme O(n)

C dilinde dizilerin tanımlanması :

int main(void)
{
int a[100]; 
}

!! ayrılan bellek için boyutu negatif veya 0 olamaz
!! dizi tanımlalamalrında dizi boyutu belirten ifadeler (normal olarak) constant expression olmalı
eğer boyut belirten ifade constant expression değil ise syntax hatası
!! boyut belirten ifadelerin tam sayı olması gerekir gerçek sayı olmaz
!! dizi boyutu ifadesi 0 veya negatif bir ifade olamaz
!! dizilerde scope, ömür, gibi kavramlar gerçekleşir
!! C dilinde diziler assignable(atanabilir) varlıklar değildir

int main(void)
{
int a[10];
int b[10];
a = b; //böyle yazılamaz, array decay kuralı ile igilidir
}

array decay : bir dizinin ismin bir ifade (expression) içinde kullandığızda derleyici
dizi ismini dizinn ilk elemanının adresine dönüştürme işlemine denir



























