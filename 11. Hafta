///////////////////////////////////////////////////////////////1. Ders///////////////////////////////////////////////
typecast : tür dönüştürme operandı

(int) //operand olan türü int'e dönüştürür

(int)x //x inte dönüşür

(int)(x + y) //x + y inte dönüşür

!! değişkenin türü void olamaz //void x
!! void türden bir ifade olabilir

int main(void)
{
int x = 19;
(void)(x + 5)

}

!! c dilinde lojik ifade beklenen yerlerde void kullanılamaz

void foo(int);
int main(void)
{
int x = 19;
if (foo(x)) //hata verir
}

int main(void)
{
(void)isprime(x) //bir fonksiyonun geri dönüş değerini kullanmak istemediğimiz zaman bunu yaparız
(void)scanf("%d", &x);
(void)getchar(); //bu ifadeyi kullanmıycağımız anlamına gelir
}

==============================================================

srand
rand

random number generation (rastgele sayı üretimi) : 

-test kodlarında
-oyun programlarında
-genetik algorith
-yapay zeka 
-olasılık hesaplamada 
... kullanılır

true(ly) random number generation : doğadan kaynaklı rastgele üretim
pseudo (sözde) random number generation : algoritmik bir şekilde üretilir

mersenne-twister algoritması : en popular rastgele sayı üretme algoritması

trival : sıradan işlemlere denir

<stdlib.h>

exit
atexit
abort

atoi

rand
srand

malloc
calloc
realoc
free


int rand(void) //default tohum değeri üretilicek ise
void srand(unsigned int); //belirli bir tohum değeri kullanarak üretilir

int main(void)
{
for (int i = 0; i < 100; i++){
printf("%d ", rand()); //2. çalıştırlmasında aynı tohum değerinde dolayı aynı sayılar rastgele üretilir
}
}

!! program her çalıştırıldığı zaman farklı bir sayı dizisi oluşturmanın 2 yolu var

-srand'e farklı bir tohum değeri verirsek

-srand'e program her çalıştığındaki zamanı verebiliriz

#deifne randomize() (srand((unsigned)time(0)))

int main(void)
{
randomize();
}

----
 
void put_randım_letter(void) //rastgele harf üretir
{
putchar('a' + rand() % 26);
}
int main(void)
{
for (int i = 0; i < 1000; ++i){
put_random_letter();
}
}

-----

#define  N  100000
#define  HEADS  1


int main(void) //yazı tura olasılığı
{
int heads_count = 0 ;
for (int i = 0; i< N; ++i){
if (rand() % 2 == HEADS)
++heads_count;
}
printf("olasilik = %f\n", (double)heads_count / N);
}
-------

!! üretimde en çok kullanılan rastgele sayı üretme algoritması mercenne twister

///////////////////////////////2. DERS///////////////////////////////////Ü

arrays (diziler) : 
-------------------

data structure (veri yapısı) : veriler bellekte nasıl bir düzende tutulduğunu gösteririr

!! veriler bellekte aralarında boşluk olmadan art arda tutulur (complexity of algorithm)

(computationa) complexity of algorithm

================================

benchmarking : birden fazla algoritmanın karşılaştırılması ve en hızlının seçilmesine denir
bencmarker : bu işleme yapana denir

veri yapısındaki öğe sayısı ile yapılcak işlemlerin artış ilişkisi :

constant time algorithm : öğe sayısı arttıkça işlem sayısı artmaz
linear complexity : veri sayısı arttıkça işlemde artıcaktır

big O notation : algoritmanın karmaşıklığını anlatmak için söylenir
Big O(1) : constant(sabit) time
Big O(n) : linear complexity
Big O(n log n) : linearitmic 
Big O(n2) : quadretic complexity
Big O(n3) : cubic complexity

örnek : liste içinde aradığımızın bulunması : Big O(n) algoritması
örnek : binary search : Big O(n log n)

!! karmaşıklığı en büyük olan stepin karmaşıklığı ne ise algortimanın karmaşıklığı 

!! int, double vs. = data type
!! link list, dynamic array vs. = data structure

===========================================

Dinamik dizi veri yapısında 
 indeks ile erişim O(1)
 sondan ekleme
 sondan silme

 değerle erişim O(n)
 sondan olmayan ekleme ve silme O(n)

C dilinde dizilerin tanımlanması :

int main(void)
{
int a[100]; 
}

!! ayrılan bellek için boyutu negatif veya 0 olamaz
!! dizi tanımlamalarında dizi boyutu belirten ifadeler (normal olarak) constant expression olmalı
eğer boyut belirten ifade constant expression değil ise syntax hatası
!! boyut belirten ifadelerin tam sayı olması gerekir gerçek sayı olmaz
!! dizi boyutu ifadesi 0 veya negatif bir ifade olamaz
!! dizilerde scope, ömür, gibi kavramlar gerçekleşir
!! C dilinde diziler assignable(atanabilir) varlıklar değildir

int main(void)
{
int a[10];
int b[10];
a = b; //böyle yazılamaz, array decay kuralı ile igilidir
}

array decay : bir dizinin ismin bir ifade (expression) içinde kullandığızda derleyici
dizi ismini dizinn ilk elemanının adresine dönüştürme işlemine denir

!! fonksiyonların parametre değişkenleri dizi türlerinden olamaz
void func (int a[10])

!! fonksiyonların geri dönüş değeri türü dizi türü olamaz

int main(void)
{
int a[10];
}

!! k.p opeartörünün operandı olan ifadenin geçerli bir indek olmasından biz sorumluyuz
!! 0 dan küçük ise ya da dizinin boyutundan >= ise o ifade tanımsız davranış (runtime'a yönelik hata) olur 

int main(void){
int a[10];

for (int i = 0; i < 10; ++i){
scanf("%d", &a[i])
}

-----------------

dizilere ilk değer verme :

eğer ilk değer verilmez ise static ömürlü ise zero ile hayata başlar

int main(void)
{
int a[10] = {2, 5, 7, 23, 90, 6, 4, 13, 22, 80}; //ilk değer verme
int a[10] = {2, 5, 7}; //geri kalan değerler 0 ile hayata başlar
int a[10] = {0}; //0 değerleri hepsine atanır
int a[] = {0,1,2,3,4}; //dizinin boyutunu ilk değer verince kendisi anlar
}

designated initializer: dizinin istediğimiz elemanlarına ilk değer vermemizi sağlar
int main(void)
{
int x = 56;
int a[20] = {
[5] = 113,
[9] = 222,
-7, //dizinin 10. elemanı -7 olur
[12] = 50,
[15] = 14,
};

!! designated initializer kullandıysak ve diznin boyutu söylenmedi ise en yüksek elemanın 1 fazlası olur

int main(void){
int a[3] = {1, 4, 5, }; //trailing command, syntax hatası değildir
int a[0] = {1, 4, 5, }; //trailing comman, syntax hatası değildir
}


=======================================

sizeof operatörü :

sizeof ==> keyword
sizeof ==> compile-time opearatörü

size_t 
time_t
clock_t
ptrdiff_t
fpos_t
int32_t
uint8_t

type alias (tür eş ismi)

int main(void)
{
size_t x = 5; //size_t dilin seçtiği herhangi bir tür olur
}

int main(void)
{
s x = 5; //size_t dilin seçtiği herhangi bir tür olur
}

!! operatörleri kullanabilmek için herhangi bir kütüphane eklememize gerek yoktur
fonksiyonları eklerken kütüphane eklememiz gerekir

int main(void)
{
int x = 10;
int a[sizeof x]; //sabit ifadesi olduğu için synatx hatası olmaz
}

!! sizeof(int) //buradaki parantez öncelik parantezi değildir koyulması zorunludur

!! sizeof operatörün opearandı void olmayan bir türden ifade olabilir

int main(void)
{
int x = 5;
printf("%zu\n", sizeof x); //x'in türü int int türünün sizeof'u 4 ,compile time'da belli olur
printf("%zu\n", sizeof (x * 2.3)); //türü double sizeof cevap = 8 ,compile time'da belli olur
}

 





