////////////////////////////////////////////////////1. Ders////////////////////////////////////////////////////

functions pointers devam...


------------------------

fonksiyon çağırtma 

standart qsort fonskiyonu : functions pointer parametreli fonksiyon

--------------------------

<stdlib.h>

void qsort(void *vpa, size_t size, size_t sz, int (*fp)(const void *, const void*));

dizinin adresi - sıralanıcak dizinin boyutu - dizinin 1 elemanının sizeof - fonksiyon

int mycmp(const void* vp1, const void* vp2)
{
  int x = *(const int*)vp1; //const int * 'a dönüşütürülüp o adrese erişilir burada
  int y = *(const int*)vp2;
  
  int result = x % 2 != 0 && y % 2 == 0 || (x % 2 == y % 2) && x > y 

  //return *(const int*)vp1 - *(const int*)vp2; // bu şekilde taşma olabilirdi
}

int mycmp(const void*vp1, const void*vp2);
{
if (*(const int*)vp1) > (*(const int*)vp2){
return 1;
}

if (*(const int*)vp1) <  (*(const int*)vp2){
return -1;
}
return 0;
}

int main(void)
{
int a[SIZE];
qsort(a, SIZE, sizeof(int),mycmp);

}

!! qsort fonksiyonu sizin adresini gönderdiğiniz fonksiyonu 
sizin adresini gönderdiğiniz dizinin elemanlarının adresleriyle çağırır


--------------------------------------------

!! p + k * sz: dizinin k indisli elemanının adresi

generic bir bubble sort fonksiyonu : 
------------------------------------

qsort ile aynı parametrik yapıda ismi 
gbsort olan bir fonksiyon tanımlayınız tanımladığınız fonksiyonu farklı türden diziler ile
ve farklı karşılaştırma kriterleri ile test ediniz

void g_bubble_sort(void * vpa, size_t size, size_t sz, int (*fp)(const void *, const void *))
{
char * p = (char *)vpa;
for (size_t i = 0; i < size - 1; ++i){
for (size_t k = 0; k < size - 1 - i; ++k){
if (fp(p + k * sz, p + (k + 1) * sz) > 0){
gswap(p + k * sz, p + (k + 1) * sz, sz);
}
// fp nin gösterdiği fonksiyonu dizinin k ve k + 1 indisli elemanlarının adresleriyle çağır
// eger fonksiyon pozitif deger döndürürse dizinin k ve k + 1 indisli elemanlarını takas et
}
}
}

int main(void)
{
int a[SIZE];

randomize();
set_array_random(a, SIZE, sizeof(int), mycmp);
print_array(a, SIZE);
}

--------------

int dcmp(const void* vp1, const void* vp2)
{
double x = *(const double*)vp1;
double y = *(const double*)vp2;

return x > y ? 1 :
x < y ? -1 : 0;
}

int  main(void)
{
double ar[] = {34,56,7,8,90,9.8,7656,4,55,678,9,88,77,34,65,7}
g_bubble_sort(ar, asize(ar), sizeof * ar, dcmp);

for (size_t i = 0; i < asize(ar), sizeof * ar, dcmp);
printf("%f\n", ar[i]);
}

--------------------------------

bsearch : sıralanmış bir dizide arama yapar
--------

void *bsearch(const void *vpkey, const void *vpa, size_t size, size_t sz, int (*)(const void *, const void *))

int main(void)
{
int ar[SIZE];

randomize();
set_array_random(ar, SIZE);

g_bubble_sort(ar, SIZE, sizeof(int), cmp_int);
print_array(ar, SIZE);

int ival;
printf("aranacak deger: ");
(void)scanf("%d", &ival);
int * p = (int *)bsearch(&ival, ar, SIZE, sizeof, cmp_int)

if (p){
printf("bulundu dizinin %d indisli elemani\n", p - ar);
}
else{
printf("bulunamadi\n");
}
}

--------------------

bir fonksiyonun geri dönüş değeride adres olabilir

int bar(int x)
{
return x * x + 1;
}

int(*foo())(int)
{
return &bar;
}
2
int main(void)
{
int x = foo()(10);
}

//yukarıdaki anlaşılması zor bir kod, typedef kullanılabilr

typedef int (*FUNC)(int)
int bar(int x)
{
return x * x + 1;
}

FUNC foo()
{
return &bar;
}

int main(void)
{
int x = foo()(10);
printf("x = %d\n", x);

/*
// bu şekide de olabilirdi

= foo()
int x = fptr(20);

printf("x = %d\n", x);
*/
}


==================================================

function pointer arrays :

haftanın ayrı günlerinde farklı görevler var ise bunu şu şekilde yaparız (jump table) :
- anahtarı indekse dönüştür indekste bir fonksiyon adresi elde et. o adresteki fonksiyonu çağır.

haftanın farklı günlerinde yapılacak işleri farklı fonksiyolar olarak tanımlarız. bir pointer dizisinde bunların adreslerini tutarız
ve bu fonksiyona bir index gönderip o indeksi dizi elemanı olan fonksiyon pointerının gösterdiği fonksiyonu çağırırız

------

int f1(int);
int f2(int);
int f3(int);
int f4(int);
int f5(int);

int main(void)
{
int (*fptr)(int)) = &f1;

int (*fa[5])(int); //bu şekilde gösterilir
int (*fa[5])(int) = {f1, f2, f3,f4,f5}; //diziye bu şekilde ilk değer verilebilir
int (*fa[])(int) = {&f1, &f2, &f3,&f4,&f5} //anlam farklılığı olmaz
asize(fa) // 5

int (*fp)(int);
int (**fptr)(int) = &fp; //dizinin ilk elemanın adresi, fp'nin adresini fonksiyon pointerda tutulması
*fptr = fp //fptr diref edersel fp'yi elde ederiz

int (*fa[](int) = {f1, f2, f3, f4, f5}; //geri gönüş değeri, fonksiyon ismi, fonksiyon değerlerinin türü
int (**fptr)(int) = fa; //dizinin ilk elemanının adresi
int (**fptr)(int) = &fa[0] //aynı anlama gelir

}

------
// bunun yerine typedef kullanabiliriz

typedef int (*FPTR)(int); //kolay yol

int main(void)
{
FPTR fa[] = {f1,f2,f3,f4,f5};
FPTR * p = fa;
}

-------------------------------

void f1(int x)
{
printf("f1 cagrildi %d\n", x);

}

void f2(int x)
{
printf("f2 cagrildi %d\n", x);

}

void f3(int x)
{
printf("f3 cagrildi %d\n", x);

}

void f4(int x)
{
printf("f4 cagrildi %d\n", x);

}

void f5(int x)
{
printf("f5 cagrildi %d\n", x);

}

typedef void (*FUNCPTR)(int); //geri dönüş değeri olmayan int değişken alan parametre

int main(void)
{
FUNCPTR fa[] = {&f1,&f2,&f3,&f4,&f5};
for (size_t i = 0; i < asize(fa); ++i){
fa[i](i); //sırayla fonksiyonları yazdırır
}
}


-----------------

void func(int dayno)
{
void (*fpa[7])(void);
//
fpa[dayno]();
}

------------------

standart karakter test fonksiyonlarının isimleriyle (standart giriş akımından alınıcak) 
çağrılabileceği bir kod yapısı oluşturun


typedef int (*FPTEST)(int);

const FPTEST fa[] = {isupper, islower, isalpha, isdigit, isalnum, isxdigit, ispunct, isspace, isblank, isprint, isgraph,iscntrl}; //buradaki const dizinin elemanlarının değeri değişmiycek anlamında kullanılır
const char * const func_names[] = {"isupper", "islower", "isalpha", "isdigit", "isalnum", "isxdigit", "ispunct", "isspace", "isblank", "isprint", "isgraph","iscntrl"};

int main(void)
{
char fname_input(SIZE];
int ch;

printf("karakteri girin: ");
ch = getchar
printf("hangi test fonksiyonu çağrılsn: ");
(void)scanf("%s", fname_input); 

//aşağıddaki kod ayrı bir fonksiyon yapılmalı

size_t i;
for (i = 0; i z asize(func_name) && strcmp(func_names[i], fname_input); ++i)
;

if (i == asize(func_names)){
printf("kusura bakmayın %s isimli bir std. test fonksiyonu yok",fname_input);
return 0;
}
if(fa[i](ch)){
printf("%c karakteri icin %s testi ok\n", ch ,fname_input);
}else{
printf("%c karakteri icin %s testi not ok\n", ch ,fname_input);
}
}

!! mantıksal ilişki içindeki fonksiyonlarla ilgili işlemler yapmak isteniyorsa mantıksal ilişki
içindeki fonksiyonları adreslerini function array'de tutulmalı



--------------------------------------
kütüphanelerde kullanılan bir örüntü 

//func'ın default davranışı foo çağırmak
1. tema:

--
bugra.h

typedef void (*FPTR)(void);
//func'ın default davranışı foo işlevini cagirmak

void func(void);
FPTR set_func(FPTR); //default davranışı değiştirmek için kullanılır
--

--
bugra.c

void bar(void)
int main(void)
{
func(); //foo işlevi çağrılıcak
FPTR f = set_func(&bar);
set_func(&bar);
func(); //func default olarak foo çağırırırdı artık bar fonksiyonunu çağırıcak
set_func(f);
func(); //foo işlevi cagirilicak
}
--

--------------------

--
bugra.c

FPTR gfptr = &foo;

void func(void)
{
    gfptr();
}

void foo(void)
{
    printf("foo cagrildi\n");
}

void bar(void)
{
    printf("bar cagrildi\n");
}

FPTR set_func(FPTR f)
{
    FPTR fptemp = gfptr;
    gfptr = f;
    return fptemp;
}

--

--
bugra.h

typedef void (*FPTR)(void);

void func(void);
void foo(void);
void bar(void);

FPTR set_func(FPTR);

--
main.c

int main(void)
{
    func();
    FPTR f = set_func(&bar);
    func();
    set_func(f);
    func();
}
-------------------------------------
2. tema:
 
bugra.h

typedef void (*FPTR)(void);
//func çağrıldığında daha önce f_record işleviyle kayıda alınmış fonksiyonlar
//a) kayıt sırasıyla aynı sırada
//b) kayıt sırasıyla ters sırada 
//cagiricak

void func(void);
void f_record(FPTR);

main.c

void f1(void)
{
printf("f1 called\n");
}

void f2(void)
{
printf("f2 called\n");
}

void f3(void)
{
printf("f3 called\n");
}

void f4(void)
{
printf("f4 called\n");
}

int main(void)
{
f_record(f2);
f_record(f4);
f_record(f3);
f_record(f1);

func();
}

bugra.c

static FPTR gfa[]
static int g_idx = 0;

void func(void)
{
for (int i = 0; i < g_idx; ++i){
g_fa[i]();
}
}

void f_record(FPTR f)
{
if (g_idx == AR_SIZE)
return;
g_fa[g_idx] = f;
}

=================================================================

multi-dimesional arrays (çok boyutlu diziler) :

idizinin boyutu ilk elemanıdır a[10][29] //boyutu 10

!! çok boyutlu diziler elemanları dizi olan dizilerdir
!! dizinin elemanı bir dizilerdir

typedef int ar20[20];

int main(void)
{
//int a[10][20];
ar20 a[10];
}

----------------

int main()
{
int a[10][20];

int* p = a; //hata pointer türü ile dizi boyutları türü aynı olmalıdır, bu şekilde yapıınca a + 1 diiznin 4 byte sonraki elemanı gösterirr

int(*tr)[4] = a; //bu şekilde olur
}

----------------

int main(void)
{
int a[10][20];

printf("sizof(a) = %zu\n", sizeof(a)); //10* 20 *4
printf("sizof(a[0]) = %zu\n", sizeof(a)); //20 *4
printf("sizof(a[0][0]) = %zu\n", sizeof(a)); //4
}

---------

int main(void)
{
int a[10][4];

for (int i = 0; i < 10; ++i){
printf("%p %p\n", a + i, &a[i]); //aynı anlama gelir
}
}

------------

int main(void)
{
int a[10][20];
//matrisin 200 tane tam sayısından her biri
a dizisinin elemanlarının elemanları 
}

-----------

tür uyuşmazlığı kontorlü

int main(void)
{
int a[10][20];
int *p = a //error
int * p1 = &a[0][0] //legal
int * p2 = a[0]; //legal, array decay a[10] a ile gösterilebilinir

//p a dizisinin ilk elemanının ilk elemanını göstermesinin yolları
int * p;
p = &a[0][0];
p = a[0]; //array decay
p = (int *)a;
}


-----------
//değer verme

int main(void)
{
int a[5][3] = {
{1,1,1},
{2,2,2}
{3,3,3}
{4,4,4}
}; 

---------------
//sıralama

for (int i = 0; i < 5 i++){
for (int k = 0; i < 3 k++){
printf("%d", a[i][k];
}
printf("\n");
}

--------------
bu şekilde ilk değer verilebinir 

int main(void)
{
int a[100] = {
[3] = 7,
[12] = 8,
[4] = 77,
[68] = 98,
};

}

----------

int main(void)
{
int a[5][6] = {
[2] = {1,1,1,1,1,1),
[1] = {[3] = 7, [1] = 9, [0] = 6},
[3] = {[4] = 8}
};

------------

////////////////////////////////////////////////////////2. Ders/////////////////////////////////////////////////////


int main(void){
double a[10][32];
//a[0] --> double[32]
double * p = a[0]; //array decay

int *  ptr = a; //hata olur, tür uyuşmazlığı. &a[0]
double (*p)[32] = a; //bu şekilde gösterilir

for (int i = 0; i < 10; ++i){
printf("%p %p %p\n", &a[0], a + i, p++); //hepsi aynı adresi verir
}
}

----------------------

int main()
{
double a[10][32];

for (int i = 0; i < 10; ++i) {
printf("%p %p\n, a + 1,  &a[0]); //aynı anlamda
}
}

-------------------------

int main()
{
double a[10][32];

double(*p)[32] = a;

for (int i = 0; i < 10; ++i) {
printf("%p %p %p\n",  &a[0] ,a + 1,  p++); //aynı adresler yaz
}
}

----------------------------------------

int main(void)
{
int a[4][3] = {
{1,1,1},
{2,1,12},
{5,6,4},
{0,4,3},
}

int(*p)[3] = a;

for (int i = 0; i < 4; ++i){

print_array(a[i],3); // dizinin elemanlarını yazar
print_array(&a[i][0],3); // dizinin elemanlarını yazar
print_array(*p, 3); //dizinin elemanlarını yazdırır
print_array(*p++, 3); //dizinin elemanlarını yazdırır
print_array(*p++, 3); //dizinin elemanlarını yazdırır
print_array(&(*p)[0], 3); ++p; //dizinin elemanlarını yazdırır

}
}

--------------

int main(void)
{
int a[4][3] = {
{1,1,1},
{2,1,12},
{5,6,4},
{0,4,3},
}

for (int i = 0; i < 4; ++i){ // i < asize(a)
for (int k = 0; k < 3; ++k){ // k < asize(a[0])
printf("%d", a[i][k]);
}
printf("\n");
}

------------

int main(void)
{
int a[][] = {1,5,7,2,3,6,1,4,7,8,3,5,2}; //error, 2. parantez dolu olmalı
int a[][4] = {1,5,7,2,3,6,1,4,7,8,3,5,2}; //legal
int a[4][] = {1,5,7,2,3,6,1,4,7,8,3,5,2}; //error 2. paratez dolu olmalı

}


------------

int main(void)
{
int grades[20][12][30]; // 20 okuldakiş 12 sınıfın 30 öğrencisin nnotlarını tutabilriz

}

------------

int main(void)
{
int* a[5][10];
int* b[10];
}

------------

int a[10];
int (*foo())[10]
{
return &a; //int (*)[10]
}

int main(void)
{

}

----------
//tür eş ismi ile yazma

int a[10];
typedef int inta10[10];
inta10 * foo()
{
return &a; //int (*)[10]
}

int main(void)
{

}

-----------

int a[10];

typedef int(*myptr)[10];

myptr foo()
{
return &a;
}

-------------

int main(void)
{
int a[10] = { 0 };

int* p = a; //bu şekilde ilk adrese erişiriz

//&a ile ilk değer vermek istiyorsak aşağıdaki şekilde olur
int * ptr = &a; //bu şekilde olmaz
int (*ptr)[10] = &a;
}

--------

!!! burası önemli

int main(void)
{

int a[10];
int * p = a; 
*p //a dizinin ilk elemanına erişir

int (*ptr)[10] = &a
*ptr //a dizisinin kendisine erişilir

int * p = *ptr;
*p //dizinin ilk elemanın adresine dönüşür 
}


-----------

int main(void)
{
int a[4][5] = {
{1,1,1,1,1},
{2,3,4,6,9},
{4,9,6,2,4},
{7,9,6,1,8},
};

//soru a dizisinin ilk elemanı olan  ilk elemanının adresini bir pointer değişkende tutun  
//3 yolla'da yapılabilir

int * p = &a[0][0];
int * p2 = a[0]; 
int * p3 = (int*)a;

int n = 4 * 5;

while (n--) {
printf("%d ", *p++);

}
}

-------------------

//eğer dizi tek elemanlı olsaydı  aşağıdaki şekilde olurdu

int main(void)
{
int a[4]

set_ar(a, 4); //bu şekilde de olur
set_ar(&a[0], 4); //bu şekilde de
}

!! çok boyutlu dizi fonksiyona nasıl geçirilir :

----------------

int main()
{
int a[4][5];

int(*p1)[5] = a;
int(*p2)[5] = a;

set_ar(a, 4);
set_ar(&a[0], 4)
}


----------------

void set_ar(int(*p)[5], int size)  //bu şekildede yazılabilir
{
for (int i = 0; i < size; ++i){
for(int k = 0; k < size; ++k){
p[i][k] = rand() % 10;
}
}

---

void set_ar(int(*p)[5], int size) //bu şekildede yazılabilir
{
while(size--){
for (int i = 0; i < 5; ++i)
(*p)[i] = rand() % 10;
++p;
}
}

---

void set_ar(int(*p)[5], int size) //bu şekildede yazılabilir
{
for (int i = 0; i < size; ++i){
set_array_random(p[i], 5);
}
}


-----

//dizi çok elemanlı olunca aşağıdaki şekilde olur


void set_ar(const int(*p)[5], int size)
{
for (int i = 0; i < size; ++i){
for (int k = 0; k < 5; ++k){
printf("%d ", p[i][k]);
}
printf("\n");
}
}

int main(void)
{
int a[4][5];
int a[20][5];

randomize();
set_ar(a,4);
}

------------------------

//çok sayıda aynı fonksiynu yazdırmak yerine bu yöntem kullanılabilinir
// ön işlemciye bu işleri yaptırmak 
// senior mülakat sorusu
//template için güzel bir alternatrif
//## ne paraöetre geçersek onu kabul eder

void f1(int(*p)[5], int size); // bu şekilde 4 tane fonskiyon yazmdan aşağıdaki şekilde yapılabilir
void f2(int(*p)[8], int size);
void f3(int(*p)[4], int size);
void f4(int(*p)[6], int size);

#define create_set_matrix_func(n)  void set_matrix_##n(int(*p)[n], int size  )
                                      { \
                                          for (int i = 0; i < size; ++i){ \
                                          for (int k = 0; k < 5; ++k){ \
                                          p[i][k = rand() % 10; \
                                      } \
create_set_matrix_func(5)
create_set_matrix_func(8) //normalde birden fazla kullanılması hata verir (##n) kullanmak gerekir
create_set_matrix_func(4)
create_set_matrix_func(6)

int main(void)
{
int a[4][5];
int b[20][8];
int c[8][4];
int d[10][6];

set_matrix_4(a, 4);
set_matrix_8(b, 20);
set_matrix_4(c, 8);
set_matrix_6(d, 10);
 
}

--------------------------

// tek bir fonksiyon ile bu işlemleri yaptırmak

void set_matrix(int * p, int row, int col);
{
for (int i = 0; i < row; ++i){
for (int k = 0; k < col; ++k){
p[i * col + k] = rand() % 10;
}
}
}

void printf_matrix(const int * p, int row, int col);
{
for (int i = 0; i < row; ++i){
for (int k = 0; k < col; ++k){
printf("%d", p[i * col + k]);
}
printf("\n");
}
printf("\n\n");
}


int main(void)
{
int a[4][5];
int b[20][8];
int c[8][4];
int d[10][6];

randomize();

set_matrix(&a[0][0], 4, 5); // 3 şekilde çağrılır
set_matrix(a[0], 4, 5); //a demek sentax hataso
set_matrix((int *)a, 4, 5);
printf_matrix(a[0], 10, 20);
}

---------------------------------------
klasik matris kullanımı dışında bir kullanımı daha vardır, dizinin elemanlarının yazı tutması

int main(void)
{
char names[10][20];
char* p[10]; //böyle bir dizi adreslerini tutabilir
}


!! char * p =   "bugra" //tanımsız davranış
!! char p[20] = "bugra" //tanımsız davranış değil


-----------

int main(void) 
{
char names[][20] = {
"bugra", "begum", "ali","veli","deniz","efe","oya",
"oya", "begum", "merve","veli","deniz","mahmut","oya",
"bugra", "mert", "ali","veli","ece","mustafa","oya",
"buse", "begum", "rıza","dila","deniz","suat","oya",
}

for (size_t i = 0; i < asize(names); ++i){ //bu işlemi fonksiyona yazdırma
printf("%s ",names[i]);
}


--------------

void print_names(const char(*p)[20], size_t size)
{
for (size_t i = 0; i < asize(names); ++i){
printf("%s ",p[i]);
}

int main(void)
{
char names[][20] = {
"bugra", "begum", "ali","veli","deniz","efe","oya",
"oya", "begum", "merve","veli","deniz","mahmut","oya",
"bugra", "mert", "ali","veli","ece","mustafa","oya",
"buse", "begum", "rıza","dila","deniz","suat","oya",
}

printf_names(names, asize(names));
}

------------------
//dizinin elemanlarını değiştirme

void swap_names(char * p1, char * p2)
{
char temp[20];
strcpy(temp, p1);
strcpy(p1, p2);
strcpy(p2, temp);
}

int main(void)
{
char s1[100] = "alican";
char s2[100] = "burhanettin";

printf("%s %s\n", s1,s2);
swap_names(s1,s2);
printf("%s %s\n", s1,s2);
}

----------------
//dizinin elemanlarını alfabatik sıraya göre sıralama

int main(void)
{
char names[][20] = {...}
print_names(names, asize(names));

for (size_t i = 0; i < asize(names) - 1; ++i){
for (size_t k = 0; k < asize(names) - 1 - i; ++k){
if (strcmp(names[k], names[k + 1]) > 0){
swap_names(names[k], names[k + 1]);
}
}
}
print_names(names, asize(names));
}

--------------
fonksiyon ile yazma:

void sort_names(char(*p)[20], size)
{
for (size_t i = 0; i < size - 1; ++i){
for (size_t k = 0; k < size - 1 - i; ++k){
if (strcmp(p[k], p[k + 1]) > 0){
swap_names(p[k], p[k + 1]);
}
}
}
}

int main(void)
{
char names[][20] = {};
sort_names(names, asize(names));
}

------------------
!! aşağıdakiler aynı anlamdadır

void foo(int * p);
void foo(int p[]);

void bar(int ** p);
void bar(int * p[]);

void baz(int (*p)[10]);
void baz(int p[][10]);

void func(int (*p)(int));
void func(int (int));

========================================================================

string.h fonksiyonlarına devam...

char * strncpy(char *pdest, const char *psource, size_t n); //kaç karakterle işlem yapılacağına göre işlem değişir
char * strncat(char *pdest, const char * psource,size_t n); //kaç karakterle işlem yapılacağına göre işlem değişir
int * strnncat(char *pdest, const char * psource,size_t n); //kaç karakterle işlem yapılacağına göre işlem değişir

-------------------
strncpy:

int main(void)
{
char str[SIZE] = "necati";
char s[SIZE];
size_t n;

printf("kac karakter: ");
scanf("%zu", &n);

strncpy(s, str, n);
s[n] = '\0';

//strncpy(s, str, n)[n] = '\0'; bu şekildede yazılabilinir
 
puts(s);
}

------------
strncat:

int main(void)
{
char str[SIZE] = "123456789";
char s[SIZE] = "OSMAN";

size_t n;
printf("kac karakter: ");
scanf("%zu",&n);

strncat(s ,str,n);
pust(s);
}

------------
strncmp: 

int main(void)
{
char s1[SIZE] = "erhan akpınar";
char s2[SIZE] = "batuhan demir";

if (!strncmp(s1 + 2, s2 + 4)){
printf("evet esit\n");
}
else{
printf("hayir esit degil");
}
}

---------------

strtok : yazılardaki token'ı bulur onlarla işlem yapmamıza yardımcı olur

char * strtok(char * p, const char * pep)

//bu kodlar çok önemli tekra et
int main(void)
{
char str[SIZE] = "ali bugun eve gec geldi babam ona cok kizdi";
int cnt = 0;

char * p = strtok(str, "\n\t");
while(p) {
printf("%-3d %s\n", ++cnt, p);
p = strtok(NULL, "\n\t");
}
}

-----

int main(void)
{
char str[SIZE] = "ali876567ayse568765mustafa598765tayfyn8765678helin87678";

int cnt = 0;
const char * psep = "0123456789";

char * strtok(str, psep);
while(p){
printf("%-3d %s\n", ++cnt, p);
p = strtok(NULL, psep);}
}

-----

int main(void)
{
char str[SIZE] = "bircan, ilker, omer ve necati... mehmet!!!yasin; buradalar...";

int cnt = 0;
const char * psep = " ,.!;";

char * strtok(str, psep);
while(p){
printf("%-3d %s\n", ++cnt, p);
p = strtok(NULL, psep);}
}

-----
//yazıyı sayıya dönüşürmek

#define SIZE 100

int main(void)
{
char str[SIZE];

printf("bir yazi girin: ");
scanf("%s", str);

printf("[%s]\n,str");

int ival = 0;

for (int i = 0; str[i] != '\0'; ++i){
ival   = ival * 10 + str[i] - '0';
}

printf("[%s]\n", str);
}

----------------------------------------------

<stdlib.h> 
atoi: //yazıyı sayıya dönüştüren fonksiyon

int atoi(const char * p);

int main(void)
{
char str[SIZE];

printf("bir yazi girin: ");
scanf("%s", str);

printf("[%s]\n,str");

int ival = atoi(str);
printf("ival = %d\n", ival);
}







