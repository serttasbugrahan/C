////////////////////////////////////////////////////1. Ders/////////////////////////////////////////////


r value l value tekrarı
----------------------
!! başına & operatörü koduğumuzda hata olmuyorsa l value oluyorsa r value


r value
------

a * b
a + b
a &&b
x > 10
+x
-x
x >> 8
a = b
++x
y==
 

l value : bir nesneey karşı
---------
değişken isimlerinin oluşturduğu isimler
ival
dval
a
*ptr
a[5]


!! C dilinde call by referance yapmanın tek yolu pointerlardır

void swap(int *p1, int *p2)
{
int temp = *p1;
*p1 = *p2;
*p2 = temp;
}

int main(void)
{
int x = 45;
int y = 90;

swap(&x, &y);
printf("x = %d  y = %d\n", x, y);
}

--------------------------------

neden call by reference yaparız ?

maaliyet :
-size of değeri 20 byte'dan daha büyük ise call by reference kullanılmalı

birden fazla geri dönüş değeri istenebilir :
return ile sadece 1 değer alabilirken pointer ile birden fazla değerin geri dönüşünü yapabiliriz.

 void get_circle_vals(double radiius, double* p_circ, double* p_area);

int main()
{
double r = 345.78435;
DOUBLE PERİMETER, AREA;
GET_CİRCLE_VALS(r, &permeter, &area);
}


out param : 
in param :

-------------

void get_circle_area(double raidius, double* p_area)
{
*p_area = 3.1415928 * raqdious * raidosu
}

int  main()
{
double r;

printf("yaricap degerini giriniz: ");
scanf("%lf", &r);

double area;
get_circle_area( r, &area);

printf("area = %f\n", area);
}


arraylar :
!! c dilinde diziler bir fonksiyondan bir fonksiyona sadece call by referance olarak gönderilebilinir, call by value çalışmaz

int main(void)
{
int a[100] = {0};

func(a);
}

===================================================

const(ant) : değeri değişmiycek değişken

void func(T* ptr);
void foo(const T *ptr);


!! const variable oluşturursak değeri değişmiycek bir değişken oluştururuz

int main(void)
{
const int a = 10;

}

değişkenler 2'ye ayrılır
-muatble (değiştirilebilir)
-immutable (değiştirilemeyen)

!! const int x = 10; - int const x = 10; aynı anlamdadır

neden bir değişken const yapılır ?

- muatble mı immutable mı olduğunu anlarız
- değerlerinin değişmemesi gereken elemanlar olabilir

!! const değeri değiştirme işlemi undefined behavier'dır

----------------

const int x = 10;

int const x = 10 

//ikisi arasında fark yoktur

----------------
salt okuma amaçlı olacaksa const yap
  -> look up table'ları özellikle const yap 

------------------



----------------

int main(void)
{
const int x = 10;
int * ptr = (int*)&x;
}

!! const bir değişkene sabit bir değer verilse bile sabit ifadesi kullılan yerde kullanılamıyor

----------------

const int x = 10, y = 45; //x ve y consttur

----------------

int main(void) {

const int x = 5;
const int y = 7;
const int z = 10;
//hata verir değişkenlerde (cpp'da vermez)
switch(foo()){
case x:;
case y:;
case z:;
}
}

const anahtar sözcüğü ve pointerlar :
-------------------------------------

int main(void)
{
int x = 10;

-int * const p1 = &x; 
//hep x'i gösterir başka bir adres atanamaz
//const pointer to int (bu terim daha çok kullanılır)
// top-level const (cpp'de bu terim kullanılır)
//right-con st (bu terim pek sevilmez)

int *const ptr = &x;
*ptr = 5678; //legal
ptr = &x; //illegal

-------------
 
-c
  zonst int* p2 = &x; 

//*ptr sadece okuma amaçlı erişilir değiştirilemez
//*ptr = 29 (error)
//ptr = &y(geçerli)
//x = 4099(geçerli)
//pointer to const int
//low-level const
//left const

const int* ptr = &x;

*ptr = 78; //error
ptr = &y //geçerli
x = 4566; //gecerli ub degıl
   

-const int* const p = &x;
//*p = 56;
//p = 56;
-int const*  p3 = &x;
//p2 ile p3 aynı anlamdadır
}

void func(T *ptr); //out-param, adresini aldığı fonskyonu set eder, set function mutator setter
void foo(const T *ptr); //sadece değerinde faydalınılır get function, accessor, getter

=================================================
 
pointer aritmetiği :

+
-
++
--
+=
-=

- C ve c++ dillerinde bir adres ile bir tam sayı toplanabilir, ptr + 10 = ptr
- Tam sayı ile adres toplanabilir, n + ptr = ptr
- Bir adresten br tam sayı çıkartılabilir. ptr - 5 = ptr
-tam sayıdan adres çıkartılamaz 5 - ptr
-iki adres toplanamaz p1 + p2

-bu işlemlerden elde edilen adrestir
 
!! c dilinde bir adrese 1 değerini toplardak bir sonraki nesnenin adresini elde ederiz

int count = 0; count++ (1 olur)
int * ptr = a; ptr++ (a 4 artar)

int main(void)
{
int a[10] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9,};

for (int i = 0; i < 10; ++i){
printf("%d %d %d\n", *(a + i), *(i + a), a[i], i[a]); //hepsi aynı anlamdadır diziyi yazıdırı
}
}

a[i] //derleyici bu kodu şu şekilde yazıyor : *(a +i)

/////////////////////////////////////////////////2.Ders//////////////////////////



int main(void)
{
int a[10] = {0 ,1,2,3,4,5,6,7,8,9};
int n = 10;
int * p = a; //dizinin ilk adresine erişir

while (n--){
printf("%d\n", *p);
++p;                                           
}
}

int main(void)
{
int a[10] = {0,1,2,3,4,5,6,7,8,9};
int * p = a + 5;
printf("%d %d\n", *p, p[0]); // 5 5 *(p + 0)
printf("%d\n",p[3]); // 8 *(p + 3)
printf("%d \n",p[-2]); // 3 *(p - 2)
printf("%d\n",3[p]); // 8

}

-------------------------

int main(void)
{
int a[10] = {0,1,2,3,4,5,6,7,8,9};

&a[10] //ub yok
}
-------------------------
//diziyi dolaşma yöntemleri

int main(void)
{
int a[10] = {0,1,2,3,4,5,6,7,8,9};
int * p = a;
int size = 10;

for (int i = 0; i < size; ++i){
printf("%d", p[i]); // printf("%d", *p); ++p; aynı anlamda
}
printf("\n");
}

-------------------------------

!! bir dizi ile ile igili fonksiyon yazarken parametresi pointer olmalı, call by value olarak aktarılamaz

!! diznin adresini bilemediği için birde boyut bilgisi vermememiz gerekir, bu bilgiyi vermez isek bunu fonksyion içinde öğrenemey  iz

void display_array_1(const int* p, int size)
{
for (int i = 0; i < size; i++){
printf("%d", p[i]);
}
printf("\n---------------------\n");
}

void display_array_1(const int* p, int size)
{
while (size--){ //bu yapı daha çok kullanılır
printf("%d", *p);
++p;
}
printf("\n---------------------\n");
}


int main(void)
{
int a[10] = {0 ,1,2,3,4,5,6,7,8,9};
display_array(a, 10);
display_array(a, 10);
}

----------------------------

int main(void)
{
int a[SIZE];

set_array_random(a, SIZE); //tüm elemanları yazıdır
set_array_random(a, SIZE); //ilk 5 elemanı yazdırı
set_array_random(a, SIZE); //5. elemandan itibaren 4 tane eleman yazıdır
set_array_random(a - SIZE -6, 6); // son 6 elemanı yazıdırı

}

---------------------------------
!! &a[i] = a // aynı anlama gelir
 
!! &a[i] = a + i //aynı anlama gelir -

!! a[i] = *(a + i) //aynı anlama gelir 

!! *p = p[0]; //aynı anlama gelir

---------------------------------------

!! okuma amaçlı kullıcak isek const kullanılır
!! yazma amaçlı ise kullanılmaz

-------------------------------------
DİZİ TOPLAMINI VEREN FONKSİYONLAR

int sum_array(const int* p, int size)
{
int sum = 0;

for (int i = 0; i < size; ++i)
{
sum += p[i];
}
return sum;
}

int sum_array_2(const int* p, int size)
{
int sum = 0;

while(size--)
{
sum += *p;
++p;
}

return sum;
}

int main(void)
{
int a[SIZE];

randomize();
set_array_random(a, SIZE);
print_array(a, SIZE);

printf("%d ", sum_array(a, SIZE);
}

-----------------------
 

min ve max değerlerini veren algoritma:

void get_minmax(const int * pa, int size, int * pmin, int *pmax)
{
*pmin = *pmax = *pa;

for (int i = 1; i < size; ++i){
if (pa[i] > *pmax)
*pmax = pa[i];
else if (pa[i] < *pmin)
*pmin = pa[i];
}
}

int main(void)
{
int a[SIZE]
get_minmax(a, SIZE, &min, &max);
}


-------------------------------------

void swap(int* p1, int*p2)
{
for (int i = 0; i < size / 2; ++i) {
int temp = p[i];
p[i] = p[size - 1 - i];
p[size - 1 - i] = temp;
}
}

int main(void)
{
int x = 4356, y = 87652;

printf("x = %d y = %d\n", x, y);
swap(&x, &y);
printf("x = %d y = %d\n", x, y);
}

-------------------

void reverse_array(int* p, int size)
{
for (int i = 0; i < size / 2; ++i) {
swap(&p[i], &p[size - 1 - i]);
}
}

-------------------------------------

!! 

void func(int p[]) //dizi gibi gözüksede bu bir pointerdır *p ile aynı anlama gelir
{
//bunu kullanma int * p kullan, böyle  kullanıldığı zaman dizi olucağı belli olur
}

-------------------

dizinin max elamnını yazılması

int get_array_max(const int* p,  int size)
{
int max = *p;

for (int i = 1; i < size; ++i) {
 if (p[i] > max)
max = p[i];
} 
return max
}

int main(void)
{
int a[SIZE];

randomize();
set_array_random(a, SIZE);
print_array(a, SIZE);

printf("max = %d\n", get_array_max(a, SIZE));
}

---------------------

birden fazla değer döndürmek isteniyor

void get_minmax(const int *pa, int size, int *pmin, int* pmax)
{
*pmin = *pmax = *pa;

for (int i = 1; i < size; ++i) {
if (pa[i] > *pmax)
*pmax = pa[i];
else if(pa[i] < *pmin)
*pmin = pa[i]; 
}
}

int main(void)
{
int a[SIZE];

randomize();
set_array_random(a, SIZE);
print_array(a, SIZE);
int min, max;

get_minmax(a, SIZE, &min, &max);

printf("min = %d\n", min);
printf("max = %d\n", max);

}

-------------
// bubble sort

void bsort(int*pa, int size)
{
for (int i = 0; i < size -1; ++i) {
for (int k = 0; k < size -1 -i; ++k) {
if (pa[k] > pa[k + 1]) {
swap(pa + k, pa + k + 1);
}
}
}
}

-----------------

diziyi bir yerden bir yere kopyalayan 
!! yazma parametresi ilk parametre olur okuma parametresi ikinci parametre olur

void copy_array(int* pdest, const int* psoruce, int n)
{
for (int i = 0; i < n; ++i) {
pdest[i] = psoruce[i];
}
}

void copy_array_2(int* pdest, const int* psoruce, int n)
{
while (n--) {
*pdest++ = *psource++ ;
}
}

------------------

void foo(int *p) //dizi ile çağrı yapılabilr

void func(int p[]) //dizi ile çağrı yapılabilr

// ikisi de kullanılabilir, ancak 2. de dizi ile işlem yapılacağını vurgular


=========================================================

adresler ve karşılaştırma işlemleri
------------------------------------

pointer değişkenin değerinin kullanılması bu yollarala olur :

a ) hayataı devam eden bir nesneyi göstermesi

int main(void)
{
int x = 25;
int * p = &x;

}

b) pointerın bir dizinin bittiği yerin adresini tutmasu

--------------------


!! dizinin son elemanın adresi a + 4
!! diiznin bittiği yyerin adresi a + 5

int main(void)
{
int a[5] = {1, 2, 3, 4, 5};

int* p = a + 5; // geçerli
*p //ub
}

bu ifade
 karşılaştırma işlemleri
 çıkartma işlemleri

işlemlerinde kullanıur
--------------------------

adres + n geçerli adres
n + adres geçerli adres
adres - n geçersiz
n - adres geçersiz 
adres - adres geçerli tam sayı
adres + adres geçersiz

---------------------------
ptr, a iismli dizinin bir elemanını gösteren bir pointer değişkendir,
ptr'nin gösterdiği dizi elemanının indeksi nedir?

ptr - a

!! dizinin bittiği yerden dizinin başlangıcını çıkarırsam dizinin boyutunu bulurum

int main(void)
{
int a[SIZE] = {0};
int * ptr = a + 13; //13 indisinin gösteri,r
printf("%d\n", ptr - a)
} 

-----------------------------

c ve c cillerinde 
bir dinzinin
bir elemanının adresini bilmemiz ile indeksini bilmemeiz arasında hiçbir fark yok
indeksten adrese adresten indekse geçebiliriz

n, a isimli dizinin bir elemanın inkdesi olan ta sayıdıır. Dziinin bu elemanın adresi nedir

idx ==> adresine 
a + idx

adres ==> index
adres - a

-----------------------------

int main(void)
{
int x = 13;
int y = 45;

int *p1 = &x;
int* p2 = &y;
int* p1 = &x;
int* p2 = &y;

int n = p1 - p2; //asla böyle bir şey yapma, ne değer çıkağaını bilemeyiz
}

-----------------------------

!! C ve C++ dillerinde bir dizinin bir elemanının adresini bilememiz ile
indeksini bilmememiz arasında hiçbir fark yoktur
indeksten adrese adresten indekse geçebiliriz

idx ==> adresine
a + idx

adres ==> idx
adres - a

-------------------------------
geçerli pointer durumları:

int * ptr = &x;
int *p = a + SIZE; //*p tanımsız
int *ps = NULL; //*ps tanımsız

---------------------------------

pointer karşılaştırma işlemleri :
---------------------------------
 
p1 == p2
p1 != p2

p1* == p2* //adreslerini karşılaştırır


int main(void)
{
int x = 23;
int y = 458;

int * p1 = &x;
int * p2 = &y;

if (*p1 == *p2) //if (x == y)

---------------------

iki pointer == karşılaştırılmasına sokulduğunda ancak şunlar agranti alındadır

a) her iki pointer'da aynı nesnesin adresi ise kesin eşit olur

!! dizi isimleri adresler içerisinde klullanıldığı zmana adreslere dönüştürülür

int main(void)
{
int a[] = {1, 2, 3, 4};
int a[] = {1, 2, 3, 4};
if (a == b) //always false, dizi adresleri farklı
printf("dogru\n");
else
printf("yanlis\n");

printf("%p %p\n", &a[0], &b[0]);
}

--------------------

int main(void)
{
char name1[] = "bilgin";
char name2[] = "bilgin";

if (name1 == name2) //always false
printf("dogru\");
else
printf("yanlis\n");
}
 

============================================

!! diziler pointer ile gösterilme zorunda
a[] = {1,2,3,4,5} dizisi a ile gösterilir 
*a ile çağrılır a[i] , i[a] , *a++ , *(i + a) , *(a + i) ile aynı anlamadadır ancak fonskiyon parametresinde *a ile göster
örnek
-----

int ptr(int * p){
p[i]
}

int main(void){
a[] = {1,2,3,4,5};
ptr(a);
}




