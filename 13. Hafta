///////////////////////////////////////////////////1. Ders//////////////////////////////////////

                             yazı tipi örnekleri devam

int main(void)
{
char str[SIZE];
int ch;

printf("bir yazi girin: ");
sgets(str);
printf("sayilacak karekter
ch = getchar();
int cnt = 0;

for (int i = 0; str[i] != '\0'; ++i){
if (toupper(str[i]) == toupper(ch)){
++cnt;
}
}
printf("toplam %d tane %c karakteri var\n", cnt, ch);
}

--------------

// yazıdaki bütün karakterlerinin sayısını hesaplamak
// ascii

int main(void)
{
char str[SIZE];

printf("bir yazi girin: ");
sgets(str);
printf("sayilacak karakteri girin: ");
int ch = getchar();
int cnts[26] = {26}

for (int i = 0; str[i] != '\0'; ++i){
if(ialpha(str[i])){
++cnts[toupper(str[i]) - 'A']
}
for (int i = 0; i < 26; i++){
if(cnts[i]{ // cnts[i] != 0 aynı anlama gelir
printf("%c %d\n", 'A' + i, cnts[i]);
}
}
}

----------

//s1 ve s2 yazısı aynı ise evet aynı değil ise farklı ekrana yazsın

int main(void)
{
char s1[SIZE];
char s2[SIZE];
printf("2 yazi giirn: ");
scanf("%s%s%s", s1, s2);

int i = 0;
int flag = 0;
while (s1[i] == s2[i]){
if (s1[i] == '\0'){
flag = 1;
break;
}
++i;
}
if (flag){
printf("ayni yazilar\n");
else{
printf("farkli yazilar"\n");
}
}
}

================================
                              
!! karşımıza algoritmik problem çıktığında bunu nasıl kodlarım !!
                              

1 - ben bunu zaten önce kodlamıştım tekrar aynı kodu yaparım

2- daha önce bunu kodlamadım ancak parçalara ayır zaten her bir parçanın nasıl kodlancığını biliyorsun

3- daha önce benzerini kodlamıştım o zamana benzerini düşünüp ona uyarlanır

4- hiçbiri değil ise araştır

===============================

// yazıdaki istenilen karekterleri silme

int main(void)
{
char str[SIZE];
sgets(str); // kahramanmaraş
printf("[%s]\n", str); 
int ch;

printf("silinecek karekteri girin: "); //A
ch = getchar();
char dest[SIZE];

int i;
// str[i] silinecek karakter değil ise dest dizisine yaz
int write_idx = 0; 
for(i = 0; str[i] != '\0'; ++i){
if (str[i] != ch){
dest[write_idx] = str[i]; //dest[write_idx++] = str[i];  bu şekilde yazmaya çalış
++write_idx;
}
}
dest[write_idx] = '\0';
printf("[%s]\n" dest); //khrmnmrş
}

----------------

//yazının tersini veren program

int main(void)
{
char str[SIZE];

printf("bir yazi giri: ");
sgets(str);
printf("[%s]\n", str);

int len = 0;
for (int i = 0; str[i] != '\n'; ++i)
++len

for (int i = 0; i < len / 2; ++i)
char c = str[i]
str[i] = str[len - 1 - i];
str[len -1 - i] = c;
}
printf("[%s]\n", str);
}

------

// ODEV : 
Ana Naci Dede ne dedi Canan'a
en iyi mese bese mi yine?
Kalas yok kütük koy, Salak!
Para hazır, ama Rıza harap!!
At sahibi gibi hasta!
Traş neden şart?

Madam, I'm Adam!
A man, a plan, a canaL: Panama! //panama palindromu

yazı girin palindrom olup olmadığını kontrol et

--------

ODEV // Buğrahan Serttaş yazısını bu şekilde yaz Serttas Bugra, 2. bir dizi kullanma

-----

//emlak kalem,kelam,  iki dizinin anagram olup olmadığını bul
//ilave bir ya da birden fazla dizi kullabilirsiniz

int main(void)
{
char s1[SIZE];
char s2[SIZE];

printf("iki kelime girin: ");
scanf("%s%s", s1, s2);

int cnt[26] = {0};

for (int i = 0; s2[i] != '\0'; ++i){
++cnt[toupper(s1[i]) - 'A'];
}

for (int i = 0; s2[i] != '\0'; ++i){
--cnt[toupper(s1[i]) - 'A'];
}

int k;
for (k = 0; k < 26; ++k){
if (cnt[k])
break;
}

if (k == 26)
printf("anagram\n";
else
printf("anagram degil\n";
}

----------

ODEV : yazıdaki kelimelerin sayısını hesaplayan program //ali     veli mehmet can = 4
#define SIZE 1000
#define SIZE 1
#define SIZE 0

int main(void)
{
char str[SIZE]

printf("bir yazi girin: ");
sgets(str);
printf("[%s]\n", str);

int word_count = 0; //bayrak değişken önemli kullanmaya çalış
int word_flag = OUTWORD;
for (int i = 0; str[i] != '\0'; ++i){
if (isspace(str[i])){
word_flag = OUTWORD;
}
else if (word_flag == OUTWORD){
++word_count;
word_flag = INWORD;
}
}

printf("toplam %d kelime",word_count)
}

===============================================

!! kod tekrarından kaçın, kod tekrarı felakettir

!! 15-20 satırı bir fonksiyondan geçme

!! refactoring
    ortak kodu bir yere toplamak
    niyeti iyi anlatan hale 
    verimli

!! eğer bir kodu update ediyorsak açıklama satırı var mı diye kontrol et (onu da değiştir)

!! kodun bir kısmını (debug sürecinde) (tekrar esli yerine koyabilmek için)

!! kodun en üstünde
***********************************************
-bugra.c  
-author : buğrahan serttaş
-implementation file for
-haklar
-version
**********************************************

!! fonksiyonlar böyle tanımlanabilir
*******************************
function isprime
tests if an integer is prime
returns non-zero if x is prime
returns zero otherwise
*******************************

  
========================================================

kodlarda yapılan hatalar :

- isimlendirme özenli olsun
- türkçe isim kullılmamalı

----

- int isxyz(int x)
{
if (x == sum)
return 1;
else
return 0;

return x == sum ? 1 : 0; //böyle yaz
return x == sum; 
}

----

- uyarı hatalarına dikkat et

----

-double dval = 0 //böyle yazma
-double dval = 0.; //böyle yaz 

==================================

uyarı mesajları :

---

int x, y;
y = 5;
foo(y); //değişkenin kullanılmama uyarısı

---

int main(void) {
int x;
foo(x) //çöp değerin kullanılması

}

//////////////////////////////////////////////////////////2. Ders////////////////////////////////////////

pointers ==> adress

-object pointer : nesne bellekte nerede

Eğer x türü T olan bir değişken ise
x değişkenin adresi anlamına gelen bir ifadenin türü
T *
türüdür.

int*
double*
char*
unsigned int*

acaba ben değeri adres olan değişkenler oluşturulabilinir mi?

int main(void)
{
int* ptr;
// ptr öyle bir değişken ki ptr değişkeninin değeri bir int türden değişkenin adresi olacak
}

int main(void)
{
int* iptr; //iptr is a pointer to int, int türden nesnenin adresini tutuyor
}

int main(void)
{
int x = 10;
int y = 30;

int* p = &x; //ilk değer verebilirim ya da adres operatörü ile değer verilir
}

int main(void)
{
int* ptr; //declarator
int a[10]; //declarator

ptr = a; //operator
*ptr = 10; //operator, deferencing indirection
a[3] = 45; //operator
}

// pointer türleri bellekte aynı miktar yer kaplar

int main(void){

int* p1, p2, p3;
int* p1;
int p2;
int p3;
}

int main(void){

int x, *p, a[5};
int x;
int* p;
int a[5];
}

--------------------

pointer operators :

& address of
* dereferencing
[] index-subscript
-> member selection

-------------------

adress of operator :

!! adres operatörünün operandı L value expression olmak zorunda

// &123 geçerli olmaz
// int x = 214; &x geçerli
// &a[4] geçerli
// &(a[4]) geçerli

int main(void)
{


}

!! adres operatörünün operandı olan ifade L value olmak zorunda, 
!! adres operatörü ile oluşturulan bir ifadenin value category R value olmalı











