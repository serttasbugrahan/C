////////////////////////////////////////////////////////////////////////1. ders/////////////////////////////////////////////////////////////

<stdlib.h>

int atoi(const char * p);

int main(void)
{
char str[SIZE];

printf("bir tarih girin: ");
sgets(str);

printf("[%s]\n",str);

int day = atoi(str);
int mon = atoi(str + 3);
int year = atoi(str + 6);

printf("%d/%d/%d\n", day, mon,year);
}

------------------

atof : float atoi
atol : 
atoll : 

int main(void)
{
char str[SIZE];

printf("bir yazi girin: "); //234.876bugra
sgets(str);

int ival = atoi(str);
double dval = atof(str);

printf("ival = %d\n", ival); //234
printf("ival = %f\n", dval); //234.876


}

--------------
strtod: diziyi ondaklıklı sayıya dönüştürür

!! void func(char** p); //bir pointer değişkende değişiklik yapmak için bu yapı kullanılır veya dizi gösteren pointer

int main(void)
{
char str[SIZE] = "12.567;23874.873245";
char * p;

double dval = strtod(str, &p);
//double dval = strtod(str, NULL); //herhangi bir nesne istemez isek

printf("dval = %f\n",dval);
printf("index  = %d\n",p - str); //index = 6
}

--------------
//yazıyı sayıya çevirme

int main(void)
{
int ival;

printf("bir sayi giriniz: ");
scanf("%d",&ival);

int temp = ival;
//87345
//8734
//873
//87
//8

int idx = 0;
char str[SIZE];

while(temp){
printf("%d ", temp % 10);
temp /= 10;
}

str[idx] = '\0';

_strrev(str);

printf("[%s]\n", str);
}

-----------------

itoa : int to alfabetik

int main(void)
{
int ival;
printf("bir tam sayi girin");
scanf("%d",&ival);
_itoa(ival, str, 10);
printf("decimal [%s]\n", str); //decimal halini yazar
_itoa(ival, str, 16);
printf("hex [%s]\n", str); //hex halini
_itoa(ival, str, 8);
printf("octal [%s]\n", str); //octal halini
_itoa(ival, str, 2);
printf("binary [%s]\n", str); //binary halini
}


===========================================================

bellek üstünde yapılan formatlı okuma yazma işlemleri:
----------------------------------------------------

(in-memmory)
   
<stdio.h>

printf : stnadart outputa yapmak için 
sprintf : adresteki bir diziye yazdırmak için (belleğe)
fprintf : dosyaya yazdırmak için

int printf(const char *pfm,...);
int sprintf(char * pstr, const char  * pfm, ...);
int fprintf(FILE *,const char *pfm,...);

int main()
{
int ival = 278345;
double dval = 34.742873;
char str[SIZE];

printf("[%d] [%f]", ival ,dval);
sprintf(str, "[%d] [%f]", ival, dval);
puts(str);
}

---------

!! sprintf ile istediğimizi yazıya dönüştürebiliriz

int main(void)
{
char name[SIZE] = "hasan";
char surname[SIZE] = "semerci";
int birth_year = 2000;

char file_name[SIZE];
sprintf(file_name, "%s_%s_%d.txt", name, surname, birth_year); //file_name dizisne basar yazıyı

FILE * f = fopen(file_name, 'w');
if (!f){
printf("dosya olusturulamadi\n");
return 1;
}

fclose(f);
}

------------

int main(void)
{
int x = 3425;
double dval = 2.33283233;
unsigned int uval = 345678;

char str[SIZE];
sprintf(str, "%d;%.3f;%X",x, dval, uval); //hepsi yazıya dönüşütürüldü
printf("|%s|\n", str);
}

--------------

snprintf : sprintf'den farklı olarak taşmayı kontrol eder
int snprintf(char * pstr, size_t n)

int main(void)
{
char str[10];
int x;

printf("sayi girin: ");
scanf("%d",&x);

snprintf(str, 10,"hasan_%d", x);
printf("[%s]\n", str);
}

----------------------------------------

int scanf(const char * pfm,...);
int sscanf(const char * pbuf, const char *pfm, ...);
int fscanf(FILE * pbuf, const char * pfm,..);

sscanf : bir dizide tutulan yazıya işlem yapar

int main(void)
{
int x,y,z;
char buffer[SIZE] = "7656 565 567656";

printf("3 sayi giriniz: ");
sscanf(buffer, "%d%d%d",&x, &y, &z);

printf("x = %d y = %d z = %d\n", x, y ,z);

}

=============================================================

programın sonlandırılması / process sonlandırılması

<stdlib.h>

-exit
-atexit
-abort

-----------------

normal termination : exit fonksiyonu çağrılır

abnormal termination : abort fonksiyonu çağrılır, direkt sonlandırır

----------------

void exit (int status);
!! main'deki return statement ile exit fonkisyonunu çağırmak arasında fark yoktur. derleyici return statementi exit fonksiyonuna dönüştürür

EXIT_SUCCESS
EXIT_FAILURE

!! return 0 başarılı olarak kabul ederiz, exitte aşağıdaki şekilde uygulanır



int main(void)
{
exit(EXIT_SUCCESS); //exit(0) derleyici bunu görür, ynı anlama gelir
}

-----------

!! fonskyionların içini boş bırakmak yerine void kullanmak gerekir.

void baz(void)
{
printf("baz basliyor\n");
exit(EXIT_FAILURE);
printf("baz sona eriyor\n");
}

void bar(void)
{
printf("bar basliyor\n");
baz();
printf("bar sona eriyor\n");
}

void foo(void)
{
printf("foo basliyor\n");
baz();
printf("foo sonra eriyor\n");
}

int main(void)
{
printf("main basliyor\n");
foo();
printf("main sona eriyor\n");
}

------------

!! main.c içine return 0 konulmasa bile c99 standartı ile return 0 eklenir

atexit : programın sonlanması sırasında özel işlevlerin çağrılmasını sağlar.

int atexit(void (*)void); //geri dönüş değeri olmayan adresi olmayan bir fonksiyon istiyor

void baz(void)
{
printf("bar basliyor\n");
}

void bar(void)
{
printf("bar basliyor\n");
}

void foo(void)
{
printf("foo basliyor\n");
}

void func(void)
{
printf("func cagrildi\n");
exit(EXIT_FAILURE);
}

int main(void)
{
atexit(&baz); //exit çağrıldığında bu fonksyonları çağırsın
//
atexit(&bar);
//
atexit(&foo);

func(); //bunu silsek bile implict olarak derleyici buraya return 0 koyar return 0' da exit fonksyionunu çağırır
}

!! son kayıt edilen ilk çağrılacak, atexit kayıt ettiği için bu şekilde çalışır

--------------

neden atexit var ?

program exit ile sonlansa bile bazı yapılar çalışmalı bunları atexit ile kayıt edebilir ve o işlemleri yapabilriiz

---------------------------
!! assortion : daha önce yazılmış kodlardaki hataları bulmak için yazılan kodlara denir.

abort : programı direkt sonlandırır

----------

void baz(void)
{
printf("baz basliyor\n");
abort();
printf("baz bitti\n");
}

void bar(void)
{
printf("bar basliyor\n");
}

void foo(void)
{
printf("foo basliyor\n");
}

void func(void)
{
printf("func cagrildi\n");
exit(EXIT_FAILURE);
}

int main(void)
{
atexit(&baz); 
//
atexit(&bar);
//
atexit(&foo);

func(); 
}


---------

// yazılımda sadece çalışacak kodlar kullanılmaz, bazı seneryoları test edicek fonksiyonlarda yazılması gerekir
// bunun için abort() kullanabiliriz, aşağıdaki gibi

void func(const char * ptr)
{
if (ptr == NULL){
abort(); //fonksiyonu direkt sonlandırmamız gerekir
}
}

int main(void)
{
char str[100] = "bugrahan serttas";

func(strchr(str, 'A'));
}

-------------------

!! assert'de kullanılabilir, her yerde kullanılabilir

void func(const char * ptr)
{
if (ptr == NULL){
assert(ptr != NULL); // programı yine abort sonlandırırı
}
}

int main(void)
{
char str[100] = "bugrahan serttas";

func(strchr(str, 'y'));
}


/////////////////////////////////////////////////2. Ders//////////////////////////////////////////////

dinamik bellek yönetimi :
--------------------------

dinamik bellek bloğu ne zaman kullanılır : 

- kaç byte bellek alanına ihtiyaç olduğu programın çallışma zamanında belli olur
- bir nesnenin hayatı programın çalışma zamanında t1'de başlayıp t2'ye kadar devam edecek ise ve bu aynı fonk. içinde olmka zorunda değil ise 
- canımız ne zmana isterse bellekten yer edinililmeli

!! dinamik bellek edinimi statik bellek edinimi göre çok daha maaliyetlidir

dinamik ömürlü nesne : istenildiği zaman hayatı başlatılan 
istenildiği zaman hayatı sonlandırılan demektir 

malloc : bellek bloğunu direkt bize verir
calloc : bellek bloğunu sıfırlayarak bize verir 
realloc: daha önce elde edilen bellek boyutunu arttırmak veya azaltmak için kullanılır
free : daha önce ayrılan bellek bloğunu sisteme geri veriyor


stack/daha segment/heap 

heap : dinamik olarak bellekte yerlerin ayarlanmasından sorumludur

   -------------------
  |      heap in c    |
  | free store in c++ |
   -------------------

------------------------------

malloc: bellek havuzunda yer varsa verir yer yoksa veremez, başarısız olursa null pointer verir

--------------

malloc kullanımına bir senaryo :

mesela dianamik bir dizi return etmek gereiyor bununiçin önce malloc ile 8 byte yer allocate ettik (int* foo = malloc(2* sizeof(int)))
sonrasında foo[0] == *(foo + 0) anlamına geldiği için foo[0]'a değer atayabiliriz sanki vektörde ilk elemana değer atıyoruz gibi, bu durumda foo[1[ bellekte bir diğer adresi gösterir bu da ör: 0x1000	(foo[0]) - 0x1004 (foo[1]
en sonda da bu diziyi return ile döndürebilriiz ==> return foo

------------

neden malloc kullanırızı açıklayan güzel bir yazı :

One example should clear this. Say you know there will be maximum 20 students. So you can create an array with static 20 elements. 
Your array will be able to hold maximum 20 students. But what if you don't know the number of students? 
Say the first input is the number of students. It could be 10, 20, 50 or whatever else. 
Now you will take input n = the number of students at run time and allocate that much memory dynamically using malloc.

#include <stdio.h>

int main(int argc, const char *argv[]) {

    typedef struct {
        char *name;
        char *sex;
        char *insurance;
        int age;
        int yearInSchool;
        float tuitionDue;
    } student;

    // Now I can do two things
    student p;

    // Or
    student *p = malloc(sizeof *p);
}

--------------

void * malloc(size_t n);

int main(void)
{
size_t n;

printf("tam sayi girin: ");
scanf("%zu", &n);
int * pd = (int *)malloc(n * sizeof(int)); //void türünden int türüne dönüşüm
if (pd == NULL){
fprintf(stderr, "cannot allocate memory\n");
return 1;
}

set_array_random(pd ,n);
print_array(pd, n);
free(pd); //free //deallocate

}

------------

#define BUFFER_SIZE(1024 * 1024)

int main(void)
{
int cnt = 0;
void * vpa[50000];

for(;;){
void * vptr = malloc(BUFFER_SIZE);
if (!vptr)
break;
vpa[cnt] = vptr;
printf("%-5d %p\n", ++cnt,vptr);
}
}

---------------

void * checked_malloc(size_t n)
{
void * pd = n;
if (pd == NULL){
fprintf(stderr, "cannot allocate memory\n");
return(EXIT_FAILURE);
}
return pd;
}

int main(void)
{
size_t n;

printf("kac tam sayi: ");
scanf("%zu", &n);

int * pd = (int *)checked_malloc(n * sizeof(int));
print_array(pd ,n);

free(pd);
}

-------------

- malloc bize o değeri bir değerle set etmeden olduğu gibi veriyor
- malloc tek parça verir, dizi konumlanıdırılabilir
- o bellek bloğuna heap alanına verene kadar o bellek bloğunu kullanabiliriz
- bellek alanını geri vermez isek o bellek alanını başka bir amaç için kullanılamıyor (memmory leak(age))

-------------

int main(void)
{
size_t n;

printf("kac tam sayi: ");
scanf("%zu", &n);
int * pd = (int *)malloc(n * sizeof(int)); //void türünden int türüne dönüşüm
if (pd == NULL){
fprintf(stderr, "cannot allocate memory\n");
return 1;
}

set_array_random(pd ,n);
print_array(pd, n);

pd = &ival; //hata, free yapmadık
}

!! malloc çağrısı ile daha önce edinilmiş 
 
=======================================================

wrapper : fonksiyonu başka bir fonksiyona çağırtmak
to wrap (sarmalamak)
sarmalayıcı

neden function wrapper yaparız?

sen func ı çağırma
sen call_func işlevini çağır call_func func_

char * mitoa(int val, char * pbuf)
{
return _itoa(val, pbuf, 10); //10 luk sayı sitemi için çağrılıcak bu şekilde istediğimiz 
şekilde standar kütüphanaleri değiştirebiliriz
}


neden kullanırız :

1. augmentation
  koda ilave kod ekleme

2. argüman kontroli

3. ortak kodu tek bir yere toplama

4. parametre sayısını azaltma

5. parametlerin sırası  

=========================================================

free : tekrardan bellek bloğunun kullanılmasını sağlar
void free(void * vp);

free işleviyle ilgili tipik hatalar 
------------------------------------

1. dinamik olmayan yani malloc calloc realoc ile edinilmemiş
bellek bloğu adreslerini free işlevine göndermel

int main(void)
{
char str[100];
char * p = str;
free(p); //hata , p dinamik veri adresi değilse hata olur
}

---------------

2. free fonksiyonuna çağrı yaptıktan sonra free edilmiş bellek bloğunun
adresi geçersiz bir adrestir. dangling pointer
!! dangling pointe hiçbir şekilde kullanılmamalı

int main(void)
{
size_t n;

printf("tam sayi girin: ");
scanf("%zu", &n);
int * pd = (int *)malloc(n * sizeof(int)); //void türünden int türüne dönüşüm
if (pd == NULL){
fprintf(stderr, "cannot allocate memory\n");
return 1;
}

set_array_random(pd ,n);
print_array(pd, n);
free(pd); 
pd = NULL; //DİKKAT ÇEKMEK İÇİN YAPILABİLİNİR
!! pd değerini asla kullanma, yeni bir değer atayarak kullanabilirsin
}

------------------

3. free işlevi allocate edilmiş bellek bloğunun adresini istiyor
edinilmiş bir bellek bloğunun bir kısmını geri vermek için işlem yapılamaz

free(pd + n / 2); //sadece malloc, calloc, realloc ile edinilmiş bellek bloğu verilir


!! bir bellek bloğunu birden fazla veri tutabilir, bellek bloğu free edilince dangling pointer olur veriler
-------------

4. double free

int* px = pd;
free(px);

-----------

5. memmory leak :allocate edilmiş bellek bloğunun geri verilmemesine denir

//kopyalama ile bu işlemin önün geçeriz

int dcmp(const void * vp1, const void * vp2)
{
if (*(const void* vp1, const void * vp2)
return 1;
if (*(const double*)vp1 < *(const double*)vp2)
return -1;
return 0;
}

double get_median(const double *p, size_t size)
{
double *dp = (double*)malloc(size* sizeof(double));
if (!dp){
fprintf(stderr, "cannot allocate memory!\n");
exit(EXIT_FAILURE);
}
memcpy(db, p , size * sizeof(double));
qsort(dp, size, sizeof(*dp), &dcmp); //sıralama yapıldı
double retval dp[size / 2];
free(dp); //kullanmassak memmory leak olur
return retval;
}


!! return'den önce free yap UNUTMA 

!! main içinde free etmeye gerek yoktur aslında ama yine de et

----------------

calloc : sıfır ile başlatılmak isteniyorsa kullanılır
void * calloc(size_t n, size_t sz);

int main(void)
{
size_t n;

printf("tam sayi girin: ");
scanf("%zu", &n);
int * pd = (int *)calloc(n, sizeof(int));
if (pd == NULL){
fprintf(stderr, "cannot allocate memory\n");
return 1;
}
print_array(pd ,n);
free(pd);
}

------------

char * mystrdup(const char * p) //malloc çağırdığını dökümante et, free edilmesi gerektiğini yaz
{
char * pd = (char*)malloc(strlen(p) + 1);
if (!pd) return NULL;
strcpy(pd, p);
return pd //return strcpy(pd, p) aynı anlama gelir //burada free etsek çağıran kullanamaz
}

int main(void)
{
char str[1000];

printf("bir yazi girin: ");
sgets(str);
//yukarıdaki yazı bana ait değil ancak o yazının tersine ihtiyacım var

char * p = mystrdup(str);
_strrev(p);

printf("[%s] [%s]\n", str, p);
free(p);
}


--------
!! dinamik ömürlü nesne adresi döndürüyor ise free edilmelidir, statik ise free edersek tanımsız davranışş olur

//2 yazının toplamını yazan program

char * concat(const char * p1, const char * p2)
{
char * pd = (char*)malloc(strlen(p1) + strlen(p2) + 1);
if (!pd){
return NULL;
}
strcpy(pd, p1);
strcat(pd, p2);
return pd;
}

int main(void)
{
char s1[SIZE];
char s1[SIZE];

printf(birinci yazıyı girin: ");
sgets(s1);
printf(ikinci yazıyı girin: ");
sgets(s2);

char * p = concat(s1,s2);
_strypr(p);
printf("[%s] [%s] [%s]\n", s1,s2,p);
free(p);
}


----------

int main(void)
{
const char * const p[] = {
"bugra","ali","musa", "bugra","ali","musa", 
"bugra","ali","musa", "bugra","ali","musa", 
}

size_t len = 0;
for (size_t i = 0; i < asize(p); ++i){
len += strlen(p[i]);
}

char * pd = (char*)malloc(len + 1);
if (!pd){
return 1;
}
*pd = '\0';

for (size_t i = 0; i < asize(p); ++i){
strcat(pd, p[i]);
}
puts(pd);
free(pd);

}

---------------







