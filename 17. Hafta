F///////////////////////////////////////////////////////1. Ders///////////////////////////////////////////////

int main(void)
{
char * p = "mustafa"; //const char olarak göster
*p = 'M' //tanımsız davranıştır

}

---------

#define SIZE 200

int main(void)
{
char old_file_name[SIZE];
char new_file_name[SIZE];

printf("dosya ismini girin: ");
scanf("%s", old_file_name);

strcpy(new_file_name, old_file_name);
printf("[%s] ==> [%s]\n", old_file_name, new_file_name);

//eger dosya isminin uzantısı yok ise uzantısını txt yapan kodu yazınız
//ali ==> ali.txt
char * p = strrchr(new_file_name, '.');
if (p == NULL){ //!p
strcat(new_file_name, ".txt");
printf("[%s] ==> [%s]\n", old_file_name, new_file_name);

}
//eger dosyanın uzantısı gif ise dosyanın uzantısını jpg yapınız
else if(!strcmp(p, "gif")){
strcpy(p, ".jpg");
printf("[%s] ==> [%s]\n", old_file_name, new_file_name);
}

//eger dosyanın uzantısı .dat ise dosyaın uzantısını kaldırın
else if(!strcmp(p, ".dat")){
*p = '\0';
printf("[%s] ==> [%s]\n", old_file_name, new_file_name);
}
}

----------------------------------------



int main(void)
{
char * p = "murat";
printf("[1] %zu\n", sizeof(p)); //4 cevabı çıkar, derleyiceye bağlı
printf("[2] %zu\n", sizeof(*p)); //1
printf("[3] %zu\n", sizeof("murat")); //6 (murat\0)
printf("[3] %zu\n", sizeof(p++)); //4, sizeof işlem üretmez
printf("[3] %zu\n", strlen(p)); //5 
}

------------------

int main(void)
{
char str[100] = "seyfullah";
printf("%zu %zu\n", sizeof(str), strlen(str)); //100 9
printf("%zu %zu\n", sizeof str, strlen(str)); //100 9(aynı anlama gelir)
printf("%zu %zu\n", sizeof "mert", strlen("mert")); //5(dizinin boyutu) 4(yazının uzunluğu)

const char * p = "zeliha";
size_t x = strlen(p++);

printf("%zu\n", x);
x = strlen(p);
printf("%zu\n", x); //eliha
}


int main(void)
{
printf("%zu\n", sizeof(""); //1
printf("%zu\n", strlen(""); //0
printf("%zu\n", *""; //0
printf("%zu\n", ""[0]; //0

}

---------------------------------------------

int main(void)
{
char str[100] = "murat";
str = '\0'; //boş yazı yapar
str[0] = '\0'; //boş yazı yapar
}



int main(void)
{
printf("\10123\06223"); //A23223
}

--------------------------------

string literallerini birden fazla satıra yayma :
------------------------------------------------

\ : alt satıra geçmemizi sağlar 

int main(void)
{
const char * p = "su an icin istediginizi yerine getiremiyoruz lutfen devam etmek\
icin bir tusa basin";
puts(p);
}

----------------
//bu şekilde de yapılırdı 

int main(void)
{
printf("[1] Kayit ekle\n"
"[2] Kayit sil\n"
"[3] Kayit ara\n"
"[4] Kayit yenile\n"
"[5] Kayit cik\n"
);
}


=======================================================================

Pointer Arrays:

int *
double *
char *

int main(void)
{
int a1[50]; //elemanları şnt olan
int * a2[50];  //elemanları pointer int olan
}

-----
int * foo(void);

int main(void)
{
int x = 10;
int y = 45;
int * ptr = &y;
int * p[10];

p[0] = &x;
p[1] = ptr;
p[2] = foo();
}

!! bir pointer dizisi ile mantıksal ilişki içindeli aynı türden
nesnelerin adrslerini bir arada tutabiliriz

----

int a = 10;
int b = 20;
int b = 40;
int d = 78;

int main(void)
{
int * p[] = {&a, &b, &c, &d}; //bu kod doğru şekilde çalışır herhangi bir sıkıntı yok
}

-----
int a = 10;
int b = 20;
int b = 40;
int d = 78;

int main(void)
{
int * p[] = {&a, &b, &c, &d};

*p[1] = 99; //b 99 olur
++*p[2]; //c'nin değeri 1 artar
++**p //a'nın değeri 1 artar, ++(*(*p)) aynı anladma


}

---------
//mülakatlarda sık sorulan bir soru

int a[] = {1,2, 3}
int b[] = {10 ,20, 30}
int c[] = {100,200, 300}

int main(void)
{
int * p[] = {a, b, c};

++p[1]; //b dizisinin 2. elemanıın adresini tutar
++*p[1]; //b dizisinin 2. elemanını 1 arttırır 21
}

--------

int main(void)
{
int a[] = {1,2, 3}
int b[] = {10 ,20, 30}
int c[] = {100,200, 300}

int * p[] = {a, b, c};

p[1][2]++; //b dizisnin 2 indisli değerini 1 arttırır

}

---------

- *p[1] pointer dizisinin 1 indisli elemanının gösterdiği nesne
- p[1][2] pointer dizisinin 1 indisli elemanının gösterdiği dizinin 2 indisli elemanı

---------

int main(void)
{
char * p[] = {"ahmet", "hakki", "deniz", "erdem", "tan"}; //dizinin elemanları string literallerini gösterir
for (int i = 0; i < 5; ++i){
printf("%s\n", p[i]); //puts(p[i])
}
}

------

int main(void)
{
const char * pmnos[] = {"", "ocak", "subat", "mart", "nisan", "mayis", "haziran", "temmuz", "agustos", "eylul", "ekim", "kasim", "aralik"};

for (size_t i = 0; i < asize(pmons); ++i){
printf("%s\n", pmons[i]);
printf("%zu\n", strlen(pmons[i])); //ayların uzunluğu yazılır

printf("yilin kacinci ayi: ");
scanf("%d", &n);

printf("yilin %d. ayi %s\n", n, pmons[n - 1]);
}
}

---------

int main(void)
{
const char * pmnos[] = {"", "ocak", "subat", "mart", "nisan", "mayis", "haziran", "temmuz", "agustos", "eylul", "ekim", "kasim", "aralik"};

char entry[4];

printf("bir ay girin: ");
scanf("%s", entry);
int i;

for (i = 0; i < 12; ++i){
if (!strcmp(entry, pmons[i]))
break;
}

if (i < 12){
printf("%s yilin %d. ayidir\n", entry, i + 1);
}
else{
printf("%s gecerli bir ay  degıl\n", entry);
}
}

-----------

pointer söz konusu olmadığı sürece const önce veya sonra gelmesi arasında fark yoktur

int main()
{
const int a[5] = {12, 54,23,254,76};
int const a[5] = {12, 54,23,254,76};
}

-----------

int a = 1, b = 2, c = 4;

int main(void)
{
int * const p[3] = {&a, &b, &c}; //bu şekilde olunca dizinin elemanlarının değiştimek hata
p[2] = &ival; //syntax hatası
*p[2] = 456; //adrese atamama yapmak hata değil
}

-----------

int a = 1, b = 2, c = 4;

int main(void)
{
const int * const p[3] = {&a, &b, &c}; 
p[2] = &ival; //değer değiştirmek hata
*p[2] = 333; //adrese atamama yapmak hata}

----------------

int main(void)
{
const char  * p[] ={ /*string dizi elemanları var*/}

printf("p dizisinin %zu elemani var \n", asize(p));
printf("içinde hnagi karakter olanlar yazilsin: ");

int c = getchar();

for (size_t i = 0; i <asize(p)İ ++i) {
if (strchr(p[i], c) != NULL) {
printf("%s ", p[i]);
}
}


for (size_t i = 0;i< asize(p); ++i){
printf("%c", p[i]); //dizinin elemanlarını yazar
printf("%c", *p[i]); //p[i][0] //aynı anlama gelir- //iismlerin ilk harfini yazar
printf("%c", *p[i][strlen(p[i] - 1); //dizinin son elemanını verir
}


////////////////////////////////////////////////////2.Ders////////////////////////////////////////7

!! const char * p[] = {} //look up table için bolca kulllanıcağız, dizinin elemanlaı değişebilir

!! const char * const p[] = {} //p'nin elemanlarına bir atama yapılamaz, p'nin gösterdiği nesneyi değiştiremeyiz

!! char * const p[] = {} //p'nin gösterdiği nesneyi değiştiremeyiz
-------
  
int main(void)
{
const char * p[] = {"bugra", "ali", "veli"};

int ch ;

printf("içinde hangi harf olanlar: ");
ch = getchar();

for (size_t i = 0; i < asize(p); ++i){
if (strchr(p[i], ch)) { //strchr null döndürmüyorsa o yazıda var
printf("%s ", p[i]);
}
}
}

-----

int main(void)
{
const char * p[] = {"bugra", "ali", "veli"};

char str[SIZE];

printf("harfleri girin: ");
scanf("%s", str);

for (int i = 0; i < asize(p); ++i) {
if (strpbrk(p[i], str)) {
printf("%s", p[i]);
}
}
}

-------------------------------------

bağımısz verileri fonksiyon olarak yazamk her zamana daha iyidir

uniqe olanların yazılması

int is_unique(const char* p);

int main(void)
{
const char * p[] = {"bugra", "ali", "veli"};

for (size_t i = 0; i < asize(p); ++i) {
if (is_uniquek(p[i])) {

}
}

--------------------

int main(void)
{
const char * p[] = {"bugra", "ali", "veli"};

char str[SIZE];

printf("yazi girin: ");
scanf("%s", str);

for (int i = 0; i < asize(p); ++i) {
if (strstr(p[i], str)) {
printf("%s\n", p[i]);
}
}
}

-------------------------
// aşağıdaki şekilde implemente etmek gerekir

eğer statik yapmaz isek dizi tekrar oluştuğundan tekrar tekrar oluşturulacak o yüzden static yapmak gerekir

void func(void)
{
  static const char * const pdays[] = {
  "", //indeks ile sayma sayısının aynı olması için yapılır
  "pt",
  "sali",
  "carsamva", 
  "persembe",
  "cuma",
  "cumartesi",
  "pazar",
};
}


===========================================================

pointer to pointer : pointer değişkenlerin kendi adresi ile ilgilidir
--------------------


int main(void)
{
int x = 10;
int * ptr = &x;

printf("&x = %p\n", &x); //aynı adres yazar
printf("ptr = %p\n", ptr); //aynı adres yazar
printf("&ptr = %p\n", &ptr); //ptr değişkenin kendi adresi

&ptr türü = int**
}

int main(void)
{
int x = 10;
int * ptr = &x;
int ** p = &ptr; 
//*p  = ptr'ye erişilir, **p = *(*p) = x
//**p p'nin gösterdiği nesnenin gösterdiği nesnedir
}

double dereferencing
double indirection


int main(void)
{
int a[] = {10, 20, 30, 40, 50};
int * p = a;
int** ptr = &p;

++*p; //a dizisinin ilk elemanı 10, 1 artar
++* ptr; // ++p //dizinin 2. elemanın adresini gösterir


}

------------------------

int main(void)
{
int x = 10;
int * p = &x;
int ** ptr = &p;
}

expression      type      value category
----------      ----      ---------------
x               int        L
&x              int*       R
p               int*       R
*p              int        L
p[0]            int        L
&p              int**      R
ptr             int**      L
*ptr            int*       L
**ptr           int        L
&ptr            int***     R

------------------------------------

pointer to pointer ne işe yarar :

void foo(int**p); //beni çağıracak kod bana int* türünden bir nesnenin adresini göndermelisin

int main(void)
{
int* ptr;
//code

func(ptr);
foo(&ptr);
}


---------------

int main(void)
{
int x = 10;
int y = 45;
int * p1 = &x;
int * p2 = &y;

printf("%d %d\n", *p1, *p2);
pswap(&p1, &p2);
printf("%d %d\n", *p1, *p2);

}

void pswap(int ** ptr1, int ** ptr2)
{
int *ptemp = *p1;
*ptr1 = *ptr2;
*ptr1 = ptemp;
}

-------------

void func(int ** ptr)
{
*ptr = &x;

}

int main(void)
{
int x = 10;
int* p = &x;

printf("x = %d\n", x);
func(&p);
printf("x = %d\n",x);
}

--------------

int ** foo(void);

int main(void)
{
int ** ptr = foo();

}

-------------

en kafa karıştıran örnek :

//bir int dizinin en büyük elemanının adresini döndürücek bir fonksiyon bildirin

int * get_array_min_max(const int * pa, size_t size, int ** pmin, int **pmax);
{
*pmin = *pmax =(int*)pa;
for (size_t i = 1; i < size; ++i){
if (pa[i] > **pmax){
*pmax = (int *)&pa[i]
}else if (pa[i] < **pmin){
*pmin = (int *)&pa[i];
}
}

}
int main(void)
{
int a[SIZE];

randomize();
set_array_random(a, SIZE);
print_array(a, SIZE);
int * ptr_min;
int * ptr_max;

get_array_min_max(a, SIZE, &ptr_min, &ptr_max);

printf("min = %d ve min index = \n", *ptr_min, ptr_min - a);
printf("max = %d ve max index = \n", *ptr_max, ptr_max - a);

swap(ptr_min, ptr_max); //swap hazır fonk. dizinin en büyük elemanı ile en küçük elemanının swap edilmesi
print_array(a, SIZE);
}

---------------

void printf_names(char ** ptr, size_t size)
{
for (size_t i = 0; i < size; ++i){
printf("%s ", ptr[i]);
}
printf("\n\n");

}

int main(void)
{
const char* p[] = {}

print_names(p, asize(p));

}

------------

int main(void)
{
char * p[] = {}

//alfabetik sıraya göre sıralaayan algoritma
for(size_t i = 0; i < size - 1; ++i){
for (size_t k = 0; k < size(p) - 1 - i; ++k){
if (strcmp(p[i], p[i + 1]) > 0){
char * ptemp = p[k];
p[k] = p[k + 1];
p[k + 1] = ptemp;
}
}

for (int i = 0; i < size; i++)
{
printf("%s ",p[i]);
}
}

------------------

// yazıları yazının uzunluğuna göre eğer aynı uzunlukta ise alfabeye göre sırala

int main(void)
{
char * p[] = {}

//alfabetik sıraya göre sıralaayan algoritma
for(size_t i = 0; i < size - 1; ++i){
for (size_t k = 0; k < size(p) - 1 - i; ++k){
size_t len1 = strlen(p[k];
size_t len2 = strlen(p[k + 1];

if (len1 > len2 || (len1 == len2 && strcmp(p[i], p[i + 1]) > 0){
char * ptemp = p[k];
p[k] = p[k + 1];
p[k + 1] = ptemp;
}
}

for (int i = 0; i < size; i++)
{
printf("%s ",p[i]);
}
}

-----------

fonksiyon ile yazma :

void sort_names(char ** p, int size){

//alfabetik sıraya göre sıralaayan algoritma
for(size_t i = 0; i < size - 1; ++i){
for (size_t k = 0; k < size(p) - 1 - i; ++k){
size_t len1 = strlen(p[k];
size_t len2 = strlen(p[k + 1];

if (len1 > len2 || (len1 == len2 && strcmp(p[i], p[i + 1]) > 0){
char * ptemp = p[k];
p[k] = p[k + 1];
p[k + 1] = ptemp;
}
}

for (int i = 0; i < size; i++)
{
printf("%s ",p[i]);
}
}




