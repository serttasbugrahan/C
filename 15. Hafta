///////////////////////////////////////////////////1. Ders///////////////////////////////////////////

int main(void)
{
int a[10] = {0, 1,2,3,4,5,6,7,8,9};
int * pe = a + 10;
int * p = a;

while (p != pe){
printf("%d ",*p);
++p;
}
} 

-------

int main(void)
{
int a[10] = {0, 1,2,3,4,5,6,7,8,9};
int * p1 = a + 5; //5. elemanı (değeri değil direk 5)
int * p2 = a + 8; //8. elemanı (değeri değil direk 8)

if (p2 > p1){//  DOĞRU 8 > 5
}

}

-----

void reverseArray(int * p, int size)
{
int * pe = p + size
while (p < pe)
swap(p++, --p);
}

void printArray(const int* pfirst, const int* plast)
{
while (pfirst < plast){
printf("%d ", *pfirst++);
}
printf("\n---------------------\n");
}

int main(void)
{
int a[SIZE];
randomize();
set_array_randım(a ,SIZE);
printf_array(a, SIZE);
reverseArray(a, SIZE);
printf_array(a, SIZE);
}

-------------------------------------

pointer idioms :

patter (dilden bağımsız)
idiom (dile bağımlı)
technic (alışılmış konuyu ele alma biçimi)

- içerik operatörü ile oluşturulan ifade L value expressiondur

- L value olduğunu tespit etmek için başına '&' koyulduğu zaman hata vermiyor ise L value

&x++   illegal
&++x   illegal
++&x   illegal

---------------------------------

expression ile statement farkı

x + 5  //expression
x + 5; //expression statement
x; //expression statement
5; //expression statement
; //null statement
if (x > 10) ++y; //if statement

expression çeşitleri:

statement
expression statement
control statement
null statement
compound statement
  loop stateemnt
  jump statement

----------------------------------------

int main(void)
{
int a[5] = {10, 20, 30, 40, 50);
int * p = a;
*p++ = 33; //33 değeri dizinin ilk elemanına atannır
*p = 77; //side effecten dolayı dizinin 2. elemanı 77 olur

*p++ //p'nin gösterdiği nesneye eriş p'yi 1 arttır
}


int main(void)
{
while(size--){        
*p++ = rand() % 1000;
}
}

while(size--){
*p = rand() % 1000;
p = p + 1; //aynı anlama gelir yukarıdaki ile
}
}

int main(void)
{
int a[5] = {10 ,20 ,30 ,40 ,50};
int * p = a;
*++p = 99; //dizinin 2. elemanına atama olur
}


int main(void)
{
int a[5] = {10 ,20 ,30 ,40 ,50};
int * p = a + 4
*++p = 90; //hata verir dizi eleman sayısı taşar

}


int main(void)
{
int a[5] = {10 ,20 ,30 ,40 ,50};
int * p = a;
++*p; //a dizisinin ilk elemanını 1 arttırır 
(*p)++ //a dizisinin ilk elemanını 1 arttırır 
!! son ek olarak arttırak istiyorsan parantez zorunlu
!! ön ek olarak arttırmak istiyorsan parantez zorunlu deği
}


------------------------

void reverse_copy(int * pdest, const int * psource, int n);
{
const int * pe = psource + n;
while (n--)
*pdest++ = *--psource;
}

int main(void)
{
int a[SIZE];
int a[SIZE];

randomize();
set_array_random(a ,SIZE);
print_array(a, SIZE);
reverse_copy(b, a, SIZE);
}

======================================================


typdef bildirimleri (tür eş bildirimleri / type alias declarations) : 

takma isim anlamına gelir

buğrahan ==> buğra


double x = 3.45;

meter distance = 3.45; //bu daha anlaşılır

!! var olan bir türe onu temsil edicek eş isim verilir

-----
typedef int (*FPTR)(const char *, const char *)

int(*func(int (*fp1)(const char *, const char *), int (*fp2)(const char*, const char*)))const char *, const char *);

FPTR func(FPTR, FPTR); //187. satır ile aynı anlama gelir
-----

neden kullanılırz:

1- Tam sayi ve gerççek sayı türlerinin "çok genel" olma özelliği yerine bunları daha daraltılmış
bir bağlamda kullandığımız göstermeye yönelik

2- Karmaşık türlerin (yani bildiriminde fazla sayıda token kullanılan) kullanımı kolaylaştırmak için

3- kodun taşınmasını kolaylaştırmak için


typedef int Word; //int türüne Word eş ismini verdik

int main(void)
{
Word x;
Word * p;
Word a[10] = {0};
}

-------

typedef int * IPTR;

int main(void)
{
IPTR p; //int * p;
}

-----
typedef const int * CIPTR
int main(void)
{
CIPTR p1, p2;
}

------------
!! özellikle karmaşık bildiirmlerde işimizi kolaylaştırmak için typedef bildirimi yapmanın pratik yolu :

1- hangi türe eş isim vermek istiyorsanız o türden bir değişken tanımla
2- tanımalama başına typedef anahtar sözcüğü koy
3- değişkene verdiğimiz ismi silin onun yerine seçtiğimiz türe eş ismini koyun

int x;
typedef int x;
typedef int
typedef int word;

----------------
int [20] ==> INTA20

int a[20];
typedef int a[20];
typedef int [20]
typedef int INTA20[20]

INTA20









