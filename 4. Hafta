//////////////////////////////////////////////1. Ders/////////////////////////////////////////

kod yazarken ana amaç: 
a) kodun doğru olması
b) kodun kolay olması
c) kodun kolay okunması

!!kodu yazarken optimize etmeye çalışmayın
!!mikro düzeyde optimize etmeye çalışmayın

okunabilirlik için yapılan işlemler
-----------------------------------
1. fonsksiyonun kodunun büyük olmaması lazım (200 satırdan büyük olmasın)
2. parametre değişkenini çok fazla tutma // void func(intx ,int y)

================================================

int ndigit(int x{
int dgit_count = 0;
 if (x == 0)
 return 1;
 while (x !=10){
  ++digit_count;
  x /=10 ;
}
return digit_count;
}


!! bir fonksiyonun doğrudan 2 ayrı değeri g.d.m ile eletmesi mümkün değildir.
!! fonksiyon içinde birden fazla return değeri olabilir

=====================================================

fonskisyonların geri dönüş değerleri ne ifade ediyor?


1. Varlık nedir
varlık nedeni bir değer hesaplamak

2. bir soruya cevap aramak için
evet / hayır
gecerli / gecersiz
dogru / yanlıs

!! fonskiyon 0 dışında hangi değeri döndürürse döndürsün true değerini döndürür

3. başarı bilgisi

standart c kütüphanesi 0 = başarılı diğer değerler başarısız olarak döndürür

!!bazı fonksşyonların dönüş değeri varlık nedeni değil tamamlayıcı bir bilgi (printf)


=======================================

a function call

fonksiyon çağrıları operatör seviysinde işlemler

function call expression

func(x + 13)  //içine yazılana argüman denir

1. önce, fonksiyona argüman olarak gönderilen ifadelerin değerleri hesaplanır
2. hesaplanan argüman değerleri çağrılan fonksiyonun parametere değişkenlereine kopyalanır
3. fonksiyon çağrı ifadesinin değeri çağrılan fonskiyonun geri dönüş değeridir

int max3(int a, int b, int c){
int max = a;
if(b > max)
max = b;
else(c > max)
max = c
return max;
}

int main(void)
{
int x = 100, y = 20, z = 50;
max3(x,y,z);
max3(x*x, y*3, z*2+200); // bu şekilde de olabilir
}

bir fonksiyon çağrı ifadesi ile neler yapılabilir

void foo(int x);

int main(void)
{
foo(19);
}

!! geri dönüş değeri olan bir fonksiyona çağrı yapıldığı zaman çağrıdan elde edilen geri dönüş değerinin kullanılmıyor (discard ediliyor)
olması durumunda lojik bir hata var mı diye kontrol et

int remove_chars(char *p, int c);
int cnt = remove_chars(str, 5); //eğer bunu cnt değerine eşitlemessek lojik hata olur hesaplama yaptırıcaksak onu kullanmamamız gerekiyor

=======================================================

en sık kullanılan tema fonk. geri dönüş değerinin bir değişkende saklanması

-fonksiyon çağrısından elde edilen değeri neden bir değişkende saklıyoruz?
1- birden fazla yerde kullanılabilir

!!eğer aynı değeri elde edicek isek aynı değeri elde etmek için fonksiyonu tekrar takrar çaüırmak kötü bir çözümdür

2-parametre içinde kullanılabilir
=======================================================

ndigit(x) + ndigit(y) + ndigit(z)
sqrt(x) + sqrt(y)

if (sqrt(x) > sin(y)){

}

=======================================================

fonksiyon çağrı ifadesi yine bir fonksiyona argüman olarak gönderilen ifade olabilir

int ndigit(int);
int sum_square(int a, int b)
{
return a * b  + b * b;
}


int main(void)
{
int x = 2345;
int y = 3864654;
ndigit(max2(x, y)) // bu şekilde iç içe kullanılabilir
}

özet 
----
fonksiyonar özet olarak bu şekillerde olabilir

-foo(x);

-int y = foo(x);

-a = foo(10);

-foo(x) > 19; 

-func(foo(20))

-return ifadesinde olabilir:

 int ndigit(int x);
 int foo(int a, int b)
 {
 return ndigit(a) + ndigit(b)
 }

===================================================

int main(void){
int x = 20;
int y = 25;

printf("argüaman:") // burada printf fonksiyonunda 1 argüman bulunur
printf("argüaman:",x) // burada printf fonksiyonunda 2 argüman bulunur
printf("argüaman:",x,y,z) // burada printf fonksiyonunda 3 argüman bulunur
}

variadic fonksiyonlar çağrı yapan kodun değişken sayıda argüman ile çağırabileceği fonskiyonlardır printf ve scanf de bunlardandır

===============================================

-call by value (pass by value)
-call by reference (pass by referance)

int x = 10;
foo(x); // eğer x değişkeninin değerini fonksiyona gönderiyor isek call by value değişknein kendisini yolluyor isek call by referance

!! c de tüm fonskiyon çağrıları call by value'dur 
!! call by referance olan değişkenler adres ile çağırılırlar

void func(int x)
{
x = 7777;
}

int main(void)
{
int ival = 10;
func(ival);
printf(ival);  //ival değeri 10 çıkar call by value örneği
}

void swap(int a, int b) // bu kod sayıların yerini değiştiren koddur
{
int temp = a;
a = b;
b = temp;
}

int main(void)
{
int x = 10;
int y = 20;
swap(10,20); // burada değerler değişmez çünkü call by value'dur
}

int main(void)
{
int x = 10;
foo(x); // bu foo fonksiyonun hiçbir şekilde x'i değiştirme imkanı yok çünkü call by value'dur değiştirmeme nedeni x'in kendisini almaz onun değerini alır
foo(&x( //x'in değerinin değişmesi için onun adresinin fonksiyona gitmesi lazım buna da call by referance denir
}

=============================================================

c'de olmayan c++ olan araçlar:

-funciton overloid:aynı isimde birden fazla fonksiyonun bulunabilmesi
-default argument yoktur

===============================================================

constants
-integer constanst
-floating constants

bir sabitin türü nasıl anlaşılıyor?
belirli bir türden sabiti nasıl ifade ediyorum?


int main(void)
{
int x = 0623
int x = 623;
}

sabitler şu şekilde olabilir:
int 
unsigned int

long
unsigned long

long long
unsigned long long

------------------------------

!!o sabit o türe sığmıyor ise o türden sayılmaz

-eğer sabit 10'luk sayı sisteminde yazılmış ise

int türüne sığmıyor ise -> long -> long long

--

10L = long türü
10Lu = unsigned long
10LL = long long
10uLL= unsigned long long
10u = unsigned int

3.4 double
3.4f float
0.5 ya da .5 : aynı anlama gelir
5. double
5.f float
5.L long double

//scientific notation
//ustel notasyon

4.5e12
4.5e-12
4e12

-------------

//////////////////////////////////////////////////////////////2. Ders//////////////////////////////////////////

charecters constants

C dilinde karakter sabitlerinin türü int

C++ dilinde karakter sabitlerinin türü char


single quote

'k'
'A'
'+'
' '

Character encodeing 

ASCII : 128 karakter

ASCII karakter kodlamasında her karakter 0-128 arasında bir değere sahiptir

0
1
2
...
...
49
65 A
...
90 Z
---
---
---
---
---
---
97 a

------------------------

rakam karakterleri
0  1  2
48 49 50 

---------------------

int main(void)
{
'A'// int türden değeri 65
}


escape (kaçma -kaçış)
escape sequennce (kaçış sekansı)

'\???' : escape sequence anlamına gelir

'\n' : bir sonrakri satıra geçiş (newline)
'\t' : (horizaontal tab)
'\v' : (veriantial tab)
'\b' : backspace tab
'\a' : alert characeter(çan sesis)
'\r' : carriafe return
'\0' : null character
'\f' : form feed


 ===============================================

C dilinin standard library:

standard c functions
   macro
      object-like macro (symbloic constants)
      function-like macro
   user defined types
   type alias (tür eş ismi)

header file 

<stdio.h> // giriş çıkış kütüphanesi standart input-output
<string.h>
<ctype.h>

---------------------------------

neden standard library var?

-ortak arayüz oluşturmak için vardır
-yazma zahmetinden kurtulduk

!!main fonskiyonunuint yapmaya çalış

int main(void)
{
//main geri dönüş türü int olursa main içinde return statemant yazmasakta c dili onu koyar
}


