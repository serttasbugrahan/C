//////////////////////////////////////////////////////////////////////////1. Ders//////////////////////////////////////////////////////

COMPLETE TYPE & INCOMPLETE TYPED (tamamlanmış türler ve tamamlanmamış türler)
--------------------------------

incomplete typed:eğer derleyici bir türün varlığından haberdar ise ancak tanımını görmemiş ise

int main(void)
{
//the type pf struct data is incomplete
}

aşağıdaki  durumlarda bir "incomplete type" kullanılabilinir:

1. fonksiyon bildiirmlerinde parametre ve geri dönüş türlerinde

struct Data f1(struct Data);
struct Data *f2(struct Data*);
struct Data *f3(const struct Data *);

------

2. tür eş isim bildirimlerinde kullanılabilinir

struct Neco;
typedef struct Neco * NecPtr;

------

3. Pointer değişken tanımlamalarında 
  -yapıların pointer elemanları da dahil
  -Bir yapının bir elemanı kendi türüne ilişkin pointer türünden olabilir

struct Neco * foo(void);
void bar(struct Neco*);

int main(void)
{
struct Neco * p1 = NULL;
struct Neco * p2 = foo();
bar(p2);
}

-----

4. extern değişken bildirimlerinde 

//xyx.h
struct Neco;
extern struct Neco gnec;

---------------

Aşağıdaki durumlarda bir "incomplete type" kullanılamaz:

1. İncomoplete type türden bir değişken tanımlanamaz
  -bir yapı elemanı incomplete türden olamaz
  -bir yapının bir elemanı kendi türünde olamaz
struct Neco;

int main(void)
{
struct Ali {
int a,b;
struct Neco myneco; //incomplete type is not allowed
}
}

-------

2- incomplete type sizof operatörünün operatörü olamaz

struct merve;
struct kemal;

int main(void)
{
size_t sz1 = sizof(struct merve);

struct kemal  * p;

size_t sz2 = sizeof(*p);
}

-----

3- yapıların elemanlarına erişim ifadelerine incpmlite type kullanılamaz

struct Nec;

int main(void)
{
struct Nec* p = foo(); //hata yok
int val = p->x; //hata var
*p //hata
}

-------

!! Eğer bir başlık dosyasında (yani bir header'da) bir başka yapı türünün "complete" type
olmasını gerektiren bir durum söz konusu ise bu durumda başlık dosyasının diğer başlık dosyasını include etmesi gerekir

nuri.h
struct Sel{
int a,b,c;
}

#include "nuri.h"
selim.h
struct Sel{
int a,b,c;
struct Nur x;
}

!! bir başlık dosyasının başka bir başlık dosyasını include etmesi durumunda 
a) compile time uzar
b) include edilen başlık dosyalarında binary compatibitility'yi bozacak değişiklikler ypaılmış ise onu include eden dosyların yeniden derlenmesi gerek

bir başlık dosyasında başka bir başlık dosyasını include etmemesi durumunda yukarıdaki sorunlar olmaz

!! c ve c++ dilleirnde çok tipik kötü kodlama örneklerinden biri 
başlık dosyasında bir türü incomplete type olarak kullanmak yerine (ki bu durumda başla bir başlık dosyası include etmek gerekmezdi)
complete type olarak kullanmalaraı ve bu yüzden başka başlık dosyalarını include ederek
gereksiz bağımlılıkları oluşturmaları compile time sürelerinin uzaması


------------------------------

struct Nec {
int a,b,c;
};

struct Data {
int x,y;
struct Nec mnec;
};

struct Foo{
struct Data mdata;
};

int main(void)
{
struct Foo foo;
struct Foo* p = &foo;

p-> mdata.mnec.b

struct Data data;
//code
data.mnec.b = 10; //böyle bir atama yapılabilinir, elemanımın elamanıma erişmek
}

-----

struct Nec {
int a,b,c;
int (*fp)(int);
};

struct Data {
int x,y;
struct Nec mnec;
};

struct Foo{
struct Data mdata;
};

int main(void)
{
struct Foo ar[10];

ar[3].mdata.mnec.fp(12);
}

------

person.h
#include "date.h"

struct Person{
int id;
char name[16];
char surname[24];
Date bdate;
};

main.c

#include "person.h"

printf("sizof(Date) =%zu\n", sizeof(Date));
printf("sizeof(Person) = %zu\n", sizeof(Person));

-----------

(&p->m_bdate) ile (&(p->m_bdate)) aynnı anlamdadır operatör önceliği ile ilgili


=========================================================

!! bir tapının elemanı kendi türünden olamaz
struct Nec{
int a,b,c;
struct Nec mnce;
}

!! bir yapının elemanı kendi türünden pointer olabilir
struct Nec{
int a,b,c;
struct Nec*mptr;
}

!! bir yapının bir ya da daha fazla elamanının kendi türünden pointer olması 
bağlı liste (linked list)
ikili arama ağacı (ninary search tree)
graph

gibi veri yapılarının implementasyonunda kullanılır

-----------

data structures

mantıksal ilişki içinde verilerimiz var bu veriler üstünden işlemler yapmamız gerekiyor
bu işlemlerin yapılabilmesi iiçin bu verilerin(programın çalışma zamanında) bellekte (ram'de) tutulması gerekiyor

bu verileri tutma birçok farklı şekilde yapılabilinir bunlar:
Array,
list,
stack,
queue,
linked list
tree
graph
binary tree,
hashTable,
Heap
==========================================================

linked list (bağlı liste) : istediğimiz konumda eğer konumu biliyorsam ekleme ve silme yapmak constant time

node (düğüm): veri ile bir ya da birden fazla pointerı beraber tutan yapıya denir.

-her bir düğüm için ayrı malloc çağrısı yapılır
-memmory allocation'a göre 2 kat veri kullanılır

singly linked list: tek yönde hareket edebiliriz (ileri veya geri)

doubly linked list : hem ileri yönde hemde geri yönde hareket edebiliriz

bir veriye erişmek için 2 ihtimal var:
-veri ön bellekte olablir erişmek kolay(cashe hit)
-veri ram'de olabilir erişmek zor (cashe miss)   

!! çoğu zaman dinamik dizi bağlı listeyi out-perform yapar
!! C dilinde programlamada çok sık kullanılan veri yapıları standart kütüphanenin bir bileşeni değil

/////////////////////////////////////////////////////////2. Ders///////////////////////////////////////////////////////

data1, data2, data3
f1
f2
f3
f4
f5
f6

eğer böyle bir yapıdan sadece bir tane kullanılacak ise(yani tüm kodlar) aynı veri yapısını kullanıcak ise

data1,data2, data3 ==> global yapmak
bunları client kodlardan gizlemek (static global)
ve bunlara almaları gereken ilk değerleri vermek bu durumda 
client kodlar bu değişkenleri bilmeyecek

eğer böyle bir veri yapısından birden fazlası aynı zamanda (farklı kodlar tarafından kullanılabilecek ise)
handle tekniği ile bu çözülür

-----------------------

bir yapı türünü bir yapı türününn bildirimi içinde yapabiliriz

//nested structure

struct Neco{
int a,b;
struct Bircan {
int x,y,z;
};
};

-------

!! aşağıdaki kodda tür eş ismi Neco olan yapının içte birldirilmiş yapı
türünden bir elemani var

typedef struct{
int a;
struct {
int x,y,z;
}m;
}Neco;

=================================================

alignment (hizalama) : nesnelerin uygun işlemcilere yerleştirilmesi gerekiyor
alignment requirement : her tür içi vardır, kaçın katlarına yerleştirilicek hangi adreslere yerleştirilicek

int main()
{
  _Alignof(int)
}

int main()
{
printf("%zu\n",_Alignof(short)); //2, 2'nin tam katlarına yerleştirilir
}


----------

typedef struct {
int x;
int y;
int z;
double d;
}Data;

int main(void)
{
printf("%zu\n",_Alignof(Data)); //8, double oolur ne büyüğü seçer
}

-----------

int main(void)
{
printf("%zu\n",_Alignof(cahr[16])); //1
}

----------

typedef struct {
char c1;
int x;
char c2;
}Nec;

int main(void)
{
printf("sizeof %d",sizeof(Nec); // 12
}

sizeof değeri elemanın sıralamasına değerine vb. faktörlere bağlıdır

----------------------------

1 elemanın adresinden hareketle, char pointer aritmetiği ile yapının 1 sonraki elemanın adreslerini elde etmeye çalışmayın
pading elemanlarına göre yapı farklı yerlerde olabilir. bunun yerine offsetof makro kullan

offsetof :

offsetof bir functional macro
offsetof bir object-like macro değil

stddef.h

---------

typedef struct {
  char c1;
  int x;
  char c2;
}Nec;

//size_t türünden bir tam degeri

int main(void)
{
offsetof(Nec, c1)

Nec mynec;
*(int*)((char *)&mynec + offsetof(Nec, x)) 
printf("offsetof(Nec, x) = %zu\n", offsetof(Nec, x)); //4 çıkar ÇÜNKÜ ARAYA PADİNG BYTE GİRER
}

!! c programcıları ile yapılan mülakatlarda sorulan en tipi sorulardan biri offsetof mkarosunun implementasyonudur

offsetof impremente edilmesi:

#define Offsetof(S,M)    ((size_t)(&(S *)0->M)

---------

typedef struct{
char c1;
int x;
char c2;
}Nec;

int main(void)
{
Nec nx = {'Z', 82343
}

--------

#pragma pack(2) //2'nin katlarına yerleştirmemizi sağlar

// C'de kullanılan birçok kütüphanede tipik olarak
yapıların eleman sayısı fazladır.
padding byte'ların azaltılması için yapı bildirimlerinde yapı 
elemanlarının sıralanmasına özen gösterilir

===============================================================================

unions  

!! struct ile neredeyse aynıdır

union Data {

}

----

typedef union {
int x;
}Udata;

------

struct ve union arasndaki fark :

typdef union {
int x;
double d;
}UData;

typedef struct {
int x;
double d;
}SData;

!! bir birlik nesnenin tüm elemanları aynı adrestedir
yani birlik nesnesinin tüm elemanları aynı bellek alanını paylaşır

Bu durumda bir eleman değiştiğinde (anlamlı ya da anlamsız diğer elemanlar da değişmiş olur)

Birlik türlerinin kullanıldığı durumlarda zaten genel amaç elemanların aynı bellek alanında tutulmasının avantajlarından faydalanmak
yoksa structure kullanılırdı

!! birlik nesnesine ilk değer verme sentaksında yalnızca tek bir inti kullanılabiliniir



typedef union {
int x,y,z;
double d1,d2;
char str[12];
}UData;

int main(void)
{
UData mydata = {12,56,32,2.2,3.4,"alican"} //derleyici sentek hatası verir
UData mydata1 = {.str = "mustafa"}; //bu şekilde verilir
}

---------------------------------------

Union türleri hangi durumlarda kullanılır









