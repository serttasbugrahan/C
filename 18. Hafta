//////////////////////////////////////////////////1. Ders/////////////////////////////////////////////////////////

!! const ne'den önce gelirse const olan o dur

!! int * const p = &x; //p'ye atama yapılmaz

!! int const *  p = &x; //*p'ye atama yapılmaz

int main(()
{
int x = 10;
int y = 20;
int* p1 = &x;

}

---------------------

int main(()
{
int x = 10;
int y = 20;
int* p1 = &x;
int* p2 = &y;

int* const * ptr = &p1;
}

-----------------

void func(int * p); //aynı anlamdadır
void func(int p[]); //aynı anlamdadır

void func(int p[10]) //aynı anlamda derleyici içini boş görür
void func(int p[]) // aynı anlamda derleyici içini boş görür

void func(int ** p); //aynı anlamdadır
void func(int * p[]); //aynı anlamdadır



======================================================================

void pointers:
---------------

void incomplite type'dır,

void struct //olaamz hata

--------------

//hem c' de hem c++'da ifadenin türü void olabilir

----------------

void func();
void foo(void); //cpp'de fark yoktur, 

--------------

(void)foo(4); //GERİ DÖNÜŞ DEĞERİNİ DİSCARD ETTİM DEMEKTİR

-----------------------------------

int main()
{
void* vptr; //ben herhangi bir türden değerin adresini tutabiliriz

}


--------------

int main(void)
{
void x; //hata
void a[]; //hata
}

int main(void)
{
(void)getchar; //geri dönüş değerini kullanmadığımızı söyler

}

!! void ve void * türleri ayrı türlerdir

int main(){
int x = 12;
double dval = 3.4;
char str[] = "mustafa";
int a[] = {3,4,8,7,5}

void * vptr = &x;

vptr = &dval;
vptr = str;
vptr = a;

vptr = x; //hata, adresi olmayan değişkene void pointer verilemez

}


*vptr = 10; //geçersiz
vptr[2] //geçersiz
vptr + 2 //geçersiz
vptr - 2 //geçersiz

-----------------------------

int main()
{
int a[] = {3,4,8,7,5};

void* vp1 = a;
void* vp2 = a + 3;

vp2 - vp1; //geçersiz
}

-------------------

void pointer ile neler yapılır : 

int x = 12;
vptr = &vptr 
void * vptr = 0;
void * vptr = NULL;
void * vp = &x;

if (vp != NULL)
if(vp) 
if (vp == NULL)
if (!vp)

void * vp1 = &x;
void * vp2 = &dval;
if (vp1 = vp2)
if (vp1 = &x)
if (vp2 = &dval)

-------------------

int main(void)
{
int x = 12;
void * vp = &x;

int * iptr = vp; //void* ===> int *, c'de hata olmaz c++ hata olur
int * iptr = (int *)vp; //c++'da böyle legal olur c'dede böyle yazabilirsin

}

--------

aşağıdaki durumlar legaldir

!!aynı tam sayı türünün işaretlisi veya işaretsizi tanımsız davranış olmaz


int main()
{
unsigned int x = 10u;
int* ptr = (int*)&x;
}

-----------

char* türlerine olan dönüşüm, herhangi bir nesne char'lardan oluşan b,r tür gibi kullanılabilir

int main()
{
double dval = 12873425;
char* p = (char*)&dval;
}

----------


------------------ KAYDI YOK BU KISMIN, HOCA UNUTTU--------------------------------,

//türden bağımısız generic bir koddur, 

void gswap(void * vp1, void* vp2, size_t sz)
{
char * p1 = (char *)vp1;
char * p2 = (char *)vp2;

while (sz--){
char temp = *p1;
*p1++ = *p2;
*p2++ = temp;
}
}

int main(void) 
{
int x = 10, y = 45;
double d1 = 4.587123;
double d2 = 2.981555;

int a[5] = {1, 2, 3, 4, 5};
int b[5] = {-1, -2, -3, -4, -5};

printf("x = %d  y = %d\n", x, y);
printf("d1 = %f  d2 = %f\n", d1, d2);
print_array(a, 5);
print_array(b, 5);


gswap(&x, &y, sizeof(int));
gswap(&d1, &d2, sizeof(double));
gswap(a, b, sizeof(a));

printf("x = %d  y = %d\n",x, y);
printf("d1 = %f  d2 = %f\n",d1, d2);
printf_array(a, 5);
print_array(b, 5);
}

----------

// türden bağımsız bir diziyi reverse edecek bir fonksiyon yazalım

#define SIZE 100

void g_reverse_array(void * vpa, size_t size, size_t sz)
{
char * p =(char*)vpa;

for (size_t i = 0; i < size / 2; ++i){
// adresi p pointer değişkeninde tutulan dizinin i indisli elemanının adresi, p + i * sz dır
gsap(p + i * sz, p + (size - 1 - i)  * sz, sz);
}

}

int main()
{
int a[SIZE];

randomize();
set_array_random(a, SIZE);
print_array(a, SIZE);

g_reverse_array(a, SIZE, sizeof(*a);
//g_reverse_array(a, SIZE, sizeof(a[0]); //aynı anlama gelir üçü
//g_reverse_array(a, SIZE, sizeof(int);

double ar[] = {1.21, 2.31, 3.45, 4.98, 5.12, 6.1, 7.7, 8.5};

for (size_t i = 0; i < asize(ar); ++i)
printf("%f ", ar[i]);

g_reverse_array(ar, asize(ar), sizeof(*ar));

}

-------------------------------------

<string.h> 

memset : bir bellek bloğunun tüm bytelarına bir tam sayı değerini yazmak için kullanılır 
memcpy : br bellek bloğunu bir yerden bir yere kopyalar
memmove : memcpy'nin yapamadığı bazı işlemleri yapar
memchr : bir bellek bloğunda byte tam sayı değeri arar
memcmp : 2 bellek bloğunu karşılaştırır

-------------------

void * memset(void * vp, int val, size_t sz);

int main(void)
{
int a[SIZE];
randomize();
set_array_random(a, SIZE);
print_array(a, SIZE);

//Normalde dizinin elemanları böyle sıfırlanır
for (int i = 0; i < SIZE; ++i)
a[i] = 0;
printf_array(a, SIZE);

//memset ile bu şekilde sıfırlanabilinir
memset(a, 0, sizeof(a));
printf_array(a, SIZE);

int idx;
int n;
printf("hangi indeksten başlayarak kaç tane oge sifirlanacak: ");
scanf("%d%d", &idx, &n)
memset(a + idx, 0, n * sizeof(int));

print_array(a, SIZE);
}

------

int main()
{
char str[] = "bugra serttas"; //bugra !!!tas
char * p = strchr(str, 's');
if (p != NULL){
memset(p, '!', 3);
}

puts(str);
}

-----

int main(void)
{
int x;
memset(&x, 0, sizeof x);
printf("x = %d",x); //0

memset(&x, 255, sizeof x); //bütün bytlera 255 yazar 1111 1111
printf("x = %d",x); //-1

memset(&x, 1, sizeof x); //bütün byte'lara 1 yazar 4 byte var 0000 0001 0000 0001  0000 0001  0000 0001 
printf("x = %d",x); // 16.843.009
}

-------------

memset kodunun yazilması :

void * mymemset(void * vp, int val, size_t sz)
{
char * p = (char*)vp;

while (sz--)
*p++ = val;
return vp;

}


-------------------

void * memcpy(void * vpdest, const void* vpsource, size_t sz);

int main(void)
{
int a[SIZE];
int b[SIZE];

randomize();
set_array_random(a, SIZE);
print_array(a, SIZE);

//memcpy ile a dizisini b dizisine kopyala
memcpy(b, a, sizeof(a));


int idx_a, idx_b, n;
printf("a' da index: ");
scanf("%d", &idx_a);
printf("b' da index: ");
scanf("%d", &idx_b);
printf("kaç tane eleman kopyalnıcak: ");
scanf("%d", &n);

memcpy(b + idx_b, a + idx_a, n * sizeof(int));
}

-------

memcpy kodunun yazılması:

void * memcpy(void * vpdest, const void* vpsource, size_t sz);
{
char *pdest = (char*)vpdest; //tür dönüştürme sorun olmasa da kullan
const char * psource = (const char*)vpsource;

while (n--){
*dest++ = *psource++;
}
return vpdest;


}

////////////////////////////////////////////////////2. Ders////////////////////////////////////////

memmove : memcpy ile aynı işlevi yapar

void * memcpy(void* vpdest, const void vpsource, size_t sz);

void * memmove(void* vpdest, const void* vpsource, size_t sz);

!! memcopy overlap blokar üzerinde doğru çalışma garantisi sağlamaz tanımsıs davranış olur memmove bu şartı sağlar

!! overlap : bellek çakışması anlamına gelir

int main(void)
{
int a[SIZE];

randomize();
set_array_random(a ,SIZE);
print_array(a, SIZE);

memcpy(a + 40, a + 20, 30 * sizeof(int)); //tanımsız davranıştır, a + 40 dmek a indinin 40. elemanı demek
}

----------

memmove fonskiyonunun yazilmasi :


void * my_memmove(void * vpdest, const void * vpsource, size_t n)
{
char  * pdest = (char*)vpdest;
const char * psource = (const char*)vpsource;

if (pdest < psource) {
while (n--)
*pdest++ = *psource++;
}
else {
pdest += n;
psource += n;
while (n--)
*--pdest = *--psource;
}
return vpdest;
}

-------------------

memchr : bellek bloğunda byte arar bulursa adresini döndürür bulamassa NULL pointer döndürür

void  * memchr(const void * vp, int val, size_t sz);

------

memchr fonksiyonun yazlması :

void  * mymemchr(const void * vp, int val, size_t sz);
{
const char *p = (const char*)vp;
while (sz--){
if (*p == val){
return (void*)p
}
++p;
}
return NULL;
}

--------

int main(void)
{
char str[SIZE] = "BUGRA SERRTAS";
char *p = (char *)memchr(str + 10, 'a', 10);
}

int main(void)
{
unsigned char a[] = {1,4,5,7,9,7,2,3,4,0}

unsigned char * p = (unsigned char*)memchr(a, 0, asize(a));
if (!p) {
printf("bulunamadi\n");
}
else{
printf("bulundu diiznin %d indisli elemani\n", p - a);
}
}

--------------

memcmp : 2 bellek bloğunu karşılaştırır

int memcmp(const void * vp1, const void * vp2, size_t sz);

int main(void){
int a[SIZE];
int b[SIZE];

randomize();
set_array_random(a, SIZE);
memcpy(b, a ,sizeof(a));

if (!memcpy(a, b, sizeof(a)){
printf("evet esit\n");
}
else{
printf("hayir esit degil\n");
}
}
}


-------

memcmp kodunun yazilmasi :

int mymemcmp(const void * vp1, const void * vp2, size_t n)
{
const unsigned char * p1 = vp1;
const unsigned char * p2 = vp2;

while (n--){
if (*p1 != *p2){
return *p1 > *p2 ? 1 : -1;
}
++p1;
++p2;
}
return 0;
}

---------------------

generic bir arama fonksiyonu :
------------------------------

void * search_array(const void * vpa, size_t size, size_t sz, const void* vpkey);
{
const char * p = (const char *)vpa; //dönüştürme olmadanda çalışır sen yaz ama
for (size_t i = 0; i < size; ++i){
if (!memcmp(p + i * sz, vpkey, sz)
return (void*)(p + i * sz);
}
return NULL;
}


int main(void)
{
int a[SIZE];

randomize();
set_array_random(a ,SIZE);
print_array(a ,SIZE);
int ival;

printf("aranan değeri girin: ");
scanf("%d", &ival);

int *p = (int*)search_array(a, SIZE, sizeof(int), &ival); //tür değiştirme opsiyonel
if (p){
printf("bulundu... dizinin %d indisli elemani\n", p - a);
}
else{
printf("bulunamadi\n");
}
}

--------------------------------------------------------------------

bir fonksiyondan bir fonksiyona fonksiyon geçiçez, programlamada çok kullanılır, call back yapısı
aslında bir fonksiyonun adresini göndereceğiz


int main(void)
{
// void * vp; //adres olsunda ne olursa olsun, o adresteki nesneni türünü bilmesine gerek yok
// &vp ==> void** //generic değildir, void * türünden bir nesnenin adresidir

void * vp = &x;
void ** vptr = &vp;

}

----

void func(void ** p) //bu şekilde olması gerekir, void **
{
*p = & //*p ptr demektiri, herhangi bir atama yapabilriz çünkü generictir
}

int main(void)
{
void* ptr;
func(&ptr);
}

--------
int main(void)
{
int x = 10;
double dval = 3.4;
void * vp = &dval; //hata yok 
void ** vptr = &vp; //hata yok
*vptr = &x; //vp = &x //hata yok 
**vptr = 999; //synatx hatası çünkü  *vptr = vp, vp direferans edemessin (void pointer direfferans edince nesneye erişilemez)
}

-------

int main(void)
{
void * vp;
foo(vp); //void pointerın değeri olan adresi gönderir
bar(&vp); //vp'Nin adresini aldığı için yeni bir değer yükleyebilir
}

-------

int main(void)
{
int * ip;
void * vp;
void ** vpp;

ip = &ip; //error, çünkü int * türünü int **'a atadık
vp = ip //legal, void * 'a bütün adresler atanabilinir
vp = &ip //legal, void pointer atanabşlmesi için tek şart onun adres olması
vpp = &ip //error, void** ,int ** 'a atanamaz
vpp = &vp // legal, void** , void**
vpp = &vpp //error, voidd**, void***
vp = &vp // legal, void * için tek koşul adres olması

!! kendi adresini tutabilecek tek pointer void pointer, void * vp = &vp;
}

======================================================
!! MÜLAKATLARDA %90 ÇIKAR

endianness
 little endian : düşük anlamlı byte düşük sayısal adresli yüksek anlamlı byte yüksek sayısal adreste, intel kullanır (kıymetli byte sağda)
 big endian : düşük anlamlı byte yüksek sayısal adresli yüksek anlamlı byte düşük sayısal adreste, (kıymetli byte solda)

00000000 00000000 00000000 00001111

big endian
1A00  00000000
1A01  00000000
1A02  00000000
1A03  00001111

little endian
1A00  00001111
1A01  00000000
1A02  00000000
1A03  00000000

-------------

int main(void)
{
int x = 1;
int * p = &x;

if(*(char*)p){
printf("little endian");
}
else{
printf("big endian");
}
}

======================================================

function pointers :

int foo(int);

!! foo fonksiyonunun türü ---> int(int)

double bar(double) //double(double)
strrchr //char*(const char *, int)

fonksiyon türü           fonksiyonun adresi türü
--------------           -----------------------
int (int)                int (*)(int)
double (double, double)  double (*)(double, double)

Peki, bir fonksiyon adresi nasıl elde edilir :

int foo(int);
double bar(double);

int main(void)
{
&bar
&foo
&strcmp
}

!! function to pointer convertion: Bir fonksiyonun ismi bir ifade içinde herhnagi bir operatörün operandı olmadan kullanılsada derleyici
fonksiyonun ismini adresine dönüştürür. (foo, &foo)

!! int (*fp)(int); //sadece parametresi int olanı tutar


----------

//strlen adresini bir değişkende tutulması
size_t strlen(const char *);

int main(void)
{
size_t (*fp)(const char *) = &strlen;
size_t(*fp)(const char*) = strlen; //aynı anlama gelir

}

-------------

//sum adresini bir değişkende tutulması ve atama yaoılması
int sum(int,int int);

int main(void)
{
int (*fptr)(int, int, int) = &sum;
fptr = &bar; //bar (aynı anlama gelir);
}

------------

() fuunction call operator
[] index / subscript

. -> member selection operators
. dot operator
-> arrow operator

-------------

int foo(int x)
{
printf("int foo(int) called!!!\n");
return x * x;
}

int main(void)
{
(&foo)(12);
}

------------

int foo(int x)
{
printf("int foo(int) called!!!\n");
return x * x;
}

int main(void)
{
int (*fp)(int) = foo;
fp(12); //bu şekildede çağırabiliriz. başka bir isimle
}

-------------

void f1(void)
{
printf("f1 called!");
}

void f2(void)
{
printf("f1 called!");
}

void f3(void)
{
printf("f1 called!");
}

int main(void)
{
void (*fp)(void) = &f1;
        fp();
fp = &f2;
        fp();
fp = &f3;
        fp();
}

---------------

void f1(void)
{
printf("func called!");
}

int main(void)
{
void (*fp)(void) = &func;
fp();
(*fp)() //bu şekilde de çağırılanabilinir, !!function pointer vurgusu için yapılır
}

-----------------

void func(int (*x)(int));

int f1(int);
int f2(int);
int f3(int);

int main(void)
{
func(f1); //&f1 bu şekildede olur
func(f2);
func(f3);
}

----------------

func(foo()) //foo'nun geri dönüş değeri ile func çağrılır

func(foo) //func'a foo'yu çağırmak

---------------
// aynı anda birçok işlev yaptırmak için kullanılınır

void foo(void)(*fp)(void))
{
printf("foo called\n");
fp();
printf("----------\n");
}

void f1(void)
{
printf("f1 called!");
}

void f2(void)
{
printf("f1 called!");
}

void f3(void)
{
printf("f1 called!");
}

int main(void)
{

foo(f1); //foo çağrılır ve f1 çağırıır
foo(f2); //foo çağrılır ve f2 çağırıır
foo(f3); //foo çağrılır ve f3 çağırıır
}

---------------

void printf_test(int(*fptest)(int))
{
for (int i = 0; i < 128; ++i){
if (fptest(i))
printf("%c", i);
}
printf("\n");
}

int main(void)
{
print_test(isupper);
print_test(islower);
print_test(isalpha);

}

-------------- 










