///////////////////////////////////////////////////////////////////////////////1. ders/////////////////////////////////////////////////////////

flag : 2 değerden birini tutan şeylere denir (true/false)

======================================================

T x;
int ival;

T x = expr;
int x = 10;

bir değişkeni initialize yapmak denir

=================================================
                            keywords
_Bool
signed
unsigned
char
short
int
long
float
double
-------------------------------------------------
char
signed char : işaretli char
unsigned char : işaretsiz char 
-------------------------------------------------
signed short int : işaretli kısa tamsayı
short int : default olarak signed kabul edilir
signed short
short
-----------------------------------------------------

signed int
int 
signed

---------------------------------------------

unsigned int
unsigned

--------------------------------------------------
unsigned short int
unsigned short
----------------------------------------------------

signed long int : işaretli kısa tamsayı
long int : default olarak signed kabul edilir
signed long
long
---------------------------------------------------

unsigned long int
unsigned long

---------------------------------------------------

signed long long int : işaretli kısa tamsayı
long long int : default olarak signed kabul edilir
signed long long
long long
---------------------------------------------------

unsigned long long int
unsigned long long

--------------------------------------------------------

float
-----------------------------
double
----------------------------
long double

=============================================================
                              Yazım kuralları

snake case : sözcüklerin arasına underscore karakterinin konulmasına denir  (figter_power)
camel case : sözcüklerin ilk harfini büyük yazmaya denir (figterPower)

!! türkçe isim asla verme
!! değişken isimlerini küçük harf ağırlıklı seç

===============================================================

kapsam(scope) : bir ismin kullanılacağı kod aralığına denir

file scope : bütün dosyada kullanılabilir
block scope : o blokta kullanılan scope'a denir


int main(){
int a                  //local variable
}
----------------------------------------
int a
int main(){          //global variable
}
---------------------------------------
int main(int a){    //formal paramtre
}


===================================================

, : comma

virgül 2 anlamda kullanılır

1-comma operator
while (x = func(), x > 10){ // buradavirgül operator olarak kullanılmıştır
}

2-comma separated
comma separated list : öğelerin birbiriyle ayrılmasını sağlar
int x,y,z  // burada virgül öğereli birbiirnden ayrımak için kullanılmıştır


=======================================================
storage duration (ömür)

static storage duration ( static storage class) : prgramın çalışması sırasında main çağrılmadan önce bellekte yeri belli olur, programın sonunana kadar hep aynı yerde olur yeri değişmez, 0 değeri ile başlar
a) global değişkenler
b) static anahtar sözcüğü ile tanımlanan yerel değişkneler
c)string literal

------------------------

automatic storage duration (automatic storage class) : programın akışı bir koda geldiğinde hayatları başlayan programın akışı o koddan çıktığında hayatları biten nesneler
void func(int x)
{
static int y; //static local variable
int z;//otomatik
}

----------------------------

dynamic storage

=========================================================

garbage value (çöp değer):
int main(void){
int X;
İNT Y = 10;
A = X + Y;
}

!!eğer otomatik ömürlü bir değişkene ilk değer vermez isek (onu initialize etmezsek) o değişken çöp değişkne ile başlar
!!bir değişjkeni çöp değeri ile kullnamak tanımsız davranıştır

int main(void){
int x;
x = 5; //statement(assignment) //isim bildirilmediği için bu declaration olmayan bir statetment, ifadenin sonuna ';' koyulması ilen olan statemnet'a expression statemanet denir
int x = 5; //ilk değer verme  burada '=' bir operatör değildir dilin bir parçasıdır
}

!! c dlinde statik ömürlü değişkenlere ilk değer veren ifadelerin (initializing expression) constant expression olmalı
!! otomatik ömürlü değişkenlere değer veirirken constant expression olmasına gerek yoktur


=================================================================

scope (kapsam)

bir ismin (idetifier) scope'u (kapsamı) o ismin legal olarak kullanılabilecği kod alanı / alanları

name lookup: derleyici kodu çözümlerken kodda kullanılan isimlerin hangi valığa eşit olduğunu anlamasına denir

!! name lookup başarısız olursa undeclared identifier hatası alınır

!! bir blok içinde bildirilen isimlerin scope'u bildirildiği noktadan ilgili bloğun kapanan küme parantezine kadar olan kod alanıdır

int main(){
if(1){
int x = 10;
}
x = 20; // burada hata olur parantez dışında kullanılmıştır.

!! eğer yerel düzeyde iki farklın varlığa aynı isim verilirse kapsamları farklı ise geçerlidir, aynı ise geçerisiz sayılır


//////////////////////////////////////////////////////////////////////////2. Ders//////////////////////////////////////////////////////////////////////////

fonskiyonlar (functions):

a) fonksiyonu tanımlamak (to define a function) (function defibition)
b) fonksiyonu çağırmak (to call a function) (function call)
c) fonksiyonu bildirmek (to declare a function) (function declaration)


bir fonksiyonun kendisini çağıran fonksiyona (koda) bir değer iletmesini sağlayan (en az) 3 mekanizma var
-return value
-int g
-ali ==> veli

-------------------------

//double = fonksiyonun geri dönüş değeri türü
// func fonskiyonun ismi
//( ) parametre parantezi
//( ) içine yazılan : parametre değişkeni veya paraemtere
// main block a function

double func(int x )
{
  //declarations
  //statements
}

!!geri dönüş yeri boş bırakılır ise c dili orayı int olarak kabul eder
-----------------------------------

void func(int x)
{

}

void : geri dönüş değeri iletilmiyecek ise void functions kullanılır

-örnek-
void func(int x){ 
           
double x = 3.2; //bu kodda syntax hatası olur çünkü scope içinde 1 isim 2 farklı varlığa verilemez 

}

------------------------------
static vs gloabal değişken:

!!eğer değişken static ömürlü olması gerekmiyor ise otomatik ömürlü yerel değişken yapın
!!eğer değişken static ömürlü olması gerekiyorsa global olarak değil static olarak yap global uzak dur
!!global değişkenler birtakım dezavantajları olan değişkenlerdir

!!bir isim (özellikle değişken isimlerinin) kapsamı mümkğn olduğu kadar daraltılmalı (scope leakage)

!!storage duration ve scope farklı kavramlardır birisi ömürünü söyler birisi o değişkenin kapsamını söyler

=============================================================

return statement

statemnet : c dilinin cümleleri

expression statement (ifade deyimi)
-----------------------------------
x =5;
void funv(void)
{
++a;
x = a; //bunların hepsi expression statement
y = x * 10;
foo(a, x);
}

compound statement (bileşik deyim) : bloklanmış deyime denir
----------------------------------
int main(void){
int x = 10;
if(x>10){
//statement     if bloğu içinde birden fazla statement olduğu için compound statement
//statement
//statement
//statement

}
}

null statement (boş statement)
---------------------------------
while(expr){
; // hiçbir şey yapılmaması istendiği zaman  ';' koyulur
}

control statement : 
-----------------
-akışı değiştirilebilen ifadelere denir
-önceden belirlenmeiş sentaksa sahiptir,
-en az bir keyword kullanılır

if statement
while statement
for statement
do while statement

switch statement
goto statement

break statement
continue statement
return statement : kodun çalışmasını durduran , geri dnüş mekanizması ile geri dönüş sağlayan deyime denir. iki farklı şekilde olur

-return;
sadece void function'da kullanılır
kodun belli bölümleri kullanılmak istendiği zaman kullanılmalı

void func(int x){
//statemnet
//statemnet
if ( x > 10){  //x >10 doluğu zaman diğer statement çalışmasın fonksiyonu sonlandır
return;
}
//statement;
}

-return ifade;
ifade yine sonlanıcak ancak ifadenin geri dönüş türü olarak iletilecek

return x * y *z; 
return 2;
return x;

void sum(int a, int b)
{
  int sum = a + b;
  return sum;
}
//iki şekilde de olabilir farkı yok
void sum(int a, int b)
{
  return a + b; // buna one liner(tek satır) kod denir
}

!! fonksiyon içinde fonksiyon tanımlanamaz ancak çağırabilinir
!! fonksiyon dışında fonksiyon tanımlanabilir ancak çağıralamaz











