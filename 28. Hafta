//////////////////////////////////////////////////// 1. Ders ////////////////////////////////////////////////


long ftell(FILE *);  //DOSYA KONUM GÖSTERİCİSİNN DEĞERİNİ GÖSTERİRİ

int main(void)
{
FILE* f = fopen("employees.dat", "rb");

if (!f) {
printf("hata\n"); return 1; }

printf("%ld\n", ftell(f));
fseek(f, 0L, SEEK_END);
printf("%ld\n", ftell(f) / (long)sizeof(Employee));
}
}

-------------------

//mülakatta sorulmuş

//             C                       C++

char *p = "mert"; //char[5]        const char[5]

p[0] = 'a';

//c de herhangi atamamub c++'da sentax hatası

-----------------

//geçen dersteki örneklere devam ediyoruz

void sort_records(const char* pfilename, int (*fp)(const void*, const void*))
{
FILE* f = fopen(pfilename, "rb+");
if (!f) {
fprintf(stderr, "dosya acilamadi\n");
exit("EXIT_FAILURE);
}

fseek(f, 0L, SEEK_END);
long file_lenght = ftell(f);
size_t nrec = (size_t)file_lenght / sizeof(Employee);

printf("file_lenght = %ld\n", file_lenght);

Employee*p = (Employee*)malloc((size_t)file_lenght);

if (!pd) {
fprintfstderr, "bellek yetersiz");
exit(EXIT_FAILURE);
}
rewind(f);
//fseek(f, 0L, SEEK_SET)
fread(pd, sizeof(*pd), nrec, f);

qsort(pd, nrec, sizeof(Employee), fp);
rewind(f); 
fwrite(pf, sizeof(Employee), nrec, f);

free(pd);
fclose(f);
}

int main()
{
sort_records("employees.dat", &cmp_employee_by_date); //tarihe göre sıralar
sort_records("employees.dat", &cmp_employee_by_name); //şimdi sıralama isme göre olur
print_records(employees.dat");
}


-------------------------

int fseek(FILE* f, long, int origin);

void rewind(FILE *);

long ftell(FILE *);

fsetpos

fgetpos

------------------------

int main(void)
{
// fsetpos sets the file pointer (file set position)
// fgetpos gets the file pointer (file get position)
//fpos_t

int fsetpos(FILE*, const fpos_t *);
int fgetpos(FILE* ,fpos_t *);


}

-------------------------

int main(void)
{
FILE*f = fopen("primes_large.dat", "rb");
if (!f) { printf("dosya acilamadi"); return 1; }
//code
fpos_t pos;
fgetpos(f, &pos);

printf("File pointer value is : %lld\n", pos);
fseek(f, 0L, SEEK_END);
fgetpos(f, &pos);
printf("File pointer value is : %lld\n", pos);
//...
fclose(f);

}

-----------------------------

int main(void)
{
FILE*f = fopen("primes_large.dat", "rb");
if (!f) { printf("dosya acilamadi"); return 1; }
//code
fpos_t pos = (fpos_t)(sizeof(int)) * 500'000;
fsetpos(f, &pos);

printf("File pointer value is : %lld\n", pos);
fseek(f, 0L, SEEK_END);
fgetpos(f, &pos);
printf("File pointer value is : %lld\n", pos);
//...
fclose(f);

}

-----------------------------

int feof(FILE *); //non zero return value indicates eof flag is set!, zero return value indicates eof flag is set!  
// eğer eof bayrağı set edilmiş ise yani feof işlevi değer döndürüyor ise tekrar okuma girişiminde bulunulabilmesi için
aşağıdaki işlemleriden birinin yapılması gerekir
file pointer set edilecek
 fseek
 rewind
 fsetpos

ferror
clearerr

Bir dosyadan okuma işlemi yapıldığı zaman;

eğer daha önceden dosyadan okuma yapılıp aşağıdaki nedenlerden bir başarısızlık oluşmuş ise
 - dosyadan okunacak byte kalmamış
 - bizim kontrolümüz dışında oluşan bir nedenden okuma başarısız oldu (işletim sistemi seviyesinde)

arka planda (biz doğrudan görmesek de) tutulan boolen değişkenler var. (bitsel seviyede)

eof flag/bit

-----------------------------

int main(void)
{
FILE*f = fopen("primes_large.dat", "rb");
if (!f) { printf("dosya acilamadi"); return 1; }

fseek(f, 0L, SEEK_END);

if (feof(f))
printf("evet dogru\n");
else 
printf("hayir yanlis\n");


int x = fgetc(f); //bu okuma basarisiz oldu
printf("x = %d\n, x); //x = -1
if (feof(f))
printf("evet dogru\n");
else 
printf("hayir yanlis\n");

fclose(f);
}


------------------------------

int feof(FILE *);
int ferror(FILE *);

standart input (standart giriş akımı)
standart pıtput (standart çıkış akımı)
standart error (standart hata akımı)

----------------------------

int main()
{
FILE* f = fopen("deneme.txt", "w");

fprintf(f, "necati ergin\n");
fprintf(stdout, "bugrahan serttas\n"); //standart outputa çıktı yapar
fputc('A', f);
fputs("\nAli Osman Gulcemal\n", stdout);
fclose(f);

}


--------------------------------


int main(void)
{
FILE* f = fopen("deneme.txt", "w");

randomize();

Employee emp;
for (int i = 0; i < 10; ++i) {
set_employee_random(&emp);
print_employee(f, &emp);
print_employee(stdout, &emp); //standart çıkışa yazar
}

fclose(f);
}


--------------------------------

int main(void)
{
FILE* f = fopen("deneme.txt", "w");

for (int i = 0; i < 10; ++i) {
fprintf(f, "%d\n", i);
fprintf(stdout, "%d\n", i); //ikiside ekrana yazar
fprintf(stderr, "%d\n", i); //ikiside ekrana yazar
}

fclose(f);
}

--------------------------------

neden stderr var?
kullanıcıyı bilgilendirme amaçlı kullanılabilir

--------------

int main(void)
{
int cnt = 0;

randomize();
while (cnt < 20) {
int x = rand();
if (isprime(x)) {
printf("%d ", x);
++cnt;
}
}

//normal olarak aşağıadli yazıını standart çıkış akımına degil standart hata akımına verilmesi gerekirdi

printf("bellek yetersiz... program sonlandiriliyor. devam etmek için tusa basin");
}


---------------------


int main(void)
{
int cnt = 0;

randomize();
while (cnt < 20) {
int x = rand();
if (isprime(x)) {
printf("%d ", x);
++cnt;
}
}

fprintf(stderr, "\nbellek yetersiz... program sonlandiriliyor. devam etmek için tusa basin");
}

------------------------------------------------

stdin : standart giriş akımının indisi

--------------

int main(void)
{
int x, y;

printf("iki sayi giriniz: ");
fscanf(stdin, "%d%d", &x, &y);

printf("x = %d\n", x);
printf("y = %d\n", y);
}


------------

!! std. fgets işlevinin stdin idetifier argümanı ile çağrılması

 
--------------

int main(void)
{
FILE* f = fopen("deneme.txt","r");

char str[1000];

fgets(str, 1000, f); 

fclose(f);

printf("yazi = |%s|", str);
}

---------------

int main(void)
{
printf("bir yazi girin: ");
char str[1000];

fgets(str, 1000, stdin); 

fclose(f);

printf("yazi = |%s|", str);
}

--------------

int main(void)
{
char name[100];

printf("isim girin: ");
fgets(name, 100, stdin);

if (!strcmp("bugrahan serttas", name)) {
printf("hos geldinşz bugrahan serttas, sizi vip'e alalım\n");
else {
printf("hos geldinşz bugrahan serttas);
}
}
}


!! doğru çalışmadı /n'dan dolayı

-------------------


int main(void)
{
char name[100];

printf("isim girin: ");
fgets(name, 100, stdin);

char* p;

if ((p = strchr(name, '\n')) != NULL) {
*p = '\0';
}

if (!strcmp("bugrahan serttas", name)) {
printf("hos geldinşz bugrahan serttas, sizi vip'e alalım\n");
else {
printf("hos geldinşz bugrahan serttas);
}
}

-----------------------------------

FILE* tmpfile(void); //dosya oluşturur, açtığı dosyayı yazma amaçlı açar, hiçbr dosyayı ezme imkanı yok dosyayı kapattığmızı zaman dosya silinecek

//aşağıdaki işlevi yapar aslında

int main(void)
{
char filename[L_tmpnam];

tmpnam(filename);

FILE* f = fopen(filename, "wb+");

fclose(f);
remove(filename);
}

----------------

int main(void)
{
// bu noktadda prgramın hem yazma hem de okuma amacli 
// kullanacagi bir dosyaya ihtiyacım var

FILE* f = tmpfile();

randomize();

for (int i = 0; i < 100; ++i) {
int x = rand();
fwrite(&x, sizeof x, 1, f);
}

rewind(f);

int ival;

while (fread(&ival ,sizeof(int), 1, f)) {
printf("%d\n", ival);
}

fclose(f);
}


--------------------------------

fflush : dosyayı flush eder, yazma amaçlı doyalar için kullanılmalı

kullanıldığı durumlar:

bufferin kapasitesinin  dolması durumunda
dosyanını kapatılması   - fclose
programın (normal terminate)
exit işlevine yapılan çağrı
tie (bağlama / bağlanma)

başka bir dosyada yapılan okuma yazma işlemi, farklı bir dosyanın buffer'ının flush edilmesini sağlayabiliyor

std. kütüphanenin fflush isimli fonksiyonun çağrılması ile 


-------------------------------

int main(void)
{
fflush(stdout); 
}

-----------------------------
fflush işlevine argüman olarak NULL pointer geçilmesi özel bir anlama gelir
bu durumda açık olan tüm dosyalar flush edilir

int main(void)
{
//

fflush(NULL);
}

========================================================================================

C99 ile dile eklenen değişiklikler
----------------------------------




























 




