/////////////////////////1. ders///////////////////////////////

standart scanf işlevi

printf ==> print format
scanf ==> print format

int scanf(const char *pfm, ...);
variadic'tir
call by reference
scanf nesneleirn adresleri ile çağrılmalı

propmt : programı kullanan kişilerin şunu yap anlamındaki ifadelere denir
buffer : bellek alanı

int main(void){

printf("bir giriş yapınız: "); //23.98ali
int x;

scanf("%d, &x); 
printf("x = %d\n" ,x);

double dval;

scanf("lf",&dval);
printf("dval = %f\n, dval); //0.98
//ali

char str[20]
scanf("%s", str);

printf("isim = %s\n", str);

}

!!scanf kulladığı karakterleri bufferda bekletiyor kullanmadığı karakterleri bufferde tutuyor

!! line-buffered : new line karakteri gelene kadar bekleyecek
!! scanf skip whitspace karakterleri geçer (boşık, enter)

dikkat! 

scanf işlevinin geri dönüş değeri 

a) buffer'da en az bir karakter var ise
    set ettiği alan sayısını alır
b) buffer boş ise 
    -1 değerini alır


int ==> %d
unsigned ==> %u
float ==> %d
double ==> %lf
long ==> %ld
long long ==> %llf

========================================

operatörler
-
terminoloji
(terimler)

operator

operand : operatörün işleme soktuğuna operatörün operandı denir

binary operator : 2 operand alır
--------------
a + b
a > b

unary operator: 1 operand alır
----- 
!x
++x

(the) ternary operator
---------------------
:
?


unary prefix
----------
!x

unary postfix
------------
x++

binary infix
----------
a % b 


constraint : operatörün kullanılması için başka kurallara da bakılması gerekir

L value
-------
x =
++
--

operandların belirli türlerden olması zorunluluğu
---------------------------------------
%

double d = 4.5;
d % 2 // bu işlem syntax hatası verir


operators generate values
operators yield values /işlemden elde edilen değer

side effect (yan etki) : operatörün opreandı olan nesnenin değerinin değiştirilmesi

x + y //side effect yok
!x //side effect yok

int ival = 10;
++ival //side effect var
 
assignment operators//side effect vardır
increment/decrement operatörleri //side effect vardır

operatör önceliği
----------------
priority of operator
predence of operator

!!operatör önceliği hangi işlemin fiizksel olarak daha önce yapılacığı değildir

order pf evaluaiton (hangi işlem daha önce yapılacak)

operatör öncelikleri
--------------------
1) () [] . ->
2) + - ! ~ & * ++ -- sizeof (type) //sağdan sola öncelik
3)* / %
4)+ - 
5)>> <<
x6)> < >= 
7) == !=
8) &
9) bitwise exor(^)
10)|
11)&&
12)||
13)? : //sağdan sola
14) = += -= *= /= %= //sağdan sola öncelik
15),


associativity (öncelik yönü)
left associativity
right associativity

aritmetic operators
------------------
+ - (sign operator)
* / % (multiple operators)
+ - (additive operators)
++
--

relational operaotrs-comparasion operators
--------------------
> >= < <=
== !=

logical operators
--------------------
!
&&
||

assignment operators
-------------------
= += -= /= %= >>= <<= &= ^= != 

bitwise operators
-----------------
~ 
<< >>
&
|
>>= <<= &= ^= !=


!!!işaretli tam sayı türlerinde taşma tanımsız davranıştır
!!!işaretsiz tam sayı türlerinde taşma olmaz

!!işaretin R value veya L value olduğunu anlamak için başına adres operatörü koy syntax hatası veririse yanlıştır
(a+b)& //r value

int main(void)
{
char c = 5;
//+c ifadesinin value category R value
//+c ifadesinin data type int
}

-------------------

++ increment
-- decrement

++x
y++
--x
x--

!!amaç arttırmak veya azaltmak ise ön ek veya son ek olması önemli değil

int main(void)
{
int x = 25;
int y = 67;

printf("%d\n", ++x);
printf("%d\n", y++);

printf("%d\n", x);
printf("%d\n", y);
}








