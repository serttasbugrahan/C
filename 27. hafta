////////////////////////////////////////////////////////////////////// 1. Ders //////////////////////////////////////////////////

Dosya işlemleri devam

//asay neco.txt

int fgetc(FILE*);

typedef struct {
int ch; //character code
int cnt;
}Data;

int mp_data(const void* vp1, const void* vp2)
{
if (((const Data *)vp2)->cnt > ((const Data*)vp1)->cnt
return -1;
}

int main(int argc, char **argv)
{
if (argc != 2) {
fprintf(stderr, "kullanim: <asay> <dosya ismi>\n");
return 1;
}

FILE* fs = fopen(argv[1], "r");
if (!fs) {
fprintf(stderr, "%s dosyasi acilamadi\n", argv[1]);
return 2;
}


Data ar[] = {
{'A', 0}, 
{'B', 0}, 
{'C', 0}, 
{'D', 0}, 
{'E', 0}, 
{'F', 0}, 
{'G', 0}, 
{'H', 0}, 
{'I', 0}, 
{'J', 0}, 
{'K', 0}, 
{'L', 0},
{'M', 0},
{'N', 0},
{'O', 0},
{'P', 0},
{'Q', 0},
{'R', 0},
{'S', 0},
{'T', 0},
{'U', 0},
{'V', 0},
{'W', 0},
{'X', 0},
{'Y', 0},
{'Z', 0},
};

int ch;

while ((ch = fgetc(fs)) != EOF) {
if (isalpha(ch)) {
ar[toupper(ch) - 'A'].cnt;
}
}

qsort(ar, 26, sizeof(Data), &cmp_data);

for (int i = 0; i < 26; ++i) {
printf("%c %d\n", ar[i].ch, ar[i].ch);
}
}

-----------------------------------------------
#include <stdio>

int fputc(int c, FILE*) //dosyaya yazma işlemi yapar

int main(void)
{
FILE* f = fopen("ziya.txt", "w"); //TEXT MODE
if (f == NULL) {
fprintf(stderr, "dosya olusturulamadi\n");
return 1;
}

for (int i = 0; i < 26; ++i) {
fputc(i, f);
}

fclose(f);
}

-----------------------

crtf murat.txt 14500 40 80

int get_random_char(void)
{
int ch;

while (!isalnum(ch = rand() % 128))
;
return ch;
}

int main(int argc, char **argv)
{
if (argc != 5) {
fprintf(stderr, "usage: <crtf> <file name> <No of lines> <min line len> <max line len>\n");
return 1;
}
FILE* f = fopen(argv[1], "w");
if (!f) {
fprintf(stderr, "cannot create file %s\n", argv[1]);
return 2;
}

int no_of_lines = atoi(argv[2]);
int min_len = atoi(argv[3]);
int max_len = atoi(argv[4]);

randomize();

for (int i = 0; i < no_of_lines; ++i) {
int len = get_random
}
}

-------------------------------------------------------------

Dosyaların text ya da binary modda açılması

"r" "rb" 
"r+" "rb+" "r+b"
"w" "wb" 
"w+" "wb+" "w+b"

Bir dosyayı tetx modundan okuyacaksak tetx modunda açıyoruz 
binary modda ise her zaman binary modda açıyoruz

!! Windows işleitm sisteminde
dosyanın text modunda açılması ile
dosyannı binary modda açılması arasında çok önemli 2 fark var

1. fark

dosyayı text modunda açarsak
newline karakteri
  2 ayrı byte olarak ele alınıyor
  13 10

dosyayı binary modda açarsak
newline karakteri
1 byte olarak ele alınıyor
10

int main(void)
{
FILE* f = fopen("necati", "w"); //text modunda açtık

if (!f) {
printf("dosya olusturulmadi\n");
return 1;
}

for (int i = 0; i < 100; ++i) {
fputc('\n', f); //100 byte beklerken 200 byte olur
}

fclose(f);
}

------------

int main(void)
{
FILE* f = fopen("necati", "wb"); //binary modunda açtık

if (!f) {
printf("dosya olusturulmadi\n");
return 1;
}

for (int i = 0; i < 100; ++i) {
fputc('\n', f); // 100 byte olur
}

fclose(f);
}

-----------------------------

Windows'ta bir dosyayı text modunda açarsak
dosyadan okunan 26 tam sayı değerini EOF olarak açacak

------------------------

C'de komut satırından çalıştırılan 
dosya kopyalanan bir programın yazılması

//kopyala ali.exe veli.exe

int main(int argc, char **argv)
{
if (argc != 3) {
fprintf(stderr,"kullanim:  <kpy> <kaynak dosya ismi> <hedef dosya ismi>\n");
return 1;
}

FILE *fs = fopen(argv[1], "rb");
if (!fs) {
fprintf(stderr,"%s dosyasi acilmiyor\n", argv[1]);
return 2;
}

FILE *fd = fopen(argv[2], "wb");
if (!fs) {
fprintf(stderr,"%s dosyasi olusturulamiyor\n", argv[2]);
return 3;
}

int c;
int byte_count = 0;

while ((c = fgetc(fs)) != EOF) {
fputc(c, fd);
++byte_count
}

fclose(fs);
fclose(fd);
}

---------------------------

bir dosyayı parçalara bölmek

ali.txt 11345 byte

bol ali.exe 500

parca001.par 500
parca002.par 500
...
parca0023.par 333

bir veli.txt //birleştirsin

-------

#define MAX_FILE_NAME_LEN     80

int main(int argc, char **argv)
{
if (argc != 3) {
fprintf(stderr, "kullanim: <bol> <doysa ismi> <byte sayisi>\n");
return 1;
}

char dest_file_name[MAX_FILE_NAME_LEN];
int byte_count = 0;
int chunk = atoi(argv[2]);
int file_count = 0;
int c;

FILE *fs = fopen(argv[1], "rb");
if (!fs) {
fprintf(stderr, %s dosyasi acilamadi\n" argv[0]);
return 2;
}

FILE* fd = NULL;

while ((c = fgetc(fs)) != EOF) {
if (fd == NULL) { //yeni dosya olusturucagiz
sprintf(dest_file_name, "parca%03d.par", file_count + 1);
fd = fopen(dest_file_name, "wb");
if (!fd) {
fprintf(stderr, "%s dosyasi olusuturulamadi\n", dest_file_name);
fclose(fs);
return 2;
}
++file_count;
}
fpuct(c, fd);
++byte_count;
if (byte_count % chunk == 0) {
flose(fd);
fd = NULL;
}
}

fclose(fs);
if (fd) 
fclose(fd);
printf("%d byte'lik %s dosyasi %d byte'lik %d parcaya bolundu\n", byte_count, argv[1], chunk, file_count);
}

-------------------------------------
//dosya silme
int remove(const char* p);

int main(void)
{
int result = remove("ziya.txt");

if (result) {
printf("dosya silinemedi\n");
}
}

------------------------
//dosya ismini değiştirme)

int rename(const char *pold_name, const char* p_new_name);

int main(void)
{
int result = rename("stdfunc.txt",functions.txt);

if (result) {
printf("dosya ismi değiştirilemedi\n");
}
}

------------------------

standart tmpnam fonksiyonu, temporary name'den uydurulmuş

öyle bşr dosya olsun ki o dosyayı oluşturuyor olmama karşın 
hiç bir dosyayı ezmiş olmayayım.

char* tmpnam(char *p);

int main(void)
{
char filename[L_tmpnam];

tmpnam(filename);

puts(filename);
}

---------------

int main(void)
{
printf("unique file name = %sa\n", tmpnam(NULL);
}

---------------

Bir dosyayı encrypt etmek

enc necati.jpeg 34785342 

int main(int arg, char **argv)
{
if (argc != 3) {
fprintf(stderr, "uasge: <enc> <filename> <key uint64>\n");
return 1;
}

unsigned long long key = strtoull(argv[2], NULL, 10);
srand((unsigned int)key);

char temp_name[L_tmpnam];
tmpnam(temp_name);

FILE* fs = fopen(argv[1], "rb");
if (!fs) {
fprintf(stderr, "file %s cannot be opened\n", argv[1]);
return 2;
}

FILE* fd = fopen(temp_name, "wrb");
if (!fd) {
fprintf(stderr, "cannot creaye temporary file\n");
return 3;
}

int c;

while ((c = fgetc(fs)) != EOF) {
fputc(c ^ rand(), fd);
}

fclose(fs);
fclose(fd);

if (remove(argv[1])) {
printf("file %s cannot be removed\n", argv[1]);
return 4;
}

if (rename(temp_name, argv[1])) {
printf("file cannot be renamed\n");
return 5;
}
}

-----------------------

fopen
fclose
  fcloseall
fgetc
fputc
remove
rename
tmpnam

printf/const char *pfm, ...)
fprintf(FILE *f, const har *fpm);
sprintf
snprintf
snprintf
fprintf

----------------

int main(void)
{
FILE*f = fopen("kareler.txt", "w");

for (int i = 0; i < 1000; ++i) {
fprintf(f, "%d *%d = %d\n", i,i,i * i);
}
}

---------------------


ilk 1 milyon asal sayisi
ismi asal.txt olan dosyaya
formatli olarak yazınız

#include "nutility.h"

int main(void)
{
FILE* f = fopen("asal.txt", "w");
if (f == NULL) {
fprintf(stderr, "dosya olusturulamadi\n");
return 1;
}

int prime_count = 0;
int x = 2;

while (prime_count < NPRIMES) {
if (isprime(x)) {
if (prime_count && prime_count % 10 == 0)
fprintf(f, "\n");
fprintf(f, "%d ", x);
++prime_count;
}
++x;
}
fclose(f);
}

---------------------

int scanf(const char *pfm, ...)
int sscanf(const char *pbuf, const char *pfm, ...);
int fscanf(FILE *, const char *pfm, ...);

---------------------

int main(void)
{
FILE* fs = fopen("kayit.txt", "r");
if (fs == NULL) {
fprintf(stderr, "dosya acilamadi\n");
return 1;
}

int no;
char name[40];
char surname[40];
char town[40];
int grade;

printf("notu ve sehri girin: ");
scanf("%d%s", &grade_entry, town_entry);

while (fscanf(fs, "%d%s%s%s%d", &no, name, surname, town, &grade= != EOF) {
if (ival == grade)
printf("%-8d%-16s%-20s%-16s%d\n", no,name, surname, town, grade);
}
}


//////////////////////////////////////////////////////////////////

fprintf // bir dosyaya formatlı olarak yazma işlemi yapan fonksiyon

fscanf // dosyadan formatlı okuma işlemi yapan fonksiyon

printf //standart outputa yazar

sprintf //beleğe yazar

fprintf // dosyaya yazar

scanf // standart inputtan aldığı değişkenleri set eder, 

sscanf // bellekten aldığı değişkenleri set eder

fscanf // dosyadan aldığı değişkenleri set eder

------------------------

!! bütün sccanf değişkenlerinşn geri dönüş değeri int

int fscanf(FILE*, const char*p, ...);

int main()
{
char str[] = "%d%d%d";
int x,y,z;

printf("3 sayi giriniz: ");
scanf(str, &x, &y, &z);

printf("x =%d\n", x);
printf("y =%d\n", y);
printf("z =%d\n", z);
}

---------------------

#include <stdio.h>

int main(void)
{
FILE* f = fopen("input.txt", "r");
if (!f) {
fprintf(stderr, "dosya acilamadi\n");
return 1;
}

int x;
int retval;
while ((retval = fscanf(f, "%d", &x) != EOF) {
if (retval == 1)
{
printf("%d\n", x);
_getch();
}
else {
fscanf(f, "%s", buffer);
printf("%s gecerli bir tam sayi degil\n", buffer);
}
}
}

---------------------------------

fgets //bir dosaydan satır satır okuma işlemi yapabiliriz

int main(void)
{
char* fgets(char* ,int max_count, FILE *f);
}

----------------

#define SIZE 1000

int main(void)
{
char file_name[100];

printf("dosya ismi giriniz: ");
scanf("%s", file_name);
FILE* fs = fopen(file_name, "r");
if (!fs) {
fprintf(stderr, "dosya acilamadi\n");
return 1;
}

char buffer[BUFFER_SIZE];
char* p;

while (fgets(buffer, BUFFER_SIZE, fs)) {
printf("%s", buffer);
if ((p = strchr(buffer, '\n')) != NULL) {
*p = '\n';
_strrev(buffer); //bufferdaki yazıyı ters çevirir, standart değildir  
fprintf(fd, "%s\n", buffer);
}
}
fclose(fs);
fclose(fd);
}


-------------------------

#define BUFFER_SIZE 200

int main(void)
{
FILE* f = fopen("deneme.txt",  "w");
//kontrol

for(int i = 0; i < 100; ++i) {
//fprintf(f, "%s %s %s\n", rname(), rsurname(), rtown(); //bu şekilde de yapışabilirdi

fputs(rname(), f);
fputc(' ', f);
fputs(rsurname(), f);
fputc('\n', f);
}
}


---------------------------------------

standart fread ve fwrite işlemleri

bellekten dosyaya, dosyadan belleğe istediğimiz kadar byte transferi yapabiliyourz

size_t fwrite(const void *vp, size_t sz, size_t n, FILE *);
size_t fwread(void *vp, size_t sz, size_t n, FILE *);


--------------------------

//ismi primeslarge.dat olan
//bir dosyaya ilk 1.000.000 asal sayiyi formatsız olarak yaziniz.
//olusan dosyanın buyuklugunun sizeof(int) * 100000 oldugunu gorunuz

#define BUFFER_SIZE 200

int main(void)
{
FILE *f = fopen("necati.dat", "wb");
if (!f) {
fprintf(stderr, "primes_large.dat dosyasi olusturulmadi");
return 1;
}

int x = 2;
int prime_count = 0;

while (prime_count < 1'000'000) {
if (isprime(x)) {
fwrite(&x, sizeof(int), 1, f);
++prime_count;
}
++x;
}

fclose(f);
}
----------------------

Formatlı Okuma-Yazma
Formatlı okuma-yazma işlemleri, veri türlerini belirli bir biçimde işleyen fonksiyonlar aracılığıyla gerçekleştirilir. Bu fonksiyonlar, okunan veya yazılan verilerin formatını kontrol eder ve düzenler.

Formatlı Okuma: scanf fonksiyonu kullanılır. Bu fonksiyon, belirli bir format belirterek kullanıcıdan veri okur. Örneğin:

int age;
printf("Enter your age: ");
scanf("%d", &age);

Burada %d, bir tamsayıyı temsil eden format belirleyicisidir.

Formatlı Yazma: printf fonksiyonu kullanılır. Bu fonksiyon, belirli bir format kullanarak ekrana veri yazar. Örneğin:

int age = 25;
printf("Your age is %d\n", age);

Burada %d, age değişkeninin değerini tamsayı formatında ekrana yazdırır.

Formatsız Okuma-Yazma
Formatsız okuma-yazma işlemleri ise, verilerin formatını dikkate almadan doğrudan okuma ve yazma işlemleri yapar.

Formatsız Okuma: getchar ve gets gibi fonksiyonlar kullanılır. Bu fonksiyonlar, veriyi olduğu gibi okur. Örneğin:

char c;
printf("Enter a character: ");
c = getchar();

Bu örnekte getchar, kullanıcının girdiği karakteri okur.

Formatsız Yazma: putchar ve puts gibi fonksiyonlar kullanılır. Bu fonksiyonlar, veriyi olduğu gibi yazar. Örneğin:

char c = 'A';
putchar(c);

Bu örnekte putchar, c karakterini ekrana yazar.

Özetle, formatlı okuma-yazma işlemleri veri türlerini ve formatlarını dikkate alarak işlerken, formatsız okuma-yazma işlemleri veriyi olduğu gibi doğrudan işler.

-----------------------

//ismi employees.dat olan bir dosya oluşturun 
//bu dosyaya 100'000 tane rasgele oluşturduğumuz employee nesnesini
//formatsiz olarak (fwrite işlevi ile) yazınız

int main(void)
{
randomize();
Employee emp;

printf("sizeof(Employee) = %zu\n", sizeof(Employee));

FILE* f = fopen(emoloyees.dat", "wb");
if (f == NULL) {
fprintf(stderr, "dosya olusturulamadi\n");
return 1;
}

for (int i = 0; i < 10; ++i) {
set_employee_random(&emp);
fwrite(&emp, sizeof(emp), 1, 
}
}


---------------------

int main(void)
{
FILE *fs = fopen("primes_small.dat", "rb");
if (!f) {
fprintf(stderr, "dosya acilamadi\n");
return 1;
}

int x;

FILE *fd = fopen("primes_small.txt", "w");
if (!f) {
fprintf(stderr, "dosya olusturulamadi\n");
return 1;
}

while (fread(&x, sizeof(int), 1, f)) {
printf("%d\n", x);
}

fclose(fs);
fclose(fd);
}

-------------------------

//bu sayıları bir diziye okuyabilir miyiz ? evet

#define SIZE 1200

int main(void)
{
FILE* fs = fopen("primes_small.dat", "rb");
if (!fs) {
fprintf(stderr, "dosya acilamadi\n");
return 1;
}

int a[SIZE];
size_t n;

while ((n = fread(a, sizeof(int), SIZE, fs)) != 0 {
print_array(a, n)
}

fclose(fs);
}

-------------------

#define SIZE 1200

int main(void)
{
FILE* fs = fopen("employees.dat", "rb");
if (!fs) {
fprintf(stderr, "dosya acilamadi\n");
return 1;
}

Employee emp;

printf("sehri girin: ");
char town_entr[100];
scanf("%s", town_entry);

while ((n = fread(emp, sizeof(emp), 1, fs)){
if (!strcmp(town_entry, emp.town)) //sadece girilen şehrin employeelerini yazar
print_array(&emp);
}

fclose(fs);
}

-----------------------

komut satırından calıştırılan daha once yazdığımız 
dosya kopyalama programını
bu kez
fread ve fwrite işlevlerini kullanarak gerçekleştirin

fread ile okuyup fwrite ile yazacağız


#define BUFFER_SIZE 512

int main(int argc, char **argv)
{
if (argc != 3) {
fprintf(stderr, "kullanim: <kopyala> <kaynak dosya ismi> <hedef dosya ismi>\n");
return 1;
}

FILE* fs = fopen(argv[1], "rb");
if (!fs) {
fprintf(stderr, "%s dosyasi acilamadi\n", argv[1]);
return 2;
}

FILE* fd = fopen(argv[2], "wb");
if (!fd) {
fprintf(stderr, "%s dosyasi olusturulamadi\n", argv[2]);
return 3;
}

char buf[BUFFER_SIZE]
size_t read_bytes;
int file_size = 0;

while ((read_bytes = fread(buf, 1, BUFFER_SIZE, fs)) != 0) {
file_size += read_bytes;
fwrite(buf, 1, read_bytes);
}

fclose(fs);
fclose(fd);

printf("%d byte'lik %s dosyasinin %s isimli kopyasi olusturuldu
}


---------------------------------------

dosya konum göstericisi (file pointer) ile ilgili fonksiyonlar

fseek //dosya konum
rewind
ftell
fsetpos
fgetpos


file pointer dosyanın istediğimiz yerine yazma işlemi yapabilmemizi sağlar

----------------------

int fseek(FILE *f, long n, int origin);

1. parametre
------------

3. çeşit konumlandırma imkanı verir
dosya başı mı (0)
dosya başı mı (1)
dosya en son değerinden mi (2)

0,1,2 yerine makro kullanılır

SEEK_SET 0
SEEK_CUR 1
SEEK_END 2

int main(int argc, char **argv)
{
SEEK_CUR

}

2. paramete
-----------
Pozitif mi negatif mi bir konumlandırma yapılacağını seçeriz



fseek(f, 0L, SEEK_SET) //dosya konum göstericisini dosyasnın başına alır

yukarıdaki işi yapan fonksiyon vardır

void rewind(FILE *);


fseek(f, 400L, SEEK_SET) //dosya konum göstericisini dosyasnın başından itibaren 400. byte'a al

fseek(f, 0L, SEEK_END) //dosya konum gösterici dosyanın sonuna al demek

fseek(f, -40, SEEK_CUR)

En son yapılan işlem okuma ise ondan sonra yazma işlemi yapacaksak
en son yapılan işlem yazma işlemi ise ondan sonra okuma işlemi yapacak isek

mutlaka file pointer konumlandırılmali


int main(void)
{
FILE*f = fopen("primes.dat", "rb");
if (f == NULL) {
fprintf(stderr,  "dosya acilamadi\n");
return 1;
}
printf("kacinci asal sayi: ");
int n;
scanf("%d", &n);
fseek(f, (n - 1) * (long)sizeof(int), SEEK_SET);
int ival;

fread(&ival, sizeof(int), 1, f);
printf("d. asal sayi %d\n", n, ival);

fclose(f);
}

-----------------


int myrand() //0 ile 1 milyon arasında rastgele sayi üretir
{
char str[20];
for (int i = 0; i < 6; ++i) {
str[i] = '0' + rand() % 10;
}
str[6] = '\n';
return atoi(str);
}

int main(void)
{
randomize();

FILE*f = fopen("primes.dat", "rb");
if (f == NULL) {
fprintf(stderr,  "dosya acilamadi\n");
return 1;
}

for (int i = 0; i < 100; ++i) {
int n = myrand();
fseek(f, (n - 1)*(long)sizeof(int), SEEK_SET);
fread(&x, sizeof(x), 1, f);
printf("%d. asal sayi %d\n", n, x); 
}
}

-------------------

primes_large.dat dosyasinda ilk 1 milyon asal sayi bulunmaktadir
bu dosyadaki asl sayilardan palindrom olanlari formatli olarak palindrom_priimes.txt 
isimli dosyaya yaziniz


---------------------

int main()
{
FILE* f = fopen("employees.dat", "rb");
if (f == NULL) {
fprintf(stderr,  "dosya acilamadi\n");
return 1;
}

Employee emp;
int n;

printf("kacinci employee: ");
sccanf("%d", &n);

fseek(f, (n- 1) * (long)sizeof(Employee), SEEK_SET);
frad(&emp, sizeof(emp), 1, f);
print_employee(&emp);

fclose(f);

}

-------------------

fread , fseek kullanarak basit bir database oluşturulalım

void print_employees(const char *pfilename)
{
FILE *f = fopen(pfilename, "rb");
if (!f) {
fprintf(stderr, %s dosyasi acilamadi\n", pfilename);
exit(EXIT_FAILURE);
}
Employee emp;

while (fread(&emp, sizeof emp, 1, f)) {
if (!strcmp(emp.mname, pname))
print_employee(&emp);
}
fclose(f);
}
}

void print_name_list(const char *pfilename, const char *pname)
{
FILE *f = fopen(pfilename, "rb");
if (!f) {
fprintf(stderr, %s dosyasi acilamadi\n", pfilename);
exit(EXIT_FAILURE);
}
Employee emp;

while (fread(&emp, sizeof emp, 1, f)) {
print_employee(&emp);
}
fclose(f);
}
}

void rename_employees(const char* pfilename, const char *p_oldname, const char* p_newname) //bir dosyadan hem okuma hem yazma işlemi yapılacak
{
FILE* f = fopen(pfilename, "rb+");
if (!f) {
fprintf(stderr, %s dosyasi acilamadi\n", pfilename);
exit(EXIT_FAILURE);
}
Employee emp;
int replace_cnt = 0;
while (fread(&emp, sizeof emp, 1, f)) {
if (!strcmp(emp.mname, p_oldname)) {
strcpy(emn.mname, p_newname);
fseek(f, -(long)sizeof(emp), SEEK_CUR);
fwrite(&emp, sizeof emp, 1, f);
fseek(f,0L, SEEK_CUR);
++replace_cnt;
}
}
fclose(f);
printf("toplam %d isim degisikligi yapildi\n" ,replace_cnt);
}

void delete_records(const char* pfilename, int month_day) //dosyadan herhangi bir şeu silemeyiz
{
FILE*fs = fopen(pfilename, "rb");
if (!fs) {
fprintf(stderr, "%s dosyasi acilamadi\n", pfilename);
exit(EXIT_FAILURE);
}

char temp_file_name[L_tmpnam];
tmpnam(temp_file_name);

FILE* fs = fopen(pfilename, "rb");
if (!fs) {
fprintf(stderr, "gecici dosya olusturulamadi\n");
exit(EXIT_FAILURE);
}

Employee emp;

while (fread(&emp, sizeof emp, 1, fs)) {
if (emp.mdate.md !0 month_day) {
fwrite(&emp, sizeof emp, 1, fd);
}
}

fclose(fs);
fclose(fd);

if (remove(pfilename)) {
fprintf("dosya silinemedi\n");
exit(EXIT_FAILURE);
}

if (rename(temp_file_name, pfilename)) {
fprintf(stderr, "dosya ismi degistirilemedi\n");
exit(EXIT_FAILURE);
}
}

void add_random_record(const char* pfilename, int n)
{
Employee emp

FILE*f = fopen(pfilename, "ab");
if (!f) {
fprintf(stderr, "%s dosyasi acilamadi\n", pfilename);
exit(EXIT_FAILURE);
}
for (int i = 0; i < n; ++i) {
set_employee_random(&emp);
fwrite(&emp, sizeof(emp), 1, f);
}
fclose(f);
}

void sort_records(const char* pfilename, int (*fp)(const void*, const void*))
{
FILE* f = fopen(pfilename, "rb+");
if (!f) {
fprintf(stderr, "dosya acilamadi\n");
exit(EXIT_FAILURE);
}
}

int main()
{
//print_list("employees.dat");
//rename_employees("employees.dat", "ahmet", "GEORGE");
//print_name_list("employees.dat", "ahmet");

add_random_record("employees.dat", 10);
}





















