/////////////////////////////////////////////////////////////////////1. Ders////////////////////////////////////////////////////////////////

assignmnet operators : 
----------------------

!! 
-c ve c++ 'da atama operatörleri değer üretir 
-bu değer nesneye atanan değerdir

x == y //karşılaştırma operatörü, 1 veya 0 olur
x = y //atama operatörü 

x = y = z = t = expr; //zincirleme idiomu, birden fazla değer atanıcak ise bötle kullanılabilir

if (lval == rval)
if (x == 5) //aynı sonuçtur burada hata yapma olasılığı daha fazladır
if (5 == x)//bu tercih edilir

!!c dlinde atama op. oluşturulan ifadelerin değer kategorisi R value
!!c++ dilinde atama op. ile oluşturulan ifadelerin değer kategorisi L value

x = x + 6; 
    x += 6; //bu operatörleri tercih et

x = x - 6;
    x -= 6;

x = x * 6;
    x *= 6;

x = x / 6;
    x /= 6;


int main(void){
x = y == z;
if (y == z)
x = 1;
else x = 0;
}

------------------------------

tanımsız davranış

undefined behavior : kod hata vermez ama ilerde sıkıntı yaratabilir

x /= y;
if (y == 0)
printf("hello world");

sequence point (yan etki noktası):

code ==> side effect

----------secuence point

burada üstteki kodun oluşturduğu yan etkinin gerçekleşmiş olduğuna güvenerek kod yazabilirim


!!eğer bir ifade bir nesne üstünde yan etki oluşturuyor ise fakat bu nesneyi bir sequence point olmadan tekrar kullnıyorsa tanımsız davranış olur

y = x++ + x;

C dilinde sequence point oluşturan yerler : 

int x = 30, y = x + 5, z = x + y; //burada problem yok
printf("z = %d\n",z);

int main(void)
{
int x = 10;

if(++x > 10){
printf("%d\n",x); // sequnece point var
}
}

- ilk değer veröe listesi
-if parantezi içindeli ifade
-while parantezi içindeki iafde
- do while içindeki ifade
-for(exp;exp2;exp3)


!! aşağıda 4 operator sequence point oluşturur
exp1 && exp2
exp1 || exp2
exp1 ? exp2 : exp3
comma operator

int main(void)
{
int x = 10;
int y = 20;

y = (x = 8) + x; //sequnece point olmadan x (yan etkisi var)'in değeri tekrar kullanılır
}

----------------------------------------

comma operator (virgül operatörü)

!!her virgül operatör değildir
!!virgül  bir ifade içinde kullanılıyorsa operatördür

int main(void)
{
int x = 5, y = 10, z = 899;
x++, y = x + 1, z = x + y 
//virgül operatör sequence point oluşturur solundaki ifade gerçekleştikten sonra diğer ifade yapılacak

}

int main(void)
{
int x = 5, y = 10, z = 899;
temp = x;
x = y;
y = temp;
}

!!virgül operatörü de değer üretir ürettiği değer sağ operandını değeridir

int main(void)
{
int z;
z = (1,2,3,4,5);
printf("%d",z);//5 değeri çıkar
}

int main(void)
{
int x = 6, y = 10, z = 899;
if ( x > 5)
++y; //burada sadece y değerini arttırır (block)
++z;

if ( x > 5){
++y; //burada y ve z değerini arttırır 
++z;
}

if ( x > 5)
++y, ++z;; //her ikiside artar

}

int main(void)
{
double dval = 3.4;

if (dval > 2,0)
printf("doğru\n"); //yanlış kısmına girer
else
printf("yanli\n");
}

3.4 // dval
3,4 // int ve değeri 4


!!ifadedeki virgül ayıraç ise ancak operatör virgül olması isteniyorsa ifadeyi parantez içine alın

öncelik paarntezi
(x + 5)

//obfuscate :kodun okumasını zorlaştırma amacıyla yapılır. anlam değişmez

        C      C++
(x,y)   R       L
++x     R       L
--x     R       L
a = 5   R       L

int getchar(void); : standart input buffer'dan tek bir karakter alır kod numarasını döndürür

int main(void)
{
printf("bir giris yapin: ");
int ch = getchar(); //BA345\n
printf("ch = %d\n", ch); //65
}


int main(void)
{
int x;
printf("bir tamsayi girin: "); //56492
while ((ch = getchar()) != '\n'){
sum += ch - '0';
}
if(sum % 3 == 0)
printf("evet 3'e tam bölünür\n");
}else
printf("hayır 3'e tam bolunmez\n");
}

int main(void)
{
int x;
printf("negatif olmayan tam sayı girin: ");
x = 0;
while((c = getchar() != '\n'){ //bu algoritma scanf ile aynı işlemi yapar
x = x * 10 + c -'0';
}
printf("girdğiniz tam sayi = %d\n");
}

 !!scanf ve getchar işlemleri aynı buffer'ı paylaşır

1. getchar() line-buffered bir giris fonksiyonu
2. getchar() echo veren bir fonksiyon

int main(void)
{
printf("evet ise (e) hayir mi (h) ");
int c = getchar()
if(c == 'e')
printf("evet dediniz\n");
else if(c == 'h')
printf("hayır dediniz\n");
}
}

int getchar(void); //newline istiyor echo
int _getch(void); //newline istemiyor echo vermiyor
int _getche(void); //newline istemiyor echo veriyor

////////////////////////////////////////////////////////2. Ders///////////////////////////////////////////

control statement (kontrol deyimleri)
-------------------------------------

-önceden belirlemmiş bir sentaksa sahipler
-en az bir anahtar sözcük içeriyolar
-programın akış yönü söz sahibi olan deyimler

control statement :

if statement

while statement %24 //for ve while aynı amaçla kullanılır özel kullanım alanaları bulunmaz. Birini seçip kod yazılabilir 
do while statement %1
for  statement %75

 break statement
 continue statement
 return statement

switch statement
goto statement


if statement  
-------------
expr içi zero'mu noon-zero'mu ona bakılır

if (expr)
    statement;

!!lojik ifade beklenen yerlerde void türden bir ifade kullanılamaz

int main(void)
{
if(1)
printf("bugrahan serttas");

}

conditional expression : if ifadesi içindeki deyim
!!if içi dolu olmalı
!!if içinde statement olamaz (x++)
!!if içinde void olamaz

if (x != 0)
 a++;

if(x) //yukarıdaki ile aynı anlama gelir (non zero)
 a++;

if(isprime == 0) //aynı anlama gelir
if(!isprime)


int foo(void)
int main(void)
{
int x;
if (x = foo(), x > 10) //virgül operatörü solundaki ifadeyi sağına eşitler
}


int foo(void)
{
printf("foo is called!\n");
return 0;
}

int main(void)
{
if (foo){
printf("true\n"); //ekranda sadece true yazar
}
if (foo()){
printf("true\n"); //ekranda foo is called yazar
}
}

if(foo()) //foo fonksiyonu çağrılır, doğru veya yanlış foo() ya göre yapılır
if(foo) //foo fonksiyonu çağrılmaz //bu ifade always true 

if (x > 20)
++a; ++b; //sadece a artar if değimi içindeki ilk ifade ele alınır
if (x > 20){
++a; ++b; //a ve b artar bloklamadan doyalı
}

null statement : eğer bir ifade olmadan sadece ';' olursa denir, hiçbir şey yapılmasın demektir

if(expr){
; //bir şey yapılmak istenmiyorsa boş bırakılamaz ';' koyulur
}

! ; {} //null statement yerine içi boş blok koyyulabilir

yanlış kısmı olan if deyimi :
----------------------
int main(void)
{
printf("bir tamsayi girin: ");
scanf("%d", &x);

if (x > 10)
foo();
else
bar();
}


dangling else : 
if (x > 10)
    if (y > 20)
        ++a;

if (x > 10 && y > 20)
    ++a;


if (exp_1)
state_a
else if (exp_2)
state_b
else if (exp_3)
state_c
else
state_d


--------------------------

test fonksiyonları (test function, query function, predicate) :

int isprrime(int ival);

fonksiyonun geri dönüş değeri non-zero ise ==> true
fonksiyonun geri dönüş değeri zero ise ==> false

-------------------------------------------

<ctype.h>

int isupper(int c); //buyuk harf mi
int islower(int c); //kucuk harf mi
int isalpha(int c); //harf mi
int isdigit(int c); //rakam karakteri mi
int isalnum(int c); //rakam ya da harf karakterimi
int isxdigit(int c); //hex karakter mi 0123456..ABCD..
int ispunct(int c); //kontrol karakteri olmayan alfanumerik olmayan karakteri
int isspace(int c); //whitespace karakteri mi
int isblank(int c); //yatay tab ya da space
int iscontrol(int c); //kontrol karakter mi
int isprint(int c); //printable karakter mi
int isgraph(int c); //printable karakter mi


int main(void)
{
int ch;
printf("bir karakter girin: ");
ch = getchar();

if(isdigit(ch))
printf("evet rakam karakteri\n");
else
printf("hayir buyuk harf karaketi degil\n");



}







