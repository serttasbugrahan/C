//////////////////////////////////////////////////////////////1. Ders////////////////////////////////////////////////////

type qualifiers :
-----------------
const 
volatile
restrict

const :
const correctness

const tekrarı :
-------------
static const int primes[] = { //dizi değişmiycek ve programın sonuna kadar bellekte kalıcak
2,3,4,2,4,,2,3,3,1,,2,13
2,3,3,2,,3,3,2,23,2,21,23
12,,3,34,,6,78,76,6,4,55
};
------------

!!const nesneyi değiştirmek tanımsız davranıştır

------------

global alanda static kullanılmasının bambaşka bir anlamı vardır, dış bağlantıya açılamaz demektir,

static int g = 10; //bu değişken sadece bu dosyada aktif olacak

-----------

!! const opt. arttırabilir

-----------

global const değişkenler c++ dilinde internal linkage

-----------



void func()
{
const int x = 10;
x = 20;
}

------------
const T* ==> T //bunu kesinlikle yapma (const nesneyi örtülü dönüşüm yapma)
-------------

int * foo(int *);
const int * func(void); //salt erişim amaçlı kullanılır

------------
ziya.h
void func(const int x); //const kullanma

ziya.c
#include "ziya.h"
void func(const int x) //const kullanma
{

}
-----------
typedef int* IPTR;

int main(void)
{
int x = 10;
const IPTR p = &x;
//const int * p = &x; //yukarıdaki bildirim bu anlama gelmiyor
int * const p = &x; //bu anlama geliyor
}
------------------------------

volatile : derleyicinin bir değişkene optimizasyon yapmamasını söyler
derleyici dikkat et x değişkeni program dışı kaynaklar tarafından değiştirilme potansiyelinde
sen bunu bilmessen ben x değişkenini ifadeler içinde kullandığımda optimizasyon

volatile int x = 10;

int main(void)
{
a = x + 5;
b = x * 7;
m = x * x;
}

----------

volatile int flag = 1;

int main(void)
{
while (flag){
///
}
}

-----------

int * volatile ptr = adres; //burada volatile const gibi davranır

-------------------------------
C99
restrict: derleyici daha iyi opt. yapabilsin diye kullanılır

//p1'in gösterdiği nesneyi p1 dışında gösteren yok
//bu iki pointer değişkenin aynı nesneyi gösteriyor olma ihtimali yok
// pointer aliasing  
//eğer derleyici aşağıdaki pointer'ların aynı nesneyi göstermediğini bilirse belirli opt. yapabiliyor

void func(int * restrict p1, int * restrict p2)
{
*p1 = *p2 + 5;
*p1 = *p2 * 3;

}

!!restirct pointerlara aynı nesnenin adreslerini geçmek tanımsız davranıştır

========================================

user-defined types

user-defined type oluşturmaya yönelik 3 tane araç seti var:
1-struct (structures) (yapı)
2-union (unions) (birlikler)
3-enum (enuma) (numaralandırma) : hem user-defined type hem integer type

===============================

structures:
----------

Matrix'e structure tag (yapı etiketi) denir. olmasada legaldir genelde koyarız
struct Matrix {
//member (eleman)
int x;
int x,y,z; //bu şekilde kullanılabilinir

//bu yapıları alabilir
int x,y;
double dval;
int * p;
char str[100];

//sınıfların elemanları fonksiyon olamaz c++ da olabilir
void func();

};

---------
!! struct data türünün x'i ve y'si vardır, struct Data mydata

struct Data {
int x;
};

int main(void)
{
struct Data mydata;

printf("sizeof(struct Data) = %zu\n", sizeof(struct Data));
printf("sizeof(mydata) = %zu\n", sizeof(mydata));
}

----------
yapının operatörlerine 'member selection operators' denir. bu operatörler ile erişilir

. dot operator
-> arrow operator

----------

struct Data{
double dval;
int x, y;
};

int main(void)
{
struct Data mydata;
mydata.dval; //yapı nesnesine erişmek için kullanılır

mydata.x++;
++mydata.x
!mydata.x
}

----------

struct Data {
double dval;
int x, y;
};

struct Data gdata;  //statik ömürlü olduğu için değerleri 0 ile başlayacak
//önceki konularda geçerli olan konular burada da geçerli (global, statik, const)

void func(void)
{
struct Data x; //garbage ile başlar (otomatik olduğu için, diğer kurllar geçerli)
}

---------

struct Data {
double data;
int x, y;
};

int main(void)
{
struct data data; //legal ama karmaşık
data.data = 10; //legal ama karmaşık
}

------

struct Data {
int x,y;
int a
double d;
};

int main(void)
{
struct Data mydata = {10,20,3.4}; //değer ver, içi boş bırakılamaz
struct Data mydata = {0}; //bütün değerler 0 olur.

printf("mydata.x = %d\n", mydata.x);
printf("mydata.y = %d\n", mydata.y);
printf("mydata.d = %d\n", mydata.d);

}

----------

struct Data {
double dval;
int ar[4];
int x;
};

int main(void)
{
struct Data mydata = {
2.3,
{1,3}, //arrray'de parantez kullan
12
};
}

----

struct Data {
double dval;
int ar[4][3];
int x;
};

struct Nec{
int a;
struct Data dx;
};

int main(void)
{
struct Data mydata = {
10, //struct nec'e verilen değer
{{{1,1,1},{2,2,2},{3,3,3}}, //struct data'ya verilen ilk değer
2.3,
}
}

-----------

struct Data {
double dval;
int ar[20];
double dval;
int x,y;
};

int main(void)
{
struct Data mydata = {
.dval = 2.3,
.x = 20,
.ar = {[3] = 5, [7] = 9}
};
}
 
---------

struct Nec{
char c1;
int x;
char c2;
}g; //hem struct nec bildirildi hemde ismi g olan global bir değişken bildirildi

struct Nec g; //aynı anlama gelir

--

struct Nec{
char c1;
int x;
char c2;
}g1,g2,g3;

//struct Nec g1,g2,g3; aynı anlama gelir

--

struct Nec{
char c1;
int x;
char c2;
}g1 = {'A', 45, 'B'}; //İLK DEĞER VERİLEBİLİNRİ

--

struct Nec {
int a, b,c;
};

struct Nec g = {12, 4, 67}, * p = &g;

-------
point.h
//struct header dosyasında tanımlanır
struct Point {
int x,y,z;
};

------

struct Point {
double x,y,z;
};

int main(void)
{
struct Point p1 = {2.3, 5.6, 9.2};
struct Point p2 = p1;

}

------

!! bir yapı nesnesini hangi operatörlerin operandı yapabilirim

struct Point {
double x,y,z;
};

int main(void)
{
struct Point p = [2.3, 5.6, 9.2};
//p.x
//sizeof(p);
//&p;
//p = 
}

///////////////////////////////////////////////////2 . ders////////////////////////////////////////

Bir yapı nesnesinin hangi operatörlerinin operandı yapabilirim ?

.
sizeof
&
=

-------

struct Point {
double x,y,z;
};

int main(void)
{
struct Point p = {0.};
struct Point * ptr = &p;

sizeof(p);
p.y = 2.3;
(*ptr).x = 3.4;
ptr->x = 3.4; //372. satır ile aynı anlama gelir
}

------------------

struct Point {
double x, y, z;
};

int main(void)
{
struct Point p = {0.};
struct Point * ptr = &p;
}


-------------------------------------

yapı nesneleri atama operatörlerin sol operandı olabilir
yapı nesnelerine atama yapabiliriz

atama geçerli olması için atama operatörünün sağ operandı olan ifadenin de aynı türden
bir yapı nesnesi olması gerekir

struct Data{
int a, b;
double dx;
};

struct Kota{
int a, b;
double dx;
};

int main(void)
{
struct Data mydata = {6, 8, 4.5};
struct Kota mykota = {2,6,9.3}
mydata = mykota //atama yapılamaz (farklı yapı türleri arasında)
}

//implicit conversion (örtülü dönüşüm)

------------

struct Data{
int a, b;
double dx;
int ar[4];
};

int main(void)
{
struct Data x = {10,20,3.4,{2,2,2,2}};
struct Data x = {0};

y = x; //geçerli

memcpy(&y, &x, sizeof(struct Data)); //kopyama işlemi yapar

printf("%d %d %f\n", x.a, x.b, x.dx);
printf("%d %d %f\n", y.a, y.b, y.dx);

print_array(x.ar, 4);
print_array(x.ar, 4);

}

!! her ne kadar aynı türden yapı nesneleri birbirine
atanabilir olsa da özellikle büyük (storage ihtiyaı büyük) yapı nesnelerinin
birbirine atanması ciddi bşr işlem maaliyeti oluşturur. Verim kritik uygulamalarda böyle atamalardan 
mümkün olduğu kadar kaçınmak gerekir.

-------------------
//designated initlializg kullan karmaşıklığı azaltır

struct Student{
int id;
char name[24];
char surname[30];
char address[60];
int grades[20];
};


int main(void)
{
struct Student s = {
.id = 76234,
.name = "ilker",
.surname = "kuzu",
.address = "akman sokak 17 besiktas istanbul",
.grades = {10,10,10,9,9,10};
};
}

-----------

struct { //legal
int a,b, c;
}x = {10,20,30}, y = {5,8,9};

------------

struct { 
int a,b, c;
}x = {10,20,30}

struct { 
int a,b, c;
}y = {1,2,3};
//x ve y farklı türdendir

int main(void)
{
x = y; //x ve y farklı türlerdir birbirine atanamazlar
}

-------------
//bu şekilde korumaya almamız gerekir

#ifndef ILKER_H
#define ILKER_H

struct ılk {
int x,y,z;
};

#endif

-----------------------------------------------

yapı nesnelerinin adresleri ve kullanımı :

struct Nec {
int x, y ,z;

};

int main(void)
{
struct Nec n1 = {12, 56, 78};
struct Nec n2 = {121, 156, 708};

&n //türü struct nec *

struct Nec* p = &n1;
*p = n2; //legal n1 = n2
}

-----

int main(void)
{
struct Nec a[10] = {0};
struct Nec nec = {45, 9,2};

a[3] = nec; //legal
nec = a[4]; // legal
}

-----

ok operatörü : 
!! nokta operatörünün sol operandı yapı nesnesi olmalı
!! ok operatörünün sol operandı yapı türünde pointer olmalıdır

ptr->y

(*ptr).y
ptr-> y

-----

struct Nec{
int x,y,z;
};

int main(void)
{
struct Nec nx = {23, 78, 90};

(&nx)->y = 5; //legal
nx.y = 5 //549. satır ile aynı anlamda

}

-----

struct Nec{
int x,y,z;
};

int main(void)
{
struct Nec a[4];

a->x = 6; //legal array decay
a[0].x = 6; //aynı anlamda
}

------

struct Nec{
int x,y,z;
};

int main(void)
{
struct Nec a[4];

a[2].z = 5; //aynı anlamda
(a + 2) -> z = 5; 
(*(a + 2)).z = 5;
}

-----

struct Nec{
int x,y,z;
};

sturct Nec * foo(void);
int main(void)
{
foo()->x = 10;

}

----------

struct Nec{
int x,y,z;
};

void func(struct Nec* p)
{
p -> x = 4; //en sık bu şekilde kullanılır
}

-----------

struct Date {
int day, mon, year;
};

int main(void)
{
const struct Date mydate = {12, 5, 1987};
struct Date your_date = {4,6,2020};
mydate = your_date; //geçersiz
mydate.mon = 5; //geçersiz 
}

----------

static struct Date mydate = {2,4,1977}; //sadece bu kaynak dosyada kullanılabilinir static'den dolayı

-----------------------------------

typedef bildirimleri ve yapılar:
şu adımları uygula:
1- struct Date x; 
2- typedef struct Date x;
3- typedef struct Date Date;

struct Date {
int day, mon, year;
};

typedef struct Date Date; //struct Date gelmesi gereken yere Date yazmak yeterli olucaktır

int main(void)
{
struct Date x;
Date y; //aynı anlama gelir
}

----------

struct Date {
int day, mon, year;
};

typedef struct Date* DatePtr;

int main(void)
{
struct Date mydate;
DatePtr p = &mydate;
}

-----------

struct Date {
int day,mon,year;
}g;
//bu şekilde de kullanılır
typedef struct Date{
int day, mon,year;
}Date;

-----------

typedef struct {
int day, mon, year;
}Date;

int main(void)
{
Date x = {2,4,1999};
}

-------

typedef struct {
int day, mon, year;
}Date, *DatePtr;

int main(void)
{
Date mydate = {2,5,2023};
DatePtr ptr = &mydate;
}

--------
//bir yapı türünden dinamik ömürlü nesne oluşturmak için yapılır
//öyle bir yapı oluştur ki sadece dinamik ömürlü nesneler oluşturulabilsin 
typedef struct {
int a, b ,c;
}*Sptr;

int main(void)
{
Sptr ptr = (Sptr)malloc(sizeof(*ptr));
}

---------

struct Data {
int (*fp)(int, int);
};

int foo(int, int);

int main(void)
{
struct Data mydata = {foo};
mydata.fp(12,45);
}

---------

yapı türleri ve fonksiyonlar :

-------

typedef struct {
int id;
char name[20];
char surname[32];
int a[20];
}Person;

void print_person(const Person * p) //input parameter
{
printf("id = %d\n", p->id);
printf("name = %s\n", p->name);
printf("surname = %s\n", p->surname);
}

void set_person(Person* ptr) //out-param
{
ptr->id += 10000;
strcat(ptr->surname, "oglu");
}
int main(void)
{
Person per = {78767, "Velican", "akkus"};
set_person(&per);
print_person(&per); //salt okuma amaçlı

}
i
-------

!! kullandığınız bir kütüphanede paramtresi pointer olan bir fonksiyon ile
karşılaştığınızda fonksiyon hakkında belirli bilgileri edinmeden fonksiyon çağrısı yapmayın
hangi bilgiler:

a) parametre out parametre mi? parametre in - out parametre mi
eğer parametre in-out parametre ise fonskiyona adres göndermeden önce adresini göndericeğiniz
yapı nesnenin bir ya da birden fazla elemanını set etmeniz gerekiyor olabilir

b) fonksiyona NULL pointer gönderme opsiyonum varmı
yoksa NULL pointer göndermek undefined behavier(ub) mı?
eğer NULL pointer gönderme opsiyonum varsa ne anlama geliyor?

----------

!! geri dönüş değeri (bir yapı türünden) adres olan fonksiyonlara çağrı yapmadan
aşağıdaki bilgileri edinmiş olacaksınız

-Nasıl bir nesnenin adresini döndürüyor
 statik ömürlü bir nesne adresi
 dinamik ömürlü bir nesne adresi döndürmesi
 sizden aldığı adresi size geri döndürüyor olabilir
 NULL pointer döndürme ihtimali var mı?

!! fonksiyondan aldığım adresteki nesne ile işim bittiğinde bir fonksiyonu 
çağırmam gerekiyor mu?






